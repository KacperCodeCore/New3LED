
New3LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000464c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049fc  080049fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080049fc  080049fc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049fc  080049fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08004a6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004a6c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b48d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002128  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273da  00000000  00000000  0002ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2ec  00000000  00000000  0005614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeac6  00000000  00000000  00065438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d78  00000000  00000000  00153f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00157c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047c4 	.word	0x080047c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080047c4 	.word	0x080047c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_DMA_Init+0x38>)
 8000278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <MX_DMA_Init+0x38>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6493      	str	r3, [r2, #72]	; 0x48
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_DMA_Init+0x38>)
 8000284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f000 fdcd 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f000 fde6 	bl	8000e6a <HAL_NVIC_EnableIRQ>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_GPIO_Init+0x84>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <MX_GPIO_Init+0x84>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_GPIO_Init+0x84>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_GPIO_Init+0x84>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <MX_GPIO_Init+0x84>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_GPIO_Init+0x84>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80002f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4619      	mov	r1, r3
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <MX_GPIO_Init+0x88>)
 8000308:	f000 ffc2 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON1_Pin;
 800030c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f000 ffb4 	bl	8001290 <HAL_GPIO_Init>

}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	48000800 	.word	0x48000800

08000338 <is_user_button_pressed>:
//    } else {
//      return false;
//    }
//}

bool is_user_button_pressed(int button) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  switch (button) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <is_user_button_pressed+0x16>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d00c      	beq.n	8000366 <is_user_button_pressed+0x2e>
 800034c:	e018      	b.n	8000380 <is_user_button_pressed+0x48>
  case 0:
	    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 800034e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000352:	480e      	ldr	r0, [pc, #56]	; (800038c <is_user_button_pressed+0x54>)
 8000354:	f001 f946 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d101      	bne.n	8000362 <is_user_button_pressed+0x2a>
	      return true;
 800035e:	2301      	movs	r3, #1
 8000360:	e00f      	b.n	8000382 <is_user_button_pressed+0x4a>
	    } else {
	      return false;
 8000362:	2300      	movs	r3, #0
 8000364:	e00d      	b.n	8000382 <is_user_button_pressed+0x4a>
	    }
  case 1:
    if (HAL_GPIO_ReadPin(USER_BUTTON1_GPIO_Port, USER_BUTTON1_Pin) == GPIO_PIN_RESET) {
 8000366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f001 f939 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d101      	bne.n	800037c <is_user_button_pressed+0x44>
      return true;
 8000378:	2301      	movs	r3, #1
 800037a:	e002      	b.n	8000382 <is_user_button_pressed+0x4a>
    } else {
      return false;
 800037c:	2300      	movs	r3, #0
 800037e:	e000      	b.n	8000382 <is_user_button_pressed+0x4a>
    }

  default:
    return false;
 8000380:	2300      	movs	r3, #0
  }
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fbd8 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f887 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f7ff ff85 	bl	80002ac <MX_GPIO_Init>
  MX_DMA_Init();
 80003a2:	f7ff ff65 	bl	8000270 <MX_DMA_Init>
  MX_TIM3_Init();
 80003a6:	f000 fa09 	bl	80007bc <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ws2812b_init();
 80003aa:	f000 fb31 	bl	8000a10 <ws2812b_init>
  bool user_button_pressed = false;
 80003ae:	2300      	movs	r3, #0
 80003b0:	75fb      	strb	r3, [r7, #23]
  int led = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  bool directionReverse = false;
 80003b6:	2300      	movs	r3, #0
 80003b8:	73fb      	strb	r3, [r7, #15]
  int currentColor = 1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]


  while (1)
  {
    /* USER CODE END WHILE */
  	  if (is_user_button_pressed(0)) {
 80003be:	2000      	movs	r0, #0
 80003c0:	f7ff ffba 	bl	8000338 <is_user_button_pressed>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d016      	beq.n	80003f8 <main+0x68>
  		  if(user_button_pressed == false){
 80003ca:	7dfb      	ldrb	r3, [r7, #23]
 80003cc:	f083 0301 	eor.w	r3, r3, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d012      	beq.n	80003fc <main+0x6c>
  			  user_button_pressed = true;
 80003d6:	2301      	movs	r3, #1
 80003d8:	75fb      	strb	r3, [r7, #23]
  			directionReverse = !directionReverse;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	bf14      	ite	ne
 80003e0:	2301      	movne	r3, #1
 80003e2:	2300      	moveq	r3, #0
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f083 0301 	eor.w	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	73fb      	strb	r3, [r7, #15]
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	e001      	b.n	80003fc <main+0x6c>
  		  }
  	  }
  	  else{
  		  user_button_pressed = false;
 80003f8:	2300      	movs	r3, #0
 80003fa:	75fb      	strb	r3, [r7, #23]
  	  }


	  if(directionReverse) {
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <main+0x7a>
	          led++;
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	3301      	adds	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	e002      	b.n	8000410 <main+0x80>
	      } else {
	          led--;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	3b01      	subs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]
	      }

	      // Zapobieganie przekroczeniu zakresu
	      if(led >= 6) {
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2b05      	cmp	r3, #5
 8000414:	dd02      	ble.n	800041c <main+0x8c>
	          led = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	e004      	b.n	8000426 <main+0x96>
	      } else if(led < 0) {
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	2b00      	cmp	r3, #0
 8000420:	da01      	bge.n	8000426 <main+0x96>
	          led = 5;
 8000422:	2305      	movs	r3, #5
 8000424:	613b      	str	r3, [r7, #16]
	      }

	      uint8_t r = gamma8[rand() % 70];
 8000426:	f003 f9e7 	bl	80037f8 <rand>
 800042a:	4603      	mov	r3, r0
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <main+0x114>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	441a      	add	r2, r3
 8000434:	1191      	asrs	r1, r2, #6
 8000436:	17da      	asrs	r2, r3, #31
 8000438:	1a8a      	subs	r2, r1, r2
 800043a:	2146      	movs	r1, #70	; 0x46
 800043c:	fb01 f202 	mul.w	r2, r1, r2
 8000440:	1a9a      	subs	r2, r3, r2
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <main+0x118>)
 8000444:	5c9b      	ldrb	r3, [r3, r2]
 8000446:	71fb      	strb	r3, [r7, #7]
	      uint8_t g = gamma8[rand() % 70];
 8000448:	f003 f9d6 	bl	80037f8 <rand>
 800044c:	4603      	mov	r3, r0
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <main+0x114>)
 8000450:	fb82 1203 	smull	r1, r2, r2, r3
 8000454:	441a      	add	r2, r3
 8000456:	1191      	asrs	r1, r2, #6
 8000458:	17da      	asrs	r2, r3, #31
 800045a:	1a8a      	subs	r2, r1, r2
 800045c:	2146      	movs	r1, #70	; 0x46
 800045e:	fb01 f202 	mul.w	r2, r1, r2
 8000462:	1a9a      	subs	r2, r3, r2
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <main+0x118>)
 8000466:	5c9b      	ldrb	r3, [r3, r2]
 8000468:	71bb      	strb	r3, [r7, #6]
	      uint8_t b = gamma8[rand() % 70];
 800046a:	f003 f9c5 	bl	80037f8 <rand>
 800046e:	4603      	mov	r3, r0
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <main+0x114>)
 8000472:	fb82 1203 	smull	r1, r2, r2, r3
 8000476:	441a      	add	r2, r3
 8000478:	1191      	asrs	r1, r2, #6
 800047a:	17da      	asrs	r2, r3, #31
 800047c:	1a8a      	subs	r2, r1, r2
 800047e:	2146      	movs	r1, #70	; 0x46
 8000480:	fb01 f202 	mul.w	r2, r1, r2
 8000484:	1a9a      	subs	r2, r3, r2
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <main+0x118>)
 8000488:	5c9b      	ldrb	r3, [r3, r2]
 800048a:	717b      	strb	r3, [r7, #5]

	      ws2812b_set_color(led, r, g, b);
 800048c:	6938      	ldr	r0, [r7, #16]
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	79f9      	ldrb	r1, [r7, #7]
 8000494:	f000 fafa 	bl	8000a8c <ws2812b_set_color>
	      ws2812b_update();
 8000498:	f000 faea 	bl	8000a70 <ws2812b_update>
	      HAL_Delay(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 fbc9 	bl	8000c34 <HAL_Delay>
  {
 80004a2:	e78c      	b.n	80003be <main+0x2e>
 80004a4:	ea0ea0eb 	.word	0xea0ea0eb
 80004a8:	080047dc 	.word	0x080047dc

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b096      	sub	sp, #88	; 0x58
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2244      	movs	r2, #68	; 0x44
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fadf 	bl	8003a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004d2:	f001 f8ad 	bl	8001630 <HAL_PWREx_ControlVoltageScaling>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004dc:	f000 f838 	bl	8000550 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004e0:	2310      	movs	r3, #16
 80004e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004e4:	2301      	movs	r3, #1
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ec:	2360      	movs	r3, #96	; 0x60
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004f4:	2301      	movs	r3, #1
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004fc:	2328      	movs	r3, #40	; 0x28
 80004fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000500:	2307      	movs	r3, #7
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000504:	2302      	movs	r3, #2
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000508:	2302      	movs	r3, #2
 800050a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4618      	mov	r0, r3
 8000512:	f001 f8e3 	bl	80016dc <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800051c:	f000 f818 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2303      	movs	r3, #3
 8000526:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	2104      	movs	r1, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fcab 	bl	8001e94 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000544:	f000 f804 	bl	8000550 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3758      	adds	r7, #88	; 0x58
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6613      	str	r3, [r2, #96]	; 0x60
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	6593      	str	r3, [r2, #88]	; 0x58
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x44>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 fb00 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <DMA1_Channel6_IRQHandler+0x10>)
 80005fe:	f000 fd67 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000d4 	.word	0x200000d4

0800060c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return 1;
 8000610:	2301      	movs	r3, #1
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <_kill>:

int _kill(int pid, int sig)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000626:	f003 fa79 	bl	8003b1c <__errno>
 800062a:	4603      	mov	r3, r0
 800062c:	2216      	movs	r2, #22
 800062e:	601a      	str	r2, [r3, #0]
  return -1;
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_exit>:

void _exit (int status)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000644:	f04f 31ff 	mov.w	r1, #4294967295
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffe7 	bl	800061c <_kill>
  while (1) {}    /* Make sure we hang here */
 800064e:	e7fe      	b.n	800064e <_exit+0x12>

08000650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e00a      	b.n	8000678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000662:	f3af 8000 	nop.w
 8000666:	4601      	mov	r1, r0
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf0      	blt.n	8000662 <_read+0x12>
  }

  return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e009      	b.n	80006b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf1      	blt.n	800069c <_write+0x12>
  }
  return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_close>:

int _close(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ea:	605a      	str	r2, [r3, #4]
  return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_isatty>:

int _isatty(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f003 f9de 	bl	8003b1c <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20018000 	.word	0x20018000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000084 	.word	0x20000084
 8000794:	20000340 	.word	0x20000340

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007f0:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000802:	2263      	movs	r2, #99	; 0x63
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000812:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000814:	f001 fd2a 	bl	800226c <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800081e:	f7ff fe97 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082c:	4619      	mov	r1, r3
 800082e:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000830:	f002 f972 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800083a:	f7ff fe89 	bl	8000550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083e:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000840:	f001 fdd4 	bl	80023ec <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800084a:	f7ff fe81 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800085e:	f002 ff43 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000868:	f7ff fe72 	bl	8000550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000884:	f002 f834 	bl	80028f0 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800088e:	f7ff fe5f 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000894:	f000 f85a 	bl	800094c <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000088 	.word	0x20000088
 80008a4:	40000400 	.word	0x40000400

080008a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <HAL_TIM_Base_MspInit+0x94>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d13b      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <HAL_TIM_Base_MspInit+0x98>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <HAL_TIM_Base_MspInit+0x98>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_TIM_Base_MspInit+0x98>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008d4:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <HAL_TIM_Base_MspInit+0xa0>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008da:	2205      	movs	r2, #5
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 800090c:	f000 fac8 	bl	8000ea0 <HAL_DMA_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000916:	f7ff fe1b 	bl	8000550 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 800092a:	639a      	str	r2, [r3, #56]	; 0x38
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <HAL_TIM_Base_MspInit+0x9c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000400 	.word	0x40000400
 8000940:	40021000 	.word	0x40021000
 8000944:	200000d4 	.word	0x200000d4
 8000948:	4002006c 	.word	0x4002006c

0800094c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_TIM_MspPostInit+0x64>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d11c      	bne.n	80009a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_TIM_MspPostInit+0x68>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_TIM_MspPostInit+0x68>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_TIM_MspPostInit+0x68>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fc74 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40021000 	.word	0x40021000

080009b8 <set_byte>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e016      	b.n	80009f8 <set_byte+0x40>
    if (value & 0x80) {
 80009ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da06      	bge.n	80009e0 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <set_byte+0x54>)
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	54d1      	strb	r1, [r2, r3]
 80009de:	e005      	b.n	80009ec <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <set_byte+0x54>)
 80009e8:	2120      	movs	r1, #32
 80009ea:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	dde5      	ble.n	80009ca <set_byte+0x12>
  }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	2000011c 	.word	0x2000011c

08000a10 <ws2812b_init>:

void ws2812b_init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e007      	b.n	8000a2c <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <ws2812b_init+0x58>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b27      	cmp	r3, #39	; 0x27
 8000a30:	ddf4      	ble.n	8000a1c <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	e007      	b.n	8000a48 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3328      	adds	r3, #40	; 0x28
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <ws2812b_init+0x58>)
 8000a3e:	2120      	movs	r1, #32
 8000a40:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3301      	adds	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2ba7      	cmp	r3, #167	; 0xa7
 8000a4c:	ddf4      	ble.n	8000a38 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <ws2812b_init+0x58>)
 8000a50:	2264      	movs	r2, #100	; 0x64
 8000a52:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

  HAL_TIM_Base_Start(&htim3);
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <ws2812b_init+0x5c>)
 8000a58:	f001 fc60 	bl	800231c <HAL_TIM_Base_Start>
  ws2812b_update();
 8000a5c:	f000 f808 	bl	8000a70 <ws2812b_update>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000011c 	.word	0x2000011c
 8000a6c:	20000088 	.word	0x20000088

08000a70 <ws2812b_update>:


void ws2812b_update(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000a74:	23d1      	movs	r3, #209	; 0xd1
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <ws2812b_update+0x14>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <ws2812b_update+0x18>)
 8000a7c:	f001 fd18 	bl	80024b0 <HAL_TIM_PWM_Start_DMA>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000011c 	.word	0x2000011c
 8000a88:	20000088 	.word	0x20000088

08000a8c <ws2812b_set_color>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	70fb      	strb	r3, [r7, #3]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70bb      	strb	r3, [r7, #2]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b06      	cmp	r3, #6
 8000aaa:	d820      	bhi.n	8000aee <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	3328      	adds	r3, #40	; 0x28
 8000ab8:	78ba      	ldrb	r2, [r7, #2]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff7b 	bl	80009b8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	3330      	adds	r3, #48	; 0x30
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff70 	bl	80009b8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	3338      	adds	r3, #56	; 0x38
 8000ae4:	787a      	ldrb	r2, [r7, #1]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff65 	bl	80009b8 <set_byte>
	}
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff fe4c 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f002 ffff 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2a:	f7ff fc31 	bl	8000390 <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b3c:	08004a04 	.word	0x08004a04
  ldr r2, =_sbss
 8000b40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b44:	20000340 	.word	0x20000340

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>

08000b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f961 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff fcf6 	bl	800055c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x70>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f96d 	bl	8000e86 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d809      	bhi.n	8000bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f937 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e004      	b.n	8000bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e001      	b.n	8000bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200001f0 	.word	0x200001f0

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200001f0 	.word	0x200001f0

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff3e 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff8e 	bl	8000d70 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff31 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e098      	b.n	8000fe4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_DMA_Init+0x150>)
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d80f      	bhi.n	8000ede <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_DMA_Init+0x154>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_DMA_Init+0x158>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	009a      	lsls	r2, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_DMA_Init+0x15c>)
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40
 8000edc:	e00e      	b.n	8000efc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b46      	ldr	r3, [pc, #280]	; (8001000 <HAL_DMA_Init+0x160>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <HAL_DMA_Init+0x158>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	009a      	lsls	r2, r3, #2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_DMA_Init+0x164>)
 8000efa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f56:	d039      	beq.n	8000fcc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_DMA_Init+0x15c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d11a      	bne.n	8000f98 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_DMA_Init+0x168>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f003 031c 	and.w	r3, r3, #28
 8000f6e:	210f      	movs	r1, #15
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4924      	ldr	r1, [pc, #144]	; (8001008 <HAL_DMA_Init+0x168>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_DMA_Init+0x168>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	f003 031c 	and.w	r3, r3, #28
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	491d      	ldr	r1, [pc, #116]	; (8001008 <HAL_DMA_Init+0x168>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]
 8000f96:	e019      	b.n	8000fcc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_DMA_Init+0x16c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f003 031c 	and.w	r3, r3, #28
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4917      	ldr	r1, [pc, #92]	; (800100c <HAL_DMA_Init+0x16c>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_DMA_Init+0x16c>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 031c 	and.w	r3, r3, #28
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	4911      	ldr	r1, [pc, #68]	; (800100c <HAL_DMA_Init+0x16c>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40020407 	.word	0x40020407
 8000ff4:	bffdfff8 	.word	0xbffdfff8
 8000ff8:	cccccccd 	.word	0xcccccccd
 8000ffc:	40020000 	.word	0x40020000
 8001000:	bffdfbf8 	.word	0xbffdfbf8
 8001004:	40020400 	.word	0x40020400
 8001008:	400200a8 	.word	0x400200a8
 800100c:	400204a8 	.word	0x400204a8

08001010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_DMA_Start_IT+0x20>
 800102c:	2302      	movs	r3, #2
 800102e:	e04b      	b.n	80010c8 <HAL_DMA_Start_IT+0xb8>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d13a      	bne.n	80010ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2202      	movs	r2, #2
 8001048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f8e0 	bl	800122e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 020e 	orr.w	r2, r2, #14
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e00f      	b.n	80010a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0204 	bic.w	r2, r2, #4
 8001096:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 020a 	orr.w	r2, r2, #10
 80010a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e005      	b.n	80010c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010c2:	2302      	movs	r3, #2
 80010c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f003 031c 	and.w	r3, r3, #28
 80010f0:	2204      	movs	r2, #4
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d026      	beq.n	800114a <HAL_DMA_IRQHandler+0x7a>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d021      	beq.n	800114a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f003 021c 	and.w	r2, r3, #28
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	2104      	movs	r1, #4
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	2b00      	cmp	r3, #0
 800113e:	d071      	beq.n	8001224 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001148:	e06c      	b.n	8001224 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f003 031c 	and.w	r3, r3, #28
 8001152:	2202      	movs	r2, #2
 8001154:	409a      	lsls	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d02e      	beq.n	80011bc <HAL_DMA_IRQHandler+0xec>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d029      	beq.n	80011bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10b      	bne.n	800118e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020a 	bic.w	r2, r2, #10
 8001184:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 021c 	and.w	r2, r3, #28
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2102      	movs	r1, #2
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d038      	beq.n	8001224 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011ba:	e033      	b.n	8001224 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f003 031c 	and.w	r3, r3, #28
 80011c4:	2208      	movs	r2, #8
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d02a      	beq.n	8001226 <HAL_DMA_IRQHandler+0x156>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d025      	beq.n	8001226 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 020e 	bic.w	r2, r2, #14
 80011e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 021c 	and.w	r2, r3, #28
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001224:	bf00      	nop
 8001226:	bf00      	nop
}
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	f003 021c 	and.w	r2, r3, #28
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d108      	bne.n	8001272 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001270:	e007      	b.n	8001282 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	60da      	str	r2, [r3, #12]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e17f      	b.n	80015a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8171 	beq.w	800159a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d118      	bne.n	8001370 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ac 	beq.w	800159a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x242>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <HAL_GPIO_Init+0x338>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_GPIO_Init+0x33c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x340>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x344>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_GPIO_Init+0x348>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_GPIO_Init+0x34c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x22a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014d2:	2300      	movs	r3, #0
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e4:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x350>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae78 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_PWREx_GetVoltageRange+0x18>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163e:	d130      	bne.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164c:	d038      	beq.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2232      	movs	r2, #50	; 0x32
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001674:	e002      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3b01      	subs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d102      	bne.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x60>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f2      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169c:	d110      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e00f      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ae:	d007      	beq.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000
 80016d4:	20000000 	.word	0x20000000
 80016d8:	431bde83 	.word	0x431bde83

080016dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e3ca      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4b97      	ldr	r3, [pc, #604]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f8:	4b94      	ldr	r3, [pc, #592]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80e4 	beq.w	80018d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_RCC_OscConfig+0x4a>
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	f040 808b 	bne.w	8001834 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b01      	cmp	r3, #1
 8001722:	f040 8087 	bne.w	8001834 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e3a2      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4b82      	ldr	r3, [pc, #520]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_RCC_OscConfig+0x7c>
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001756:	e005      	b.n	8001764 <HAL_RCC_OscConfig+0x88>
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	4293      	cmp	r3, r2
 8001766:	d223      	bcs.n	80017b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fd1d 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e383      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177c:	4b73      	ldr	r3, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a72      	ldr	r2, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b70      	ldr	r3, [pc, #448]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	496d      	ldr	r1, [pc, #436]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	4968      	ldr	r1, [pc, #416]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
 80017ae:	e025      	b.n	80017fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b0:	4b66      	ldr	r3, [pc, #408]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4960      	ldr	r1, [pc, #384]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	495b      	ldr	r1, [pc, #364]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fcdd 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e343      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017fc:	f000 fc4a 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	4950      	ldr	r1, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x274>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_RCC_OscConfig+0x278>)
 800181a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_RCC_OscConfig+0x27c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f9ab 	bl	8000b7c <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d052      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	e327      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d032      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a42      	ldr	r2, [pc, #264]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001848:	f7ff f9e8 	bl	8000c1c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001850:	f7ff f9e4 	bl	8000c1c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e310      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4931      	ldr	r1, [pc, #196]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	492c      	ldr	r1, [pc, #176]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e01a      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a29      	ldr	r2, [pc, #164]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f9b5 	bl	8000c1c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b6:	f7ff f9b1 	bl	8000c1c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e2dd      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x1da>
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d074      	beq.n	80019ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x21a>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d10e      	bne.n	800190e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d10b      	bne.n	800190e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d064      	beq.n	80019cc <HAL_RCC_OscConfig+0x2f0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d160      	bne.n	80019cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e2ba      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x24a>
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e026      	b.n	8001974 <HAL_RCC_OscConfig+0x298>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192e:	d115      	bne.n	800195c <HAL_RCC_OscConfig+0x280>
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a02      	ldr	r2, [pc, #8]	; (800194c <HAL_RCC_OscConfig+0x270>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x298>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	080048dc 	.word	0x080048dc
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004
 800195c:	4ba0      	ldr	r3, [pc, #640]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a9f      	ldr	r2, [pc, #636]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b9d      	ldr	r3, [pc, #628]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a9c      	ldr	r2, [pc, #624]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f94e 	bl	8000c1c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f94a 	bl	8000c1c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e276      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x2a8>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f93a 	bl	8000c1c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f936 	bl	8000c1c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e262      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019be:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x2d0>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d060      	beq.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x310>
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d119      	bne.n	8001a1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d116      	bne.n	8001a1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ec:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x328>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e23f      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	4973      	ldr	r1, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a18:	e040      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d023      	beq.n	8001a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a22:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8f5 	bl	8000c1c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f8f1 	bl	8000c1c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e21d      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	495f      	ldr	r1, [pc, #380]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f8d1 	bl	8000c1c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f8cd 	bl	8000c1c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1f9      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f8ac 	bl	8000c1c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f8a8 	bl	8000c1c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1d4      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ef      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x3ec>
 8001ae8:	e01b      	b.n	8001b22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f88f 	bl	8000c1c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff f88b 	bl	8000c1c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1b7      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ef      	bne.n	8001b02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80a6 	beq.w	8001c7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x508>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d118      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_OscConfig+0x508>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b74:	f7ff f852 	bl	8000c1c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff f84e 	bl	8000c1c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e17a      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_RCC_OscConfig+0x508>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4d8>
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb2:	e029      	b.n	8001c08 <HAL_RCC_OscConfig+0x52c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d115      	bne.n	8001be8 <HAL_RCC_OscConfig+0x50c>
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x52c>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a9b      	ldr	r2, [pc, #620]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	4b98      	ldr	r3, [pc, #608]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a97      	ldr	r2, [pc, #604]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d016      	beq.n	8001c3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f804 	bl	8000c1c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f800 	bl	8000c1c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e12a      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ed      	beq.n	8001c18 <HAL_RCC_OscConfig+0x53c>
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ffed 	bl	8000c1c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe ffe9 	bl	8000c1c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e113      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ed      	bne.n	8001c46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a79      	ldr	r2, [pc, #484]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80fe 	beq.w	8001e82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	f040 80d0 	bne.w	8001e30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c90:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d130      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d127      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d11f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd0:	2a07      	cmp	r2, #7
 8001cd2:	bf14      	ite	ne
 8001cd4:	2201      	movne	r2, #1
 8001cd6:	2200      	moveq	r2, #0
 8001cd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d113      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d06e      	beq.n	8001de4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d069      	beq.n	8001de0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d18:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0ad      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d34:	f7fe ff72 	bl	8000c1c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff6e 	bl	8000c1c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e09a      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x784>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d6a:	3a01      	subs	r2, #1
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d7c:	0852      	lsrs	r2, r2, #1
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	0552      	lsls	r2, r2, #21
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d88:	0852      	lsrs	r2, r2, #1
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0652      	lsls	r2, r2, #25
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d94:	0912      	lsrs	r2, r2, #4
 8001d96:	0452      	lsls	r2, r2, #17
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	4930      	ldr	r1, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db8:	f7fe ff30 	bl	8000c1c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ff2c 	bl	8000c1c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dde:	e050      	b.n	8001e82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e04f      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d148      	bne.n	8001e82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e08:	f7fe ff08 	bl	8000c1c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ff04 	bl	8000c1c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e030      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x734>
 8001e2e:	e028      	b.n	8001e82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d023      	beq.n	8001e7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_RCC_OscConfig+0x780>)
 8001e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe feeb 	bl	8000c1c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	e00c      	b.n	8001e64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fee7 	bl	8000c1c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d905      	bls.n	8001e64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x7b0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ec      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x7b0>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4905      	ldr	r1, [pc, #20]	; (8001e8c <HAL_RCC_OscConfig+0x7b0>)
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x7b4>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e001      	b.n	8001e82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	feeefffc 	.word	0xfeeefffc

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0e7      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4970      	ldr	r1, [pc, #448]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b6e      	ldr	r3, [pc, #440]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cf      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d908      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4960      	ldr	r1, [pc, #384]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04c      	beq.n	8001fac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d121      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0a6      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e09a      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e08e      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e086      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4943      	ldr	r1, [pc, #268]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7c:	f7fe fe4e 	bl	8000c1c <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7fe fe4a 	bl	8000c1c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e06e      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d208      	bcs.n	8001fda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	492b      	ldr	r1, [pc, #172]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d210      	bcs.n	800200a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4923      	ldr	r1, [pc, #140]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e036      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4918      	ldr	r1, [pc, #96]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4910      	ldr	r1, [pc, #64]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002048:	f000 f824 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	490b      	ldr	r1, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1f4>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fd85 	bl	8000b7c <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
 8002074:	72fb      	strb	r3, [r7, #11]

  return status;
 8002076:	7afb      	ldrb	r3, [r7, #11]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40022000 	.word	0x40022000
 8002084:	40021000 	.word	0x40021000
 8002088:	080048dc 	.word	0x080048dc
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x34>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d11e      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002104:	e00a      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d102      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	e004      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d101      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800211a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d134      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0xa6>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d003      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0xac>
 8002138:	e005      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800213c:	617b      	str	r3, [r7, #20]
      break;
 800213e:	e005      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002142:	617b      	str	r3, [r7, #20]
      break;
 8002144:	e002      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	617b      	str	r3, [r7, #20]
      break;
 800214a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	3301      	adds	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	0e5b      	lsrs	r3, r3, #25
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	3301      	adds	r3, #1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800218c:	69bb      	ldr	r3, [r7, #24]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	080048ec 	.word	0x080048ec
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff fa26 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff fa16 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	; 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e049      	b.n	8002312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fb08 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f000 fdec 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d001      	beq.n	8002334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e047      	b.n	80023c4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_TIM_Base_Start+0xb4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d018      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_TIM_Base_Start+0xb8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_TIM_Base_Start+0xbc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00e      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_TIM_Base_Start+0xc0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_TIM_Base_Start+0xc4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_TIM_Base_Start+0x66>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_TIM_Base_Start+0xc8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d115      	bne.n	80023ae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_TIM_Base_Start+0xcc>)
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d015      	beq.n	80023c0 <HAL_TIM_Base_Start+0xa4>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d011      	beq.n	80023c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	e008      	b.n	80023c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e000      	b.n	80023c2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40000c00 	.word	0x40000c00
 80023e0:	40013400 	.word	0x40013400
 80023e4:	40014000 	.word	0x40014000
 80023e8:	00010007 	.word	0x00010007

080023ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e049      	b.n	8002492 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f841 	bl	800249a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fd2c 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e03c      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0xa6>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d109      	bne.n	80024f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e02f      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0xa6>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start_DMA+0x60>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e022      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d109      	bne.n	800252a <HAL_TIM_PWM_Start_DMA+0x7a>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e015      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0xa6>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start_DMA+0x94>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	e1ab      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e03c      	b.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b04      	cmp	r3, #4
 800257c:	d109      	bne.n	8002592 <HAL_TIM_PWM_Start_DMA+0xe2>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e02f      	b.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d109      	bne.n	80025ac <HAL_TIM_PWM_Start_DMA+0xfc>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e022      	b.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d109      	bne.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x116>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e015      	b.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d109      	bne.n	80025e0 <HAL_TIM_PWM_Start_DMA+0x130>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e008      	b.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d034      	beq.n	8002660 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_TIM_PWM_Start_DMA+0x152>
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e157      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <HAL_TIM_PWM_Start_DMA+0x166>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	e026      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d104      	bne.n	8002626 <HAL_TIM_PWM_Start_DMA+0x176>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	e01e      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d104      	bne.n	8002636 <HAL_TIM_PWM_Start_DMA+0x186>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002634:	e016      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d104      	bne.n	8002646 <HAL_TIM_PWM_Start_DMA+0x196>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002644:	e00e      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b10      	cmp	r3, #16
 800264a:	d104      	bne.n	8002656 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002654:	e006      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800265e:	e001      	b.n	8002664 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e128      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	f200 80ae 	bhi.w	80027c8 <HAL_TIM_PWM_Start_DMA+0x318>
 800266c:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080027c9 	.word	0x080027c9
 800267c:	080027c9 	.word	0x080027c9
 8002680:	080027c9 	.word	0x080027c9
 8002684:	080026f1 	.word	0x080026f1
 8002688:	080027c9 	.word	0x080027c9
 800268c:	080027c9 	.word	0x080027c9
 8002690:	080027c9 	.word	0x080027c9
 8002694:	08002739 	.word	0x08002739
 8002698:	080027c9 	.word	0x080027c9
 800269c:	080027c9 	.word	0x080027c9
 80026a0:	080027c9 	.word	0x080027c9
 80026a4:	08002781 	.word	0x08002781
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	4a84      	ldr	r2, [pc, #528]	; (80028c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	4a83      	ldr	r2, [pc, #524]	; (80028c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	4a82      	ldr	r2, [pc, #520]	; (80028c8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80026be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3334      	adds	r3, #52	; 0x34
 80026cc:	461a      	mov	r2, r3
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	f7fe fc9e 	bl	8001010 <HAL_DMA_Start_IT>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0eb      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ec:	60da      	str	r2, [r3, #12]
      break;
 80026ee:	e06e      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	4a70      	ldr	r2, [pc, #448]	; (80028c8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8002706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3338      	adds	r3, #56	; 0x38
 8002714:	461a      	mov	r2, r3
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	f7fe fc7a 	bl	8001010 <HAL_DMA_Start_IT>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0c7      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002734:	60da      	str	r2, [r3, #12]
      break;
 8002736:	e04a      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4a60      	ldr	r2, [pc, #384]	; (80028c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4a5e      	ldr	r2, [pc, #376]	; (80028c8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800274e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	333c      	adds	r3, #60	; 0x3c
 800275c:	461a      	mov	r2, r3
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	f7fe fc56 	bl	8001010 <HAL_DMA_Start_IT>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0a3      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277c:	60da      	str	r2, [r3, #12]
      break;
 800277e:	e026      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8002796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3340      	adds	r3, #64	; 0x40
 80027a4:	461a      	mov	r2, r3
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	f7fe fc32 	bl	8001010 <HAL_DMA_Start_IT>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027c4:	60da      	str	r2, [r3, #12]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
      break;
 80027cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d16f      	bne.n	80028b4 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 ff5d 	bl	800369c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_TIM_PWM_Start_DMA+0x364>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_TIM_PWM_Start_DMA+0x364>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_TIM_PWM_Start_DMA+0x364>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_PWM_Start_DMA+0x364>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	; (80028dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_TIM_PWM_Start_DMA+0x368>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_TIM_PWM_Start_DMA+0x36a>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a26      	ldr	r2, [pc, #152]	; (80028cc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d018      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d115      	bne.n	80028a0 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_TIM_PWM_Start_DMA+0x43c>)
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d015      	beq.n	80028b2 <HAL_TIM_PWM_Start_DMA+0x402>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d011      	beq.n	80028b2 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e008      	b.n	80028b2 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	08002d79 	.word	0x08002d79
 80028c4:	08002e21 	.word	0x08002e21
 80028c8:	08002ce7 	.word	0x08002ce7
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40000c00 	.word	0x40000c00
 80028ec:	00010007 	.word	0x00010007

080028f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800290a:	2302      	movs	r3, #2
 800290c:	e0ff      	b.n	8002b0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b14      	cmp	r3, #20
 800291a:	f200 80f0 	bhi.w	8002afe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002979 	.word	0x08002979
 8002928:	08002aff 	.word	0x08002aff
 800292c:	08002aff 	.word	0x08002aff
 8002930:	08002aff 	.word	0x08002aff
 8002934:	080029b9 	.word	0x080029b9
 8002938:	08002aff 	.word	0x08002aff
 800293c:	08002aff 	.word	0x08002aff
 8002940:	08002aff 	.word	0x08002aff
 8002944:	080029fb 	.word	0x080029fb
 8002948:	08002aff 	.word	0x08002aff
 800294c:	08002aff 	.word	0x08002aff
 8002950:	08002aff 	.word	0x08002aff
 8002954:	08002a3b 	.word	0x08002a3b
 8002958:	08002aff 	.word	0x08002aff
 800295c:	08002aff 	.word	0x08002aff
 8002960:	08002aff 	.word	0x08002aff
 8002964:	08002a7d 	.word	0x08002a7d
 8002968:	08002aff 	.word	0x08002aff
 800296c:	08002aff 	.word	0x08002aff
 8002970:	08002aff 	.word	0x08002aff
 8002974:	08002abd 	.word	0x08002abd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb1c 	bl	8002fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6999      	ldr	r1, [r3, #24]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	619a      	str	r2, [r3, #24]
      break;
 80029b6:	e0a5      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fb8c 	bl	80030dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6999      	ldr	r1, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	021a      	lsls	r2, r3, #8
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	619a      	str	r2, [r3, #24]
      break;
 80029f8:	e084      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fbf5 	bl	80031f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0208 	orr.w	r2, r2, #8
 8002a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0204 	bic.w	r2, r2, #4
 8002a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69d9      	ldr	r1, [r3, #28]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	61da      	str	r2, [r3, #28]
      break;
 8002a38:	e064      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fc5d 	bl	8003300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	61da      	str	r2, [r3, #28]
      break;
 8002a7a:	e043      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fca6 	bl	80033d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002aba:	e023      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fcea 	bl	800349c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002afc:	e002      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
      break;
 8002b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_ConfigClockSource+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0b6      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b70:	d03e      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0xd8>
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b76:	f200 8087 	bhi.w	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	f000 8086 	beq.w	8002c8e <HAL_TIM_ConfigClockSource+0x176>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	d87f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b88:	2b70      	cmp	r3, #112	; 0x70
 8002b8a:	d01a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0xaa>
 8002b8c:	2b70      	cmp	r3, #112	; 0x70
 8002b8e:	d87b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b90:	2b60      	cmp	r3, #96	; 0x60
 8002b92:	d050      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x11e>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d877      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002b98:	2b50      	cmp	r3, #80	; 0x50
 8002b9a:	d03c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xfe>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d873      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d058      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x13e>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d86f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002ba8:	2b30      	cmp	r3, #48	; 0x30
 8002baa:	d064      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d86b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d060      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d867      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d05a      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15e>
 8002bc0:	e062      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bd2:	f000 fd43 	bl	800365c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	609a      	str	r2, [r3, #8]
      break;
 8002bee:	e04f      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c00:	f000 fd2c 	bl	800365c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c12:	609a      	str	r2, [r3, #8]
      break;
 8002c14:	e03c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 fca0 	bl	8003568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2150      	movs	r1, #80	; 0x50
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fcf9 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8002c34:	e02c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 fcbf 	bl	80035c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2160      	movs	r1, #96	; 0x60
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fce9 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e01c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 fc80 	bl	8003568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fcd9 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f000 fcd0 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e000      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d107      	bne.n	8002d0e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	e02a      	b.n	8002d64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d26:	e01d      	b.n	8002d64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d107      	bne.n	8002d42 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2204      	movs	r2, #4
 8002d36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	e010      	b.n	8002d64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d107      	bne.n	8002d5c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d5a:	e003      	b.n	8002d64 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff ffb4 	bl	8002cd2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d10b      	bne.n	8002da8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d136      	bne.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da6:	e031      	b.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d10b      	bne.n	8002dca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d125      	bne.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc8:	e020      	b.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10b      	bne.n	8002dec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d114      	bne.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dea:	e00f      	b.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d10a      	bne.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff4c 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d103      	bne.n	8002e40 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	771a      	strb	r2, [r3, #28]
 8002e3e:	e019      	b.n	8002e74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d103      	bne.n	8002e52 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	771a      	strb	r2, [r3, #28]
 8002e50:	e010      	b.n	8002e74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d103      	bne.n	8002e64 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	771a      	strb	r2, [r3, #28]
 8002e62:	e007      	b.n	8002e74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d102      	bne.n	8002e74 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff ff22 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a40      	ldr	r2, [pc, #256]	; (8002f9c <TIM_Base_SetConfig+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d00f      	beq.n	8002ec8 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <TIM_Base_SetConfig+0x118>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <TIM_Base_SetConfig+0x11c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3b      	ldr	r2, [pc, #236]	; (8002fa8 <TIM_Base_SetConfig+0x120>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <TIM_Base_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <TIM_Base_SetConfig+0x114>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d01b      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <TIM_Base_SetConfig+0x118>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d017      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <TIM_Base_SetConfig+0x11c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <TIM_Base_SetConfig+0x120>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <TIM_Base_SetConfig+0x124>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <TIM_Base_SetConfig+0x128>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <TIM_Base_SetConfig+0x12c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x9a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <TIM_Base_SetConfig+0x130>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <TIM_Base_SetConfig+0x114>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0xf8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <TIM_Base_SetConfig+0x124>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0xf8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <TIM_Base_SetConfig+0x128>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0xf8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <TIM_Base_SetConfig+0x12c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0xf8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <TIM_Base_SetConfig+0x130>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40000c00 	.word	0x40000c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800

08002fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 0201 	bic.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 0302 	bic.w	r3, r3, #2
 8003008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <TIM_OC1_SetConfig+0x10c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00f      	beq.n	800303c <TIM_OC1_SetConfig+0x80>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <TIM_OC1_SetConfig+0x110>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_OC1_SetConfig+0x80>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <TIM_OC1_SetConfig+0x114>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_OC1_SetConfig+0x80>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <TIM_OC1_SetConfig+0x118>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC1_SetConfig+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <TIM_OC1_SetConfig+0x11c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0308 	bic.w	r3, r3, #8
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <TIM_OC1_SetConfig+0x10c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00f      	beq.n	800307e <TIM_OC1_SetConfig+0xc2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <TIM_OC1_SetConfig+0x110>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00b      	beq.n	800307e <TIM_OC1_SetConfig+0xc2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <TIM_OC1_SetConfig+0x114>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <TIM_OC1_SetConfig+0xc2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <TIM_OC1_SetConfig+0x118>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_OC1_SetConfig+0xc2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <TIM_OC1_SetConfig+0x11c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d111      	bne.n	80030a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40013400 	.word	0x40013400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800

080030dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f023 0210 	bic.w	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0320 	bic.w	r3, r3, #32
 800312a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a28      	ldr	r2, [pc, #160]	; (80031dc <TIM_OC2_SetConfig+0x100>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_OC2_SetConfig+0x6c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <TIM_OC2_SetConfig+0x104>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10d      	bne.n	8003164 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_OC2_SetConfig+0x100>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00f      	beq.n	800318c <TIM_OC2_SetConfig+0xb0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <TIM_OC2_SetConfig+0x104>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00b      	beq.n	800318c <TIM_OC2_SetConfig+0xb0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <TIM_OC2_SetConfig+0x108>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <TIM_OC2_SetConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <TIM_OC2_SetConfig+0x10c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC2_SetConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a19      	ldr	r2, [pc, #100]	; (80031ec <TIM_OC2_SetConfig+0x110>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d113      	bne.n	80031b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40013400 	.word	0x40013400
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800

080031f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0303 	bic.w	r3, r3, #3
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800323c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <TIM_OC3_SetConfig+0xfc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC3_SetConfig+0x6a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_OC3_SetConfig+0x100>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10d      	bne.n	8003276 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <TIM_OC3_SetConfig+0xfc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_OC3_SetConfig+0xae>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <TIM_OC3_SetConfig+0x100>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_OC3_SetConfig+0xae>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <TIM_OC3_SetConfig+0x104>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_OC3_SetConfig+0xae>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_OC3_SetConfig+0x108>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_OC3_SetConfig+0xae>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <TIM_OC3_SetConfig+0x10c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d113      	bne.n	80032c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800

08003300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800334e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	031b      	lsls	r3, r3, #12
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <TIM_OC4_SetConfig+0xc0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00f      	beq.n	8003384 <TIM_OC4_SetConfig+0x84>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <TIM_OC4_SetConfig+0xc4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <TIM_OC4_SetConfig+0x84>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <TIM_OC4_SetConfig+0xc8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <TIM_OC4_SetConfig+0x84>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <TIM_OC4_SetConfig+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_OC4_SetConfig+0x84>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC4_SetConfig+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003418:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a17      	ldr	r2, [pc, #92]	; (8003488 <TIM_OC5_SetConfig+0xb4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_OC5_SetConfig+0x7a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a16      	ldr	r2, [pc, #88]	; (800348c <TIM_OC5_SetConfig+0xb8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_OC5_SetConfig+0x7a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC5_SetConfig+0xbc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_OC5_SetConfig+0x7a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <TIM_OC5_SetConfig+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_OC5_SetConfig+0x7a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a13      	ldr	r2, [pc, #76]	; (8003498 <TIM_OC5_SetConfig+0xc4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d109      	bne.n	8003462 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	051b      	lsls	r3, r3, #20
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <TIM_OC6_SetConfig+0xb8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_OC6_SetConfig+0x7c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <TIM_OC6_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00b      	beq.n	8003518 <TIM_OC6_SetConfig+0x7c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <TIM_OC6_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_OC6_SetConfig+0x7c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC6_SetConfig+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC6_SetConfig+0x7c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <TIM_OC6_SetConfig+0xc8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d109      	bne.n	800352c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	029b      	lsls	r3, r3, #10
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40013400 	.word	0x40013400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800

08003568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 030a 	bic.w	r3, r3, #10
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f023 0210 	bic.w	r2, r3, #16
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	431a      	orrs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4313      	orrs	r3, r2
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2201      	movs	r2, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e068      	b.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2e      	ldr	r2, [pc, #184]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2d      	ldr	r2, [pc, #180]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800373a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01d      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d018      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40013400 	.word	0x40013400
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40014000 	.word	0x40014000

080037f8 <rand>:
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <rand+0x5c>)
 80037fa:	b510      	push	{r4, lr}
 80037fc:	681c      	ldr	r4, [r3, #0]
 80037fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003800:	b9b3      	cbnz	r3, 8003830 <rand+0x38>
 8003802:	2018      	movs	r0, #24
 8003804:	f000 fa22 	bl	8003c4c <malloc>
 8003808:	4602      	mov	r2, r0
 800380a:	6320      	str	r0, [r4, #48]	; 0x30
 800380c:	b920      	cbnz	r0, 8003818 <rand+0x20>
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <rand+0x60>)
 8003810:	4812      	ldr	r0, [pc, #72]	; (800385c <rand+0x64>)
 8003812:	2152      	movs	r1, #82	; 0x52
 8003814:	f000 f9b0 	bl	8003b78 <__assert_func>
 8003818:	4911      	ldr	r1, [pc, #68]	; (8003860 <rand+0x68>)
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <rand+0x6c>)
 800381c:	e9c0 1300 	strd	r1, r3, [r0]
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <rand+0x70>)
 8003822:	6083      	str	r3, [r0, #8]
 8003824:	230b      	movs	r3, #11
 8003826:	8183      	strh	r3, [r0, #12]
 8003828:	2100      	movs	r1, #0
 800382a:	2001      	movs	r0, #1
 800382c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003830:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003832:	480e      	ldr	r0, [pc, #56]	; (800386c <rand+0x74>)
 8003834:	690b      	ldr	r3, [r1, #16]
 8003836:	694c      	ldr	r4, [r1, #20]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <rand+0x78>)
 800383a:	4358      	muls	r0, r3
 800383c:	fb02 0004 	mla	r0, r2, r4, r0
 8003840:	fba3 3202 	umull	r3, r2, r3, r2
 8003844:	3301      	adds	r3, #1
 8003846:	eb40 0002 	adc.w	r0, r0, r2
 800384a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800384e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003852:	bd10      	pop	{r4, pc}
 8003854:	20000064 	.word	0x20000064
 8003858:	0800491c 	.word	0x0800491c
 800385c:	08004933 	.word	0x08004933
 8003860:	abcd330e 	.word	0xabcd330e
 8003864:	e66d1234 	.word	0xe66d1234
 8003868:	0005deec 	.word	0x0005deec
 800386c:	5851f42d 	.word	0x5851f42d
 8003870:	4c957f2d 	.word	0x4c957f2d

08003874 <std>:
 8003874:	2300      	movs	r3, #0
 8003876:	b510      	push	{r4, lr}
 8003878:	4604      	mov	r4, r0
 800387a:	e9c0 3300 	strd	r3, r3, [r0]
 800387e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003882:	6083      	str	r3, [r0, #8]
 8003884:	8181      	strh	r1, [r0, #12]
 8003886:	6643      	str	r3, [r0, #100]	; 0x64
 8003888:	81c2      	strh	r2, [r0, #14]
 800388a:	6183      	str	r3, [r0, #24]
 800388c:	4619      	mov	r1, r3
 800388e:	2208      	movs	r2, #8
 8003890:	305c      	adds	r0, #92	; 0x5c
 8003892:	f000 f8f4 	bl	8003a7e <memset>
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <std+0x58>)
 8003898:	6263      	str	r3, [r4, #36]	; 0x24
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <std+0x5c>)
 800389c:	62a3      	str	r3, [r4, #40]	; 0x28
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <std+0x60>)
 80038a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <std+0x64>)
 80038a4:	6323      	str	r3, [r4, #48]	; 0x30
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <std+0x68>)
 80038a8:	6224      	str	r4, [r4, #32]
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d006      	beq.n	80038bc <std+0x48>
 80038ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80038b2:	4294      	cmp	r4, r2
 80038b4:	d002      	beq.n	80038bc <std+0x48>
 80038b6:	33d0      	adds	r3, #208	; 0xd0
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d105      	bne.n	80038c8 <std+0x54>
 80038bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c4:	f000 b954 	b.w	8003b70 <__retarget_lock_init_recursive>
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	bf00      	nop
 80038cc:	080039f9 	.word	0x080039f9
 80038d0:	08003a1b 	.word	0x08003a1b
 80038d4:	08003a53 	.word	0x08003a53
 80038d8:	08003a77 	.word	0x08003a77
 80038dc:	200001f4 	.word	0x200001f4

080038e0 <stdio_exit_handler>:
 80038e0:	4a02      	ldr	r2, [pc, #8]	; (80038ec <stdio_exit_handler+0xc>)
 80038e2:	4903      	ldr	r1, [pc, #12]	; (80038f0 <stdio_exit_handler+0x10>)
 80038e4:	4803      	ldr	r0, [pc, #12]	; (80038f4 <stdio_exit_handler+0x14>)
 80038e6:	f000 b869 	b.w	80039bc <_fwalk_sglue>
 80038ea:	bf00      	nop
 80038ec:	2000000c 	.word	0x2000000c
 80038f0:	08003ec1 	.word	0x08003ec1
 80038f4:	20000018 	.word	0x20000018

080038f8 <cleanup_stdio>:
 80038f8:	6841      	ldr	r1, [r0, #4]
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <cleanup_stdio+0x34>)
 80038fc:	4299      	cmp	r1, r3
 80038fe:	b510      	push	{r4, lr}
 8003900:	4604      	mov	r4, r0
 8003902:	d001      	beq.n	8003908 <cleanup_stdio+0x10>
 8003904:	f000 fadc 	bl	8003ec0 <_fflush_r>
 8003908:	68a1      	ldr	r1, [r4, #8]
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <cleanup_stdio+0x38>)
 800390c:	4299      	cmp	r1, r3
 800390e:	d002      	beq.n	8003916 <cleanup_stdio+0x1e>
 8003910:	4620      	mov	r0, r4
 8003912:	f000 fad5 	bl	8003ec0 <_fflush_r>
 8003916:	68e1      	ldr	r1, [r4, #12]
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <cleanup_stdio+0x3c>)
 800391a:	4299      	cmp	r1, r3
 800391c:	d004      	beq.n	8003928 <cleanup_stdio+0x30>
 800391e:	4620      	mov	r0, r4
 8003920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003924:	f000 bacc 	b.w	8003ec0 <_fflush_r>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	bf00      	nop
 800392c:	200001f4 	.word	0x200001f4
 8003930:	2000025c 	.word	0x2000025c
 8003934:	200002c4 	.word	0x200002c4

08003938 <global_stdio_init.part.0>:
 8003938:	b510      	push	{r4, lr}
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <global_stdio_init.part.0+0x30>)
 800393c:	4c0b      	ldr	r4, [pc, #44]	; (800396c <global_stdio_init.part.0+0x34>)
 800393e:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <global_stdio_init.part.0+0x38>)
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	4620      	mov	r0, r4
 8003944:	2200      	movs	r2, #0
 8003946:	2104      	movs	r1, #4
 8003948:	f7ff ff94 	bl	8003874 <std>
 800394c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003950:	2201      	movs	r2, #1
 8003952:	2109      	movs	r1, #9
 8003954:	f7ff ff8e 	bl	8003874 <std>
 8003958:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800395c:	2202      	movs	r2, #2
 800395e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003962:	2112      	movs	r1, #18
 8003964:	f7ff bf86 	b.w	8003874 <std>
 8003968:	2000032c 	.word	0x2000032c
 800396c:	200001f4 	.word	0x200001f4
 8003970:	080038e1 	.word	0x080038e1

08003974 <__sfp_lock_acquire>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__sfp_lock_acquire+0x8>)
 8003976:	f000 b8fc 	b.w	8003b72 <__retarget_lock_acquire_recursive>
 800397a:	bf00      	nop
 800397c:	20000335 	.word	0x20000335

08003980 <__sfp_lock_release>:
 8003980:	4801      	ldr	r0, [pc, #4]	; (8003988 <__sfp_lock_release+0x8>)
 8003982:	f000 b8f7 	b.w	8003b74 <__retarget_lock_release_recursive>
 8003986:	bf00      	nop
 8003988:	20000335 	.word	0x20000335

0800398c <__sinit>:
 800398c:	b510      	push	{r4, lr}
 800398e:	4604      	mov	r4, r0
 8003990:	f7ff fff0 	bl	8003974 <__sfp_lock_acquire>
 8003994:	6a23      	ldr	r3, [r4, #32]
 8003996:	b11b      	cbz	r3, 80039a0 <__sinit+0x14>
 8003998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800399c:	f7ff bff0 	b.w	8003980 <__sfp_lock_release>
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__sinit+0x28>)
 80039a2:	6223      	str	r3, [r4, #32]
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <__sinit+0x2c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f5      	bne.n	8003998 <__sinit+0xc>
 80039ac:	f7ff ffc4 	bl	8003938 <global_stdio_init.part.0>
 80039b0:	e7f2      	b.n	8003998 <__sinit+0xc>
 80039b2:	bf00      	nop
 80039b4:	080038f9 	.word	0x080038f9
 80039b8:	2000032c 	.word	0x2000032c

080039bc <_fwalk_sglue>:
 80039bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c0:	4607      	mov	r7, r0
 80039c2:	4688      	mov	r8, r1
 80039c4:	4614      	mov	r4, r2
 80039c6:	2600      	movs	r6, #0
 80039c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039cc:	f1b9 0901 	subs.w	r9, r9, #1
 80039d0:	d505      	bpl.n	80039de <_fwalk_sglue+0x22>
 80039d2:	6824      	ldr	r4, [r4, #0]
 80039d4:	2c00      	cmp	r4, #0
 80039d6:	d1f7      	bne.n	80039c8 <_fwalk_sglue+0xc>
 80039d8:	4630      	mov	r0, r6
 80039da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039de:	89ab      	ldrh	r3, [r5, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d907      	bls.n	80039f4 <_fwalk_sglue+0x38>
 80039e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039e8:	3301      	adds	r3, #1
 80039ea:	d003      	beq.n	80039f4 <_fwalk_sglue+0x38>
 80039ec:	4629      	mov	r1, r5
 80039ee:	4638      	mov	r0, r7
 80039f0:	47c0      	blx	r8
 80039f2:	4306      	orrs	r6, r0
 80039f4:	3568      	adds	r5, #104	; 0x68
 80039f6:	e7e9      	b.n	80039cc <_fwalk_sglue+0x10>

080039f8 <__sread>:
 80039f8:	b510      	push	{r4, lr}
 80039fa:	460c      	mov	r4, r1
 80039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a00:	f000 f868 	bl	8003ad4 <_read_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	bfab      	itete	ge
 8003a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a0c:	181b      	addge	r3, r3, r0
 8003a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a12:	bfac      	ite	ge
 8003a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a16:	81a3      	strhlt	r3, [r4, #12]
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <__swrite>:
 8003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	461f      	mov	r7, r3
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4616      	mov	r6, r2
 8003a2a:	d505      	bpl.n	8003a38 <__swrite+0x1e>
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	2302      	movs	r3, #2
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f83c 	bl	8003ab0 <_lseek_r>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	4632      	mov	r2, r6
 8003a46:	463b      	mov	r3, r7
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	f000 b853 	b.w	8003af8 <_write_r>

08003a52 <__sseek>:
 8003a52:	b510      	push	{r4, lr}
 8003a54:	460c      	mov	r4, r1
 8003a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5a:	f000 f829 	bl	8003ab0 <_lseek_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	bf15      	itete	ne
 8003a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a6e:	81a3      	strheq	r3, [r4, #12]
 8003a70:	bf18      	it	ne
 8003a72:	81a3      	strhne	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__sclose>:
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 b809 	b.w	8003a90 <_close_r>

08003a7e <memset>:
 8003a7e:	4402      	add	r2, r0
 8003a80:	4603      	mov	r3, r0
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d100      	bne.n	8003a88 <memset+0xa>
 8003a86:	4770      	bx	lr
 8003a88:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8c:	e7f9      	b.n	8003a82 <memset+0x4>
	...

08003a90 <_close_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4d06      	ldr	r5, [pc, #24]	; (8003aac <_close_r+0x1c>)
 8003a94:	2300      	movs	r3, #0
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fc fe11 	bl	80006c2 <_close>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_close_r+0x1a>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_close_r+0x1a>
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	20000330 	.word	0x20000330

08003ab0 <_lseek_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4d07      	ldr	r5, [pc, #28]	; (8003ad0 <_lseek_r+0x20>)
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4611      	mov	r1, r2
 8003aba:	2200      	movs	r2, #0
 8003abc:	602a      	str	r2, [r5, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7fc fe26 	bl	8000710 <_lseek>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_lseek_r+0x1e>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_lseek_r+0x1e>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20000330 	.word	0x20000330

08003ad4 <_read_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d07      	ldr	r5, [pc, #28]	; (8003af4 <_read_r+0x20>)
 8003ad8:	4604      	mov	r4, r0
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fc fdb4 	bl	8000650 <_read>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_read_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_read_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000330 	.word	0x20000330

08003af8 <_write_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d07      	ldr	r5, [pc, #28]	; (8003b18 <_write_r+0x20>)
 8003afc:	4604      	mov	r4, r0
 8003afe:	4608      	mov	r0, r1
 8003b00:	4611      	mov	r1, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	602a      	str	r2, [r5, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7fc fdbf 	bl	800068a <_write>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_write_r+0x1e>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_write_r+0x1e>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	20000330 	.word	0x20000330

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000064 	.word	0x20000064

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 fe42 	bl	80047c4 <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	080049fc 	.word	0x080049fc
 8003b64:	080049fc 	.word	0x080049fc
 8003b68:	080049fc 	.word	0x080049fc
 8003b6c:	08004a00 	.word	0x08004a00

08003b70 <__retarget_lock_init_recursive>:
 8003b70:	4770      	bx	lr

08003b72 <__retarget_lock_acquire_recursive>:
 8003b72:	4770      	bx	lr

08003b74 <__retarget_lock_release_recursive>:
 8003b74:	4770      	bx	lr
	...

08003b78 <__assert_func>:
 8003b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <__assert_func+0x2c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4605      	mov	r5, r0
 8003b84:	68d8      	ldr	r0, [r3, #12]
 8003b86:	b14c      	cbz	r4, 8003b9c <__assert_func+0x24>
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <__assert_func+0x30>)
 8003b8a:	9100      	str	r1, [sp, #0]
 8003b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b90:	4906      	ldr	r1, [pc, #24]	; (8003bac <__assert_func+0x34>)
 8003b92:	462b      	mov	r3, r5
 8003b94:	f000 f9bc 	bl	8003f10 <fiprintf>
 8003b98:	f000 f9dc 	bl	8003f54 <abort>
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <__assert_func+0x38>)
 8003b9e:	461c      	mov	r4, r3
 8003ba0:	e7f3      	b.n	8003b8a <__assert_func+0x12>
 8003ba2:	bf00      	nop
 8003ba4:	20000064 	.word	0x20000064
 8003ba8:	0800498b 	.word	0x0800498b
 8003bac:	08004998 	.word	0x08004998
 8003bb0:	080049c6 	.word	0x080049c6

08003bb4 <_free_r>:
 8003bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d044      	beq.n	8003c44 <_free_r+0x90>
 8003bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bbe:	9001      	str	r0, [sp, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8003bc6:	bfb8      	it	lt
 8003bc8:	18e4      	addlt	r4, r4, r3
 8003bca:	f000 f8e7 	bl	8003d9c <__malloc_lock>
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <_free_r+0x94>)
 8003bd0:	9801      	ldr	r0, [sp, #4]
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	b933      	cbnz	r3, 8003be4 <_free_r+0x30>
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6014      	str	r4, [r2, #0]
 8003bda:	b003      	add	sp, #12
 8003bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003be0:	f000 b8e2 	b.w	8003da8 <__malloc_unlock>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d908      	bls.n	8003bfa <_free_r+0x46>
 8003be8:	6825      	ldr	r5, [r4, #0]
 8003bea:	1961      	adds	r1, r4, r5
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf01      	itttt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	1949      	addeq	r1, r1, r5
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	e7ed      	b.n	8003bd6 <_free_r+0x22>
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b10b      	cbz	r3, 8003c04 <_free_r+0x50>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d9fa      	bls.n	8003bfa <_free_r+0x46>
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	1855      	adds	r5, r2, r1
 8003c08:	42a5      	cmp	r5, r4
 8003c0a:	d10b      	bne.n	8003c24 <_free_r+0x70>
 8003c0c:	6824      	ldr	r4, [r4, #0]
 8003c0e:	4421      	add	r1, r4
 8003c10:	1854      	adds	r4, r2, r1
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	d1e0      	bne.n	8003bda <_free_r+0x26>
 8003c18:	681c      	ldr	r4, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	440c      	add	r4, r1
 8003c20:	6014      	str	r4, [r2, #0]
 8003c22:	e7da      	b.n	8003bda <_free_r+0x26>
 8003c24:	d902      	bls.n	8003c2c <_free_r+0x78>
 8003c26:	230c      	movs	r3, #12
 8003c28:	6003      	str	r3, [r0, #0]
 8003c2a:	e7d6      	b.n	8003bda <_free_r+0x26>
 8003c2c:	6825      	ldr	r5, [r4, #0]
 8003c2e:	1961      	adds	r1, r4, r5
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf04      	itt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	6063      	str	r3, [r4, #4]
 8003c3a:	bf04      	itt	eq
 8003c3c:	1949      	addeq	r1, r1, r5
 8003c3e:	6021      	streq	r1, [r4, #0]
 8003c40:	6054      	str	r4, [r2, #4]
 8003c42:	e7ca      	b.n	8003bda <_free_r+0x26>
 8003c44:	b003      	add	sp, #12
 8003c46:	bd30      	pop	{r4, r5, pc}
 8003c48:	20000338 	.word	0x20000338

08003c4c <malloc>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <malloc+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f000 b823 	b.w	8003c9c <_malloc_r>
 8003c56:	bf00      	nop
 8003c58:	20000064 	.word	0x20000064

08003c5c <sbrk_aligned>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4e0e      	ldr	r6, [pc, #56]	; (8003c98 <sbrk_aligned+0x3c>)
 8003c60:	460c      	mov	r4, r1
 8003c62:	6831      	ldr	r1, [r6, #0]
 8003c64:	4605      	mov	r5, r0
 8003c66:	b911      	cbnz	r1, 8003c6e <sbrk_aligned+0x12>
 8003c68:	f000 f964 	bl	8003f34 <_sbrk_r>
 8003c6c:	6030      	str	r0, [r6, #0]
 8003c6e:	4621      	mov	r1, r4
 8003c70:	4628      	mov	r0, r5
 8003c72:	f000 f95f 	bl	8003f34 <_sbrk_r>
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d00a      	beq.n	8003c90 <sbrk_aligned+0x34>
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d007      	beq.n	8003c94 <sbrk_aligned+0x38>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f954 	bl	8003f34 <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d101      	bne.n	8003c94 <sbrk_aligned+0x38>
 8003c90:	f04f 34ff 	mov.w	r4, #4294967295
 8003c94:	4620      	mov	r0, r4
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	2000033c 	.word	0x2000033c

08003c9c <_malloc_r>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	1ccd      	adds	r5, r1, #3
 8003ca2:	f025 0503 	bic.w	r5, r5, #3
 8003ca6:	3508      	adds	r5, #8
 8003ca8:	2d0c      	cmp	r5, #12
 8003caa:	bf38      	it	cc
 8003cac:	250c      	movcc	r5, #12
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	db01      	blt.n	8003cb8 <_malloc_r+0x1c>
 8003cb4:	42a9      	cmp	r1, r5
 8003cb6:	d905      	bls.n	8003cc4 <_malloc_r+0x28>
 8003cb8:	230c      	movs	r3, #12
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	2600      	movs	r6, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d98 <_malloc_r+0xfc>
 8003cc8:	f000 f868 	bl	8003d9c <__malloc_lock>
 8003ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd0:	461c      	mov	r4, r3
 8003cd2:	bb5c      	cbnz	r4, 8003d2c <_malloc_r+0x90>
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f7ff ffc0 	bl	8003c5c <sbrk_aligned>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	4604      	mov	r4, r0
 8003ce0:	d155      	bne.n	8003d8e <_malloc_r+0xf2>
 8003ce2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ce6:	4626      	mov	r6, r4
 8003ce8:	2e00      	cmp	r6, #0
 8003cea:	d145      	bne.n	8003d78 <_malloc_r+0xdc>
 8003cec:	2c00      	cmp	r4, #0
 8003cee:	d048      	beq.n	8003d82 <_malloc_r+0xe6>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	eb04 0903 	add.w	r9, r4, r3
 8003cfa:	f000 f91b 	bl	8003f34 <_sbrk_r>
 8003cfe:	4581      	cmp	r9, r0
 8003d00:	d13f      	bne.n	8003d82 <_malloc_r+0xe6>
 8003d02:	6821      	ldr	r1, [r4, #0]
 8003d04:	1a6d      	subs	r5, r5, r1
 8003d06:	4629      	mov	r1, r5
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f7ff ffa7 	bl	8003c5c <sbrk_aligned>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d037      	beq.n	8003d82 <_malloc_r+0xe6>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	442b      	add	r3, r5
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d038      	beq.n	8003d92 <_malloc_r+0xf6>
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	42a2      	cmp	r2, r4
 8003d24:	d12b      	bne.n	8003d7e <_malloc_r+0xe2>
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	e00f      	b.n	8003d4c <_malloc_r+0xb0>
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	1b52      	subs	r2, r2, r5
 8003d30:	d41f      	bmi.n	8003d72 <_malloc_r+0xd6>
 8003d32:	2a0b      	cmp	r2, #11
 8003d34:	d917      	bls.n	8003d66 <_malloc_r+0xca>
 8003d36:	1961      	adds	r1, r4, r5
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	6025      	str	r5, [r4, #0]
 8003d3c:	bf18      	it	ne
 8003d3e:	6059      	strne	r1, [r3, #4]
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	bf08      	it	eq
 8003d44:	f8c8 1000 	streq.w	r1, [r8]
 8003d48:	5162      	str	r2, [r4, r5]
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f104 060b 	add.w	r6, r4, #11
 8003d52:	f000 f829 	bl	8003da8 <__malloc_unlock>
 8003d56:	f026 0607 	bic.w	r6, r6, #7
 8003d5a:	1d23      	adds	r3, r4, #4
 8003d5c:	1af2      	subs	r2, r6, r3
 8003d5e:	d0ae      	beq.n	8003cbe <_malloc_r+0x22>
 8003d60:	1b9b      	subs	r3, r3, r6
 8003d62:	50a3      	str	r3, [r4, r2]
 8003d64:	e7ab      	b.n	8003cbe <_malloc_r+0x22>
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	6862      	ldr	r2, [r4, #4]
 8003d6a:	d1dd      	bne.n	8003d28 <_malloc_r+0x8c>
 8003d6c:	f8c8 2000 	str.w	r2, [r8]
 8003d70:	e7ec      	b.n	8003d4c <_malloc_r+0xb0>
 8003d72:	4623      	mov	r3, r4
 8003d74:	6864      	ldr	r4, [r4, #4]
 8003d76:	e7ac      	b.n	8003cd2 <_malloc_r+0x36>
 8003d78:	4634      	mov	r4, r6
 8003d7a:	6876      	ldr	r6, [r6, #4]
 8003d7c:	e7b4      	b.n	8003ce8 <_malloc_r+0x4c>
 8003d7e:	4613      	mov	r3, r2
 8003d80:	e7cc      	b.n	8003d1c <_malloc_r+0x80>
 8003d82:	230c      	movs	r3, #12
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4638      	mov	r0, r7
 8003d88:	f000 f80e 	bl	8003da8 <__malloc_unlock>
 8003d8c:	e797      	b.n	8003cbe <_malloc_r+0x22>
 8003d8e:	6025      	str	r5, [r4, #0]
 8003d90:	e7dc      	b.n	8003d4c <_malloc_r+0xb0>
 8003d92:	605b      	str	r3, [r3, #4]
 8003d94:	deff      	udf	#255	; 0xff
 8003d96:	bf00      	nop
 8003d98:	20000338 	.word	0x20000338

08003d9c <__malloc_lock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_lock+0x8>)
 8003d9e:	f7ff bee8 	b.w	8003b72 <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000334 	.word	0x20000334

08003da8 <__malloc_unlock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__malloc_unlock+0x8>)
 8003daa:	f7ff bee3 	b.w	8003b74 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	20000334 	.word	0x20000334

08003db4 <__sflush_r>:
 8003db4:	898a      	ldrh	r2, [r1, #12]
 8003db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	4605      	mov	r5, r0
 8003dbc:	0710      	lsls	r0, r2, #28
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	d458      	bmi.n	8003e74 <__sflush_r+0xc0>
 8003dc2:	684b      	ldr	r3, [r1, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dc05      	bgt.n	8003dd4 <__sflush_r+0x20>
 8003dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	dc02      	bgt.n	8003dd4 <__sflush_r+0x20>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d0f9      	beq.n	8003dce <__sflush_r+0x1a>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003de0:	682f      	ldr	r7, [r5, #0]
 8003de2:	6a21      	ldr	r1, [r4, #32]
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	d032      	beq.n	8003e4e <__sflush_r+0x9a>
 8003de8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	075a      	lsls	r2, r3, #29
 8003dee:	d505      	bpl.n	8003dfc <__sflush_r+0x48>
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	1ac0      	subs	r0, r0, r3
 8003df4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003df6:	b10b      	cbz	r3, 8003dfc <__sflush_r+0x48>
 8003df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dfa:	1ac0      	subs	r0, r0, r3
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e02:	6a21      	ldr	r1, [r4, #32]
 8003e04:	4628      	mov	r0, r5
 8003e06:	47b0      	blx	r6
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	d106      	bne.n	8003e1c <__sflush_r+0x68>
 8003e0e:	6829      	ldr	r1, [r5, #0]
 8003e10:	291d      	cmp	r1, #29
 8003e12:	d82b      	bhi.n	8003e6c <__sflush_r+0xb8>
 8003e14:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <__sflush_r+0x108>)
 8003e16:	410a      	asrs	r2, r1
 8003e18:	07d6      	lsls	r6, r2, #31
 8003e1a:	d427      	bmi.n	8003e6c <__sflush_r+0xb8>
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	6062      	str	r2, [r4, #4]
 8003e20:	04d9      	lsls	r1, r3, #19
 8003e22:	6922      	ldr	r2, [r4, #16]
 8003e24:	6022      	str	r2, [r4, #0]
 8003e26:	d504      	bpl.n	8003e32 <__sflush_r+0x7e>
 8003e28:	1c42      	adds	r2, r0, #1
 8003e2a:	d101      	bne.n	8003e30 <__sflush_r+0x7c>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b903      	cbnz	r3, 8003e32 <__sflush_r+0x7e>
 8003e30:	6560      	str	r0, [r4, #84]	; 0x54
 8003e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e34:	602f      	str	r7, [r5, #0]
 8003e36:	2900      	cmp	r1, #0
 8003e38:	d0c9      	beq.n	8003dce <__sflush_r+0x1a>
 8003e3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	d002      	beq.n	8003e48 <__sflush_r+0x94>
 8003e42:	4628      	mov	r0, r5
 8003e44:	f7ff feb6 	bl	8003bb4 <_free_r>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	6360      	str	r0, [r4, #52]	; 0x34
 8003e4c:	e7c0      	b.n	8003dd0 <__sflush_r+0x1c>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4628      	mov	r0, r5
 8003e52:	47b0      	blx	r6
 8003e54:	1c41      	adds	r1, r0, #1
 8003e56:	d1c8      	bne.n	8003dea <__sflush_r+0x36>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0c5      	beq.n	8003dea <__sflush_r+0x36>
 8003e5e:	2b1d      	cmp	r3, #29
 8003e60:	d001      	beq.n	8003e66 <__sflush_r+0xb2>
 8003e62:	2b16      	cmp	r3, #22
 8003e64:	d101      	bne.n	8003e6a <__sflush_r+0xb6>
 8003e66:	602f      	str	r7, [r5, #0]
 8003e68:	e7b1      	b.n	8003dce <__sflush_r+0x1a>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	e7ad      	b.n	8003dd0 <__sflush_r+0x1c>
 8003e74:	690f      	ldr	r7, [r1, #16]
 8003e76:	2f00      	cmp	r7, #0
 8003e78:	d0a9      	beq.n	8003dce <__sflush_r+0x1a>
 8003e7a:	0793      	lsls	r3, r2, #30
 8003e7c:	680e      	ldr	r6, [r1, #0]
 8003e7e:	bf08      	it	eq
 8003e80:	694b      	ldreq	r3, [r1, #20]
 8003e82:	600f      	str	r7, [r1, #0]
 8003e84:	bf18      	it	ne
 8003e86:	2300      	movne	r3, #0
 8003e88:	eba6 0807 	sub.w	r8, r6, r7
 8003e8c:	608b      	str	r3, [r1, #8]
 8003e8e:	f1b8 0f00 	cmp.w	r8, #0
 8003e92:	dd9c      	ble.n	8003dce <__sflush_r+0x1a>
 8003e94:	6a21      	ldr	r1, [r4, #32]
 8003e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e98:	4643      	mov	r3, r8
 8003e9a:	463a      	mov	r2, r7
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b0      	blx	r6
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	dc06      	bgt.n	8003eb2 <__sflush_r+0xfe>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e78e      	b.n	8003dd0 <__sflush_r+0x1c>
 8003eb2:	4407      	add	r7, r0
 8003eb4:	eba8 0800 	sub.w	r8, r8, r0
 8003eb8:	e7e9      	b.n	8003e8e <__sflush_r+0xda>
 8003eba:	bf00      	nop
 8003ebc:	dfbffffe 	.word	0xdfbffffe

08003ec0 <_fflush_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	690b      	ldr	r3, [r1, #16]
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	b913      	cbnz	r3, 8003ed0 <_fflush_r+0x10>
 8003eca:	2500      	movs	r5, #0
 8003ecc:	4628      	mov	r0, r5
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	b118      	cbz	r0, 8003eda <_fflush_r+0x1a>
 8003ed2:	6a03      	ldr	r3, [r0, #32]
 8003ed4:	b90b      	cbnz	r3, 8003eda <_fflush_r+0x1a>
 8003ed6:	f7ff fd59 	bl	800398c <__sinit>
 8003eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f3      	beq.n	8003eca <_fflush_r+0xa>
 8003ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ee4:	07d0      	lsls	r0, r2, #31
 8003ee6:	d404      	bmi.n	8003ef2 <_fflush_r+0x32>
 8003ee8:	0599      	lsls	r1, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_fflush_r+0x32>
 8003eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eee:	f7ff fe40 	bl	8003b72 <__retarget_lock_acquire_recursive>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f7ff ff5d 	bl	8003db4 <__sflush_r>
 8003efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003efc:	07da      	lsls	r2, r3, #31
 8003efe:	4605      	mov	r5, r0
 8003f00:	d4e4      	bmi.n	8003ecc <_fflush_r+0xc>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	059b      	lsls	r3, r3, #22
 8003f06:	d4e1      	bmi.n	8003ecc <_fflush_r+0xc>
 8003f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0a:	f7ff fe33 	bl	8003b74 <__retarget_lock_release_recursive>
 8003f0e:	e7dd      	b.n	8003ecc <_fflush_r+0xc>

08003f10 <fiprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	b503      	push	{r0, r1, lr}
 8003f14:	4601      	mov	r1, r0
 8003f16:	ab03      	add	r3, sp, #12
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <fiprintf+0x20>)
 8003f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f1e:	6800      	ldr	r0, [r0, #0]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	f000 f847 	bl	8003fb4 <_vfiprintf_r>
 8003f26:	b002      	add	sp, #8
 8003f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f2c:	b003      	add	sp, #12
 8003f2e:	4770      	bx	lr
 8003f30:	20000064 	.word	0x20000064

08003f34 <_sbrk_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d06      	ldr	r5, [pc, #24]	; (8003f50 <_sbrk_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f7fc fbf4 	bl	800072c <_sbrk>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_sbrk_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_sbrk_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000330 	.word	0x20000330

08003f54 <abort>:
 8003f54:	b508      	push	{r3, lr}
 8003f56:	2006      	movs	r0, #6
 8003f58:	f000 fb94 	bl	8004684 <raise>
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7fc fb6d 	bl	800063c <_exit>

08003f62 <__sfputc_r>:
 8003f62:	6893      	ldr	r3, [r2, #8]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	b410      	push	{r4}
 8003f6a:	6093      	str	r3, [r2, #8]
 8003f6c:	da08      	bge.n	8003f80 <__sfputc_r+0x1e>
 8003f6e:	6994      	ldr	r4, [r2, #24]
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	db01      	blt.n	8003f78 <__sfputc_r+0x16>
 8003f74:	290a      	cmp	r1, #10
 8003f76:	d103      	bne.n	8003f80 <__sfputc_r+0x1e>
 8003f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f7c:	f000 bac4 	b.w	8004508 <__swbuf_r>
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	1c58      	adds	r0, r3, #1
 8003f84:	6010      	str	r0, [r2, #0]
 8003f86:	7019      	strb	r1, [r3, #0]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <__sfputs_r>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	4606      	mov	r6, r0
 8003f94:	460f      	mov	r7, r1
 8003f96:	4614      	mov	r4, r2
 8003f98:	18d5      	adds	r5, r2, r3
 8003f9a:	42ac      	cmp	r4, r5
 8003f9c:	d101      	bne.n	8003fa2 <__sfputs_r+0x12>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e007      	b.n	8003fb2 <__sfputs_r+0x22>
 8003fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa6:	463a      	mov	r2, r7
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f7ff ffda 	bl	8003f62 <__sfputc_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d1f3      	bne.n	8003f9a <__sfputs_r+0xa>
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fb4 <_vfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	460d      	mov	r5, r1
 8003fba:	b09d      	sub	sp, #116	; 0x74
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	4698      	mov	r8, r3
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	b118      	cbz	r0, 8003fcc <_vfiprintf_r+0x18>
 8003fc4:	6a03      	ldr	r3, [r0, #32]
 8003fc6:	b90b      	cbnz	r3, 8003fcc <_vfiprintf_r+0x18>
 8003fc8:	f7ff fce0 	bl	800398c <__sinit>
 8003fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fce:	07d9      	lsls	r1, r3, #31
 8003fd0:	d405      	bmi.n	8003fde <_vfiprintf_r+0x2a>
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	059a      	lsls	r2, r3, #22
 8003fd6:	d402      	bmi.n	8003fde <_vfiprintf_r+0x2a>
 8003fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fda:	f7ff fdca 	bl	8003b72 <__retarget_lock_acquire_recursive>
 8003fde:	89ab      	ldrh	r3, [r5, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	d501      	bpl.n	8003fe8 <_vfiprintf_r+0x34>
 8003fe4:	692b      	ldr	r3, [r5, #16]
 8003fe6:	b99b      	cbnz	r3, 8004010 <_vfiprintf_r+0x5c>
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 faca 	bl	8004584 <__swsetup_r>
 8003ff0:	b170      	cbz	r0, 8004010 <_vfiprintf_r+0x5c>
 8003ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff4:	07dc      	lsls	r4, r3, #31
 8003ff6:	d504      	bpl.n	8004002 <_vfiprintf_r+0x4e>
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	b01d      	add	sp, #116	; 0x74
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004002:	89ab      	ldrh	r3, [r5, #12]
 8004004:	0598      	lsls	r0, r3, #22
 8004006:	d4f7      	bmi.n	8003ff8 <_vfiprintf_r+0x44>
 8004008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800400a:	f7ff fdb3 	bl	8003b74 <__retarget_lock_release_recursive>
 800400e:	e7f3      	b.n	8003ff8 <_vfiprintf_r+0x44>
 8004010:	2300      	movs	r3, #0
 8004012:	9309      	str	r3, [sp, #36]	; 0x24
 8004014:	2320      	movs	r3, #32
 8004016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800401a:	f8cd 800c 	str.w	r8, [sp, #12]
 800401e:	2330      	movs	r3, #48	; 0x30
 8004020:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80041d4 <_vfiprintf_r+0x220>
 8004024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004028:	f04f 0901 	mov.w	r9, #1
 800402c:	4623      	mov	r3, r4
 800402e:	469a      	mov	sl, r3
 8004030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004034:	b10a      	cbz	r2, 800403a <_vfiprintf_r+0x86>
 8004036:	2a25      	cmp	r2, #37	; 0x25
 8004038:	d1f9      	bne.n	800402e <_vfiprintf_r+0x7a>
 800403a:	ebba 0b04 	subs.w	fp, sl, r4
 800403e:	d00b      	beq.n	8004058 <_vfiprintf_r+0xa4>
 8004040:	465b      	mov	r3, fp
 8004042:	4622      	mov	r2, r4
 8004044:	4629      	mov	r1, r5
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff ffa2 	bl	8003f90 <__sfputs_r>
 800404c:	3001      	adds	r0, #1
 800404e:	f000 80a9 	beq.w	80041a4 <_vfiprintf_r+0x1f0>
 8004052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004054:	445a      	add	r2, fp
 8004056:	9209      	str	r2, [sp, #36]	; 0x24
 8004058:	f89a 3000 	ldrb.w	r3, [sl]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a1 	beq.w	80041a4 <_vfiprintf_r+0x1f0>
 8004062:	2300      	movs	r3, #0
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800406c:	f10a 0a01 	add.w	sl, sl, #1
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	9307      	str	r3, [sp, #28]
 8004074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004078:	931a      	str	r3, [sp, #104]	; 0x68
 800407a:	4654      	mov	r4, sl
 800407c:	2205      	movs	r2, #5
 800407e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004082:	4854      	ldr	r0, [pc, #336]	; (80041d4 <_vfiprintf_r+0x220>)
 8004084:	f7fc f8a4 	bl	80001d0 <memchr>
 8004088:	9a04      	ldr	r2, [sp, #16]
 800408a:	b9d8      	cbnz	r0, 80040c4 <_vfiprintf_r+0x110>
 800408c:	06d1      	lsls	r1, r2, #27
 800408e:	bf44      	itt	mi
 8004090:	2320      	movmi	r3, #32
 8004092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004096:	0713      	lsls	r3, r2, #28
 8004098:	bf44      	itt	mi
 800409a:	232b      	movmi	r3, #43	; 0x2b
 800409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a0:	f89a 3000 	ldrb.w	r3, [sl]
 80040a4:	2b2a      	cmp	r3, #42	; 0x2a
 80040a6:	d015      	beq.n	80040d4 <_vfiprintf_r+0x120>
 80040a8:	9a07      	ldr	r2, [sp, #28]
 80040aa:	4654      	mov	r4, sl
 80040ac:	2000      	movs	r0, #0
 80040ae:	f04f 0c0a 	mov.w	ip, #10
 80040b2:	4621      	mov	r1, r4
 80040b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b8:	3b30      	subs	r3, #48	; 0x30
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d94d      	bls.n	800415a <_vfiprintf_r+0x1a6>
 80040be:	b1b0      	cbz	r0, 80040ee <_vfiprintf_r+0x13a>
 80040c0:	9207      	str	r2, [sp, #28]
 80040c2:	e014      	b.n	80040ee <_vfiprintf_r+0x13a>
 80040c4:	eba0 0308 	sub.w	r3, r0, r8
 80040c8:	fa09 f303 	lsl.w	r3, r9, r3
 80040cc:	4313      	orrs	r3, r2
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	46a2      	mov	sl, r4
 80040d2:	e7d2      	b.n	800407a <_vfiprintf_r+0xc6>
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	1d19      	adds	r1, r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	9103      	str	r1, [sp, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bfbb      	ittet	lt
 80040e0:	425b      	neglt	r3, r3
 80040e2:	f042 0202 	orrlt.w	r2, r2, #2
 80040e6:	9307      	strge	r3, [sp, #28]
 80040e8:	9307      	strlt	r3, [sp, #28]
 80040ea:	bfb8      	it	lt
 80040ec:	9204      	strlt	r2, [sp, #16]
 80040ee:	7823      	ldrb	r3, [r4, #0]
 80040f0:	2b2e      	cmp	r3, #46	; 0x2e
 80040f2:	d10c      	bne.n	800410e <_vfiprintf_r+0x15a>
 80040f4:	7863      	ldrb	r3, [r4, #1]
 80040f6:	2b2a      	cmp	r3, #42	; 0x2a
 80040f8:	d134      	bne.n	8004164 <_vfiprintf_r+0x1b0>
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	1d1a      	adds	r2, r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	9203      	str	r2, [sp, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfb8      	it	lt
 8004106:	f04f 33ff 	movlt.w	r3, #4294967295
 800410a:	3402      	adds	r4, #2
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041e4 <_vfiprintf_r+0x230>
 8004112:	7821      	ldrb	r1, [r4, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	4650      	mov	r0, sl
 8004118:	f7fc f85a 	bl	80001d0 <memchr>
 800411c:	b138      	cbz	r0, 800412e <_vfiprintf_r+0x17a>
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	eba0 000a 	sub.w	r0, r0, sl
 8004124:	2240      	movs	r2, #64	; 0x40
 8004126:	4082      	lsls	r2, r0
 8004128:	4313      	orrs	r3, r2
 800412a:	3401      	adds	r4, #1
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004132:	4829      	ldr	r0, [pc, #164]	; (80041d8 <_vfiprintf_r+0x224>)
 8004134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004138:	2206      	movs	r2, #6
 800413a:	f7fc f849 	bl	80001d0 <memchr>
 800413e:	2800      	cmp	r0, #0
 8004140:	d03f      	beq.n	80041c2 <_vfiprintf_r+0x20e>
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <_vfiprintf_r+0x228>)
 8004144:	bb1b      	cbnz	r3, 800418e <_vfiprintf_r+0x1da>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	3307      	adds	r3, #7
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	3308      	adds	r3, #8
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004154:	443b      	add	r3, r7
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	e768      	b.n	800402c <_vfiprintf_r+0x78>
 800415a:	fb0c 3202 	mla	r2, ip, r2, r3
 800415e:	460c      	mov	r4, r1
 8004160:	2001      	movs	r0, #1
 8004162:	e7a6      	b.n	80040b2 <_vfiprintf_r+0xfe>
 8004164:	2300      	movs	r3, #0
 8004166:	3401      	adds	r4, #1
 8004168:	9305      	str	r3, [sp, #20]
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4620      	mov	r0, r4
 8004172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004176:	3a30      	subs	r2, #48	; 0x30
 8004178:	2a09      	cmp	r2, #9
 800417a:	d903      	bls.n	8004184 <_vfiprintf_r+0x1d0>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0c6      	beq.n	800410e <_vfiprintf_r+0x15a>
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	e7c4      	b.n	800410e <_vfiprintf_r+0x15a>
 8004184:	fb0c 2101 	mla	r1, ip, r1, r2
 8004188:	4604      	mov	r4, r0
 800418a:	2301      	movs	r3, #1
 800418c:	e7f0      	b.n	8004170 <_vfiprintf_r+0x1bc>
 800418e:	ab03      	add	r3, sp, #12
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	462a      	mov	r2, r5
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <_vfiprintf_r+0x22c>)
 8004196:	a904      	add	r1, sp, #16
 8004198:	4630      	mov	r0, r6
 800419a:	f3af 8000 	nop.w
 800419e:	4607      	mov	r7, r0
 80041a0:	1c78      	adds	r0, r7, #1
 80041a2:	d1d6      	bne.n	8004152 <_vfiprintf_r+0x19e>
 80041a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a6:	07d9      	lsls	r1, r3, #31
 80041a8:	d405      	bmi.n	80041b6 <_vfiprintf_r+0x202>
 80041aa:	89ab      	ldrh	r3, [r5, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d402      	bmi.n	80041b6 <_vfiprintf_r+0x202>
 80041b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b2:	f7ff fcdf 	bl	8003b74 <__retarget_lock_release_recursive>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	065b      	lsls	r3, r3, #25
 80041ba:	f53f af1d 	bmi.w	8003ff8 <_vfiprintf_r+0x44>
 80041be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c0:	e71c      	b.n	8003ffc <_vfiprintf_r+0x48>
 80041c2:	ab03      	add	r3, sp, #12
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	462a      	mov	r2, r5
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <_vfiprintf_r+0x22c>)
 80041ca:	a904      	add	r1, sp, #16
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f879 	bl	80042c4 <_printf_i>
 80041d2:	e7e4      	b.n	800419e <_vfiprintf_r+0x1ea>
 80041d4:	080049c7 	.word	0x080049c7
 80041d8:	080049d1 	.word	0x080049d1
 80041dc:	00000000 	.word	0x00000000
 80041e0:	08003f91 	.word	0x08003f91
 80041e4:	080049cd 	.word	0x080049cd

080041e8 <_printf_common>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	4616      	mov	r6, r2
 80041ee:	4699      	mov	r9, r3
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bfb8      	it	lt
 80041fc:	4613      	movlt	r3, r2
 80041fe:	6033      	str	r3, [r6, #0]
 8004200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004204:	4607      	mov	r7, r0
 8004206:	460c      	mov	r4, r1
 8004208:	b10a      	cbz	r2, 800420e <_printf_common+0x26>
 800420a:	3301      	adds	r3, #1
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	6833      	ldrmi	r3, [r6, #0]
 8004216:	3302      	addmi	r3, #2
 8004218:	6033      	strmi	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	f015 0506 	ands.w	r5, r5, #6
 8004220:	d106      	bne.n	8004230 <_printf_common+0x48>
 8004222:	f104 0a19 	add.w	sl, r4, #25
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	42ab      	cmp	r3, r5
 800422e:	dc26      	bgt.n	800427e <_printf_common+0x96>
 8004230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004234:	1e13      	subs	r3, r2, #0
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	2301      	movne	r3, #1
 800423c:	0692      	lsls	r2, r2, #26
 800423e:	d42b      	bmi.n	8004298 <_printf_common+0xb0>
 8004240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d01e      	beq.n	800428c <_printf_common+0xa4>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf02      	ittt	eq
 800425a:	68e5      	ldreq	r5, [r4, #12]
 800425c:	6833      	ldreq	r3, [r6, #0]
 800425e:	1aed      	subeq	r5, r5, r3
 8004260:	68a3      	ldr	r3, [r4, #8]
 8004262:	bf0c      	ite	eq
 8004264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004268:	2500      	movne	r5, #0
 800426a:	4293      	cmp	r3, r2
 800426c:	bfc4      	itt	gt
 800426e:	1a9b      	subgt	r3, r3, r2
 8004270:	18ed      	addgt	r5, r5, r3
 8004272:	2600      	movs	r6, #0
 8004274:	341a      	adds	r4, #26
 8004276:	42b5      	cmp	r5, r6
 8004278:	d11a      	bne.n	80042b0 <_printf_common+0xc8>
 800427a:	2000      	movs	r0, #0
 800427c:	e008      	b.n	8004290 <_printf_common+0xa8>
 800427e:	2301      	movs	r3, #1
 8004280:	4652      	mov	r2, sl
 8004282:	4649      	mov	r1, r9
 8004284:	4638      	mov	r0, r7
 8004286:	47c0      	blx	r8
 8004288:	3001      	adds	r0, #1
 800428a:	d103      	bne.n	8004294 <_printf_common+0xac>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	3501      	adds	r5, #1
 8004296:	e7c6      	b.n	8004226 <_printf_common+0x3e>
 8004298:	18e1      	adds	r1, r4, r3
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	2030      	movs	r0, #48	; 0x30
 800429e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a2:	4422      	add	r2, r4
 80042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ac:	3302      	adds	r3, #2
 80042ae:	e7c7      	b.n	8004240 <_printf_common+0x58>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4622      	mov	r2, r4
 80042b4:	4649      	mov	r1, r9
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	3001      	adds	r0, #1
 80042bc:	d0e6      	beq.n	800428c <_printf_common+0xa4>
 80042be:	3601      	adds	r6, #1
 80042c0:	e7d9      	b.n	8004276 <_printf_common+0x8e>
	...

080042c4 <_printf_i>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	7e0f      	ldrb	r7, [r1, #24]
 80042ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042cc:	2f78      	cmp	r7, #120	; 0x78
 80042ce:	4691      	mov	r9, r2
 80042d0:	4680      	mov	r8, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	469a      	mov	sl, r3
 80042d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042da:	d807      	bhi.n	80042ec <_printf_i+0x28>
 80042dc:	2f62      	cmp	r7, #98	; 0x62
 80042de:	d80a      	bhi.n	80042f6 <_printf_i+0x32>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80d4 	beq.w	800448e <_printf_i+0x1ca>
 80042e6:	2f58      	cmp	r7, #88	; 0x58
 80042e8:	f000 80c0 	beq.w	800446c <_printf_i+0x1a8>
 80042ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f4:	e03a      	b.n	800436c <_printf_i+0xa8>
 80042f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fa:	2b15      	cmp	r3, #21
 80042fc:	d8f6      	bhi.n	80042ec <_printf_i+0x28>
 80042fe:	a101      	add	r1, pc, #4	; (adr r1, 8004304 <_printf_i+0x40>)
 8004300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004371 	.word	0x08004371
 800430c:	080042ed 	.word	0x080042ed
 8004310:	080042ed 	.word	0x080042ed
 8004314:	080042ed 	.word	0x080042ed
 8004318:	080042ed 	.word	0x080042ed
 800431c:	08004371 	.word	0x08004371
 8004320:	080042ed 	.word	0x080042ed
 8004324:	080042ed 	.word	0x080042ed
 8004328:	080042ed 	.word	0x080042ed
 800432c:	080042ed 	.word	0x080042ed
 8004330:	08004475 	.word	0x08004475
 8004334:	0800439d 	.word	0x0800439d
 8004338:	0800442f 	.word	0x0800442f
 800433c:	080042ed 	.word	0x080042ed
 8004340:	080042ed 	.word	0x080042ed
 8004344:	08004497 	.word	0x08004497
 8004348:	080042ed 	.word	0x080042ed
 800434c:	0800439d 	.word	0x0800439d
 8004350:	080042ed 	.word	0x080042ed
 8004354:	080042ed 	.word	0x080042ed
 8004358:	08004437 	.word	0x08004437
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	602a      	str	r2, [r5, #0]
 8004364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436c:	2301      	movs	r3, #1
 800436e:	e09f      	b.n	80044b0 <_printf_i+0x1ec>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	0607      	lsls	r7, r0, #24
 8004376:	f103 0104 	add.w	r1, r3, #4
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	d501      	bpl.n	8004382 <_printf_i+0xbe>
 800437e:	681e      	ldr	r6, [r3, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0xc6>
 8004382:	0646      	lsls	r6, r0, #25
 8004384:	d5fb      	bpl.n	800437e <_printf_i+0xba>
 8004386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800438a:	2e00      	cmp	r6, #0
 800438c:	da03      	bge.n	8004396 <_printf_i+0xd2>
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	4276      	negs	r6, r6
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004396:	485a      	ldr	r0, [pc, #360]	; (8004500 <_printf_i+0x23c>)
 8004398:	230a      	movs	r3, #10
 800439a:	e012      	b.n	80043c2 <_printf_i+0xfe>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	6029      	str	r1, [r5, #0]
 80043a4:	0605      	lsls	r5, r0, #24
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0xe8>
 80043a8:	681e      	ldr	r6, [r3, #0]
 80043aa:	e002      	b.n	80043b2 <_printf_i+0xee>
 80043ac:	0641      	lsls	r1, r0, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0xe4>
 80043b0:	881e      	ldrh	r6, [r3, #0]
 80043b2:	4853      	ldr	r0, [pc, #332]	; (8004500 <_printf_i+0x23c>)
 80043b4:	2f6f      	cmp	r7, #111	; 0x6f
 80043b6:	bf0c      	ite	eq
 80043b8:	2308      	moveq	r3, #8
 80043ba:	230a      	movne	r3, #10
 80043bc:	2100      	movs	r1, #0
 80043be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c2:	6865      	ldr	r5, [r4, #4]
 80043c4:	60a5      	str	r5, [r4, #8]
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	bfa2      	ittt	ge
 80043ca:	6821      	ldrge	r1, [r4, #0]
 80043cc:	f021 0104 	bicge.w	r1, r1, #4
 80043d0:	6021      	strge	r1, [r4, #0]
 80043d2:	b90e      	cbnz	r6, 80043d8 <_printf_i+0x114>
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	d04b      	beq.n	8004470 <_printf_i+0x1ac>
 80043d8:	4615      	mov	r5, r2
 80043da:	fbb6 f1f3 	udiv	r1, r6, r3
 80043de:	fb03 6711 	mls	r7, r3, r1, r6
 80043e2:	5dc7      	ldrb	r7, [r0, r7]
 80043e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043e8:	4637      	mov	r7, r6
 80043ea:	42bb      	cmp	r3, r7
 80043ec:	460e      	mov	r6, r1
 80043ee:	d9f4      	bls.n	80043da <_printf_i+0x116>
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d10b      	bne.n	800440c <_printf_i+0x148>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07de      	lsls	r6, r3, #31
 80043f8:	d508      	bpl.n	800440c <_printf_i+0x148>
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	6861      	ldr	r1, [r4, #4]
 80043fe:	4299      	cmp	r1, r3
 8004400:	bfde      	ittt	le
 8004402:	2330      	movle	r3, #48	; 0x30
 8004404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004408:	f105 35ff 	addle.w	r5, r5, #4294967295
 800440c:	1b52      	subs	r2, r2, r5
 800440e:	6122      	str	r2, [r4, #16]
 8004410:	f8cd a000 	str.w	sl, [sp]
 8004414:	464b      	mov	r3, r9
 8004416:	aa03      	add	r2, sp, #12
 8004418:	4621      	mov	r1, r4
 800441a:	4640      	mov	r0, r8
 800441c:	f7ff fee4 	bl	80041e8 <_printf_common>
 8004420:	3001      	adds	r0, #1
 8004422:	d14a      	bne.n	80044ba <_printf_i+0x1f6>
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b004      	add	sp, #16
 800442a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f043 0320 	orr.w	r3, r3, #32
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	4833      	ldr	r0, [pc, #204]	; (8004504 <_printf_i+0x240>)
 8004438:	2778      	movs	r7, #120	; 0x78
 800443a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	6829      	ldr	r1, [r5, #0]
 8004442:	061f      	lsls	r7, r3, #24
 8004444:	f851 6b04 	ldr.w	r6, [r1], #4
 8004448:	d402      	bmi.n	8004450 <_printf_i+0x18c>
 800444a:	065f      	lsls	r7, r3, #25
 800444c:	bf48      	it	mi
 800444e:	b2b6      	uxthmi	r6, r6
 8004450:	07df      	lsls	r7, r3, #31
 8004452:	bf48      	it	mi
 8004454:	f043 0320 	orrmi.w	r3, r3, #32
 8004458:	6029      	str	r1, [r5, #0]
 800445a:	bf48      	it	mi
 800445c:	6023      	strmi	r3, [r4, #0]
 800445e:	b91e      	cbnz	r6, 8004468 <_printf_i+0x1a4>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	f023 0320 	bic.w	r3, r3, #32
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	2310      	movs	r3, #16
 800446a:	e7a7      	b.n	80043bc <_printf_i+0xf8>
 800446c:	4824      	ldr	r0, [pc, #144]	; (8004500 <_printf_i+0x23c>)
 800446e:	e7e4      	b.n	800443a <_printf_i+0x176>
 8004470:	4615      	mov	r5, r2
 8004472:	e7bd      	b.n	80043f0 <_printf_i+0x12c>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	6826      	ldr	r6, [r4, #0]
 8004478:	6961      	ldr	r1, [r4, #20]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	6028      	str	r0, [r5, #0]
 800447e:	0635      	lsls	r5, r6, #24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	d501      	bpl.n	8004488 <_printf_i+0x1c4>
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	e002      	b.n	800448e <_printf_i+0x1ca>
 8004488:	0670      	lsls	r0, r6, #25
 800448a:	d5fb      	bpl.n	8004484 <_printf_i+0x1c0>
 800448c:	8019      	strh	r1, [r3, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	6123      	str	r3, [r4, #16]
 8004492:	4615      	mov	r5, r2
 8004494:	e7bc      	b.n	8004410 <_printf_i+0x14c>
 8004496:	682b      	ldr	r3, [r5, #0]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	6862      	ldr	r2, [r4, #4]
 80044a0:	2100      	movs	r1, #0
 80044a2:	4628      	mov	r0, r5
 80044a4:	f7fb fe94 	bl	80001d0 <memchr>
 80044a8:	b108      	cbz	r0, 80044ae <_printf_i+0x1ea>
 80044aa:	1b40      	subs	r0, r0, r5
 80044ac:	6060      	str	r0, [r4, #4]
 80044ae:	6863      	ldr	r3, [r4, #4]
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	2300      	movs	r3, #0
 80044b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b8:	e7aa      	b.n	8004410 <_printf_i+0x14c>
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	462a      	mov	r2, r5
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	47d0      	blx	sl
 80044c4:	3001      	adds	r0, #1
 80044c6:	d0ad      	beq.n	8004424 <_printf_i+0x160>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	079b      	lsls	r3, r3, #30
 80044cc:	d413      	bmi.n	80044f6 <_printf_i+0x232>
 80044ce:	68e0      	ldr	r0, [r4, #12]
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	4298      	cmp	r0, r3
 80044d4:	bfb8      	it	lt
 80044d6:	4618      	movlt	r0, r3
 80044d8:	e7a6      	b.n	8004428 <_printf_i+0x164>
 80044da:	2301      	movs	r3, #1
 80044dc:	4632      	mov	r2, r6
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	47d0      	blx	sl
 80044e4:	3001      	adds	r0, #1
 80044e6:	d09d      	beq.n	8004424 <_printf_i+0x160>
 80044e8:	3501      	adds	r5, #1
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	9903      	ldr	r1, [sp, #12]
 80044ee:	1a5b      	subs	r3, r3, r1
 80044f0:	42ab      	cmp	r3, r5
 80044f2:	dcf2      	bgt.n	80044da <_printf_i+0x216>
 80044f4:	e7eb      	b.n	80044ce <_printf_i+0x20a>
 80044f6:	2500      	movs	r5, #0
 80044f8:	f104 0619 	add.w	r6, r4, #25
 80044fc:	e7f5      	b.n	80044ea <_printf_i+0x226>
 80044fe:	bf00      	nop
 8004500:	080049d8 	.word	0x080049d8
 8004504:	080049e9 	.word	0x080049e9

08004508 <__swbuf_r>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	460e      	mov	r6, r1
 800450c:	4614      	mov	r4, r2
 800450e:	4605      	mov	r5, r0
 8004510:	b118      	cbz	r0, 800451a <__swbuf_r+0x12>
 8004512:	6a03      	ldr	r3, [r0, #32]
 8004514:	b90b      	cbnz	r3, 800451a <__swbuf_r+0x12>
 8004516:	f7ff fa39 	bl	800398c <__sinit>
 800451a:	69a3      	ldr	r3, [r4, #24]
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	071a      	lsls	r2, r3, #28
 8004522:	d525      	bpl.n	8004570 <__swbuf_r+0x68>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	b31b      	cbz	r3, 8004570 <__swbuf_r+0x68>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	6922      	ldr	r2, [r4, #16]
 800452c:	1a98      	subs	r0, r3, r2
 800452e:	6963      	ldr	r3, [r4, #20]
 8004530:	b2f6      	uxtb	r6, r6
 8004532:	4283      	cmp	r3, r0
 8004534:	4637      	mov	r7, r6
 8004536:	dc04      	bgt.n	8004542 <__swbuf_r+0x3a>
 8004538:	4621      	mov	r1, r4
 800453a:	4628      	mov	r0, r5
 800453c:	f7ff fcc0 	bl	8003ec0 <_fflush_r>
 8004540:	b9e0      	cbnz	r0, 800457c <__swbuf_r+0x74>
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	3b01      	subs	r3, #1
 8004546:	60a3      	str	r3, [r4, #8]
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	701e      	strb	r6, [r3, #0]
 8004550:	6962      	ldr	r2, [r4, #20]
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	429a      	cmp	r2, r3
 8004556:	d004      	beq.n	8004562 <__swbuf_r+0x5a>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	07db      	lsls	r3, r3, #31
 800455c:	d506      	bpl.n	800456c <__swbuf_r+0x64>
 800455e:	2e0a      	cmp	r6, #10
 8004560:	d104      	bne.n	800456c <__swbuf_r+0x64>
 8004562:	4621      	mov	r1, r4
 8004564:	4628      	mov	r0, r5
 8004566:	f7ff fcab 	bl	8003ec0 <_fflush_r>
 800456a:	b938      	cbnz	r0, 800457c <__swbuf_r+0x74>
 800456c:	4638      	mov	r0, r7
 800456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004570:	4621      	mov	r1, r4
 8004572:	4628      	mov	r0, r5
 8004574:	f000 f806 	bl	8004584 <__swsetup_r>
 8004578:	2800      	cmp	r0, #0
 800457a:	d0d5      	beq.n	8004528 <__swbuf_r+0x20>
 800457c:	f04f 37ff 	mov.w	r7, #4294967295
 8004580:	e7f4      	b.n	800456c <__swbuf_r+0x64>
	...

08004584 <__swsetup_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <__swsetup_r+0xac>)
 8004588:	4605      	mov	r5, r0
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	460c      	mov	r4, r1
 800458e:	b118      	cbz	r0, 8004598 <__swsetup_r+0x14>
 8004590:	6a03      	ldr	r3, [r0, #32]
 8004592:	b90b      	cbnz	r3, 8004598 <__swsetup_r+0x14>
 8004594:	f7ff f9fa 	bl	800398c <__sinit>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800459e:	0718      	lsls	r0, r3, #28
 80045a0:	d422      	bmi.n	80045e8 <__swsetup_r+0x64>
 80045a2:	06d9      	lsls	r1, r3, #27
 80045a4:	d407      	bmi.n	80045b6 <__swsetup_r+0x32>
 80045a6:	2309      	movs	r3, #9
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e034      	b.n	8004620 <__swsetup_r+0x9c>
 80045b6:	0758      	lsls	r0, r3, #29
 80045b8:	d512      	bpl.n	80045e0 <__swsetup_r+0x5c>
 80045ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045bc:	b141      	cbz	r1, 80045d0 <__swsetup_r+0x4c>
 80045be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c2:	4299      	cmp	r1, r3
 80045c4:	d002      	beq.n	80045cc <__swsetup_r+0x48>
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7ff faf4 	bl	8003bb4 <_free_r>
 80045cc:	2300      	movs	r3, #0
 80045ce:	6363      	str	r3, [r4, #52]	; 0x34
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	2300      	movs	r3, #0
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f043 0308 	orr.w	r3, r3, #8
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	b94b      	cbnz	r3, 8004600 <__swsetup_r+0x7c>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d003      	beq.n	8004600 <__swsetup_r+0x7c>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f884 	bl	8004708 <__smakebuf_r>
 8004600:	89a0      	ldrh	r0, [r4, #12]
 8004602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004606:	f010 0301 	ands.w	r3, r0, #1
 800460a:	d00a      	beq.n	8004622 <__swsetup_r+0x9e>
 800460c:	2300      	movs	r3, #0
 800460e:	60a3      	str	r3, [r4, #8]
 8004610:	6963      	ldr	r3, [r4, #20]
 8004612:	425b      	negs	r3, r3
 8004614:	61a3      	str	r3, [r4, #24]
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	b943      	cbnz	r3, 800462c <__swsetup_r+0xa8>
 800461a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800461e:	d1c4      	bne.n	80045aa <__swsetup_r+0x26>
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	0781      	lsls	r1, r0, #30
 8004624:	bf58      	it	pl
 8004626:	6963      	ldrpl	r3, [r4, #20]
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	e7f4      	b.n	8004616 <__swsetup_r+0x92>
 800462c:	2000      	movs	r0, #0
 800462e:	e7f7      	b.n	8004620 <__swsetup_r+0x9c>
 8004630:	20000064 	.word	0x20000064

08004634 <_raise_r>:
 8004634:	291f      	cmp	r1, #31
 8004636:	b538      	push	{r3, r4, r5, lr}
 8004638:	4604      	mov	r4, r0
 800463a:	460d      	mov	r5, r1
 800463c:	d904      	bls.n	8004648 <_raise_r+0x14>
 800463e:	2316      	movs	r3, #22
 8004640:	6003      	str	r3, [r0, #0]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800464a:	b112      	cbz	r2, 8004652 <_raise_r+0x1e>
 800464c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004650:	b94b      	cbnz	r3, 8004666 <_raise_r+0x32>
 8004652:	4620      	mov	r0, r4
 8004654:	f000 f830 	bl	80046b8 <_getpid_r>
 8004658:	462a      	mov	r2, r5
 800465a:	4601      	mov	r1, r0
 800465c:	4620      	mov	r0, r4
 800465e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004662:	f000 b817 	b.w	8004694 <_kill_r>
 8004666:	2b01      	cmp	r3, #1
 8004668:	d00a      	beq.n	8004680 <_raise_r+0x4c>
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	d103      	bne.n	8004676 <_raise_r+0x42>
 800466e:	2316      	movs	r3, #22
 8004670:	6003      	str	r3, [r0, #0]
 8004672:	2001      	movs	r0, #1
 8004674:	e7e7      	b.n	8004646 <_raise_r+0x12>
 8004676:	2400      	movs	r4, #0
 8004678:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800467c:	4628      	mov	r0, r5
 800467e:	4798      	blx	r3
 8004680:	2000      	movs	r0, #0
 8004682:	e7e0      	b.n	8004646 <_raise_r+0x12>

08004684 <raise>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <raise+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f7ff bfd3 	b.w	8004634 <_raise_r>
 800468e:	bf00      	nop
 8004690:	20000064 	.word	0x20000064

08004694 <_kill_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	4d07      	ldr	r5, [pc, #28]	; (80046b4 <_kill_r+0x20>)
 8004698:	2300      	movs	r3, #0
 800469a:	4604      	mov	r4, r0
 800469c:	4608      	mov	r0, r1
 800469e:	4611      	mov	r1, r2
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	f7fb ffbb 	bl	800061c <_kill>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d102      	bne.n	80046b0 <_kill_r+0x1c>
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	b103      	cbz	r3, 80046b0 <_kill_r+0x1c>
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
 80046b2:	bf00      	nop
 80046b4:	20000330 	.word	0x20000330

080046b8 <_getpid_r>:
 80046b8:	f7fb bfa8 	b.w	800060c <_getpid>

080046bc <__swhatbuf_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	460c      	mov	r4, r1
 80046c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	b096      	sub	sp, #88	; 0x58
 80046c8:	4615      	mov	r5, r2
 80046ca:	461e      	mov	r6, r3
 80046cc:	da0d      	bge.n	80046ea <__swhatbuf_r+0x2e>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	bf0c      	ite	eq
 80046da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046de:	2340      	movne	r3, #64	; 0x40
 80046e0:	2000      	movs	r0, #0
 80046e2:	6031      	str	r1, [r6, #0]
 80046e4:	602b      	str	r3, [r5, #0]
 80046e6:	b016      	add	sp, #88	; 0x58
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	466a      	mov	r2, sp
 80046ec:	f000 f848 	bl	8004780 <_fstat_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	dbec      	blt.n	80046ce <__swhatbuf_r+0x12>
 80046f4:	9901      	ldr	r1, [sp, #4]
 80046f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046fe:	4259      	negs	r1, r3
 8004700:	4159      	adcs	r1, r3
 8004702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004706:	e7eb      	b.n	80046e0 <__swhatbuf_r+0x24>

08004708 <__smakebuf_r>:
 8004708:	898b      	ldrh	r3, [r1, #12]
 800470a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800470c:	079d      	lsls	r5, r3, #30
 800470e:	4606      	mov	r6, r0
 8004710:	460c      	mov	r4, r1
 8004712:	d507      	bpl.n	8004724 <__smakebuf_r+0x1c>
 8004714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	2301      	movs	r3, #1
 800471e:	6163      	str	r3, [r4, #20]
 8004720:	b002      	add	sp, #8
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	ab01      	add	r3, sp, #4
 8004726:	466a      	mov	r2, sp
 8004728:	f7ff ffc8 	bl	80046bc <__swhatbuf_r>
 800472c:	9900      	ldr	r1, [sp, #0]
 800472e:	4605      	mov	r5, r0
 8004730:	4630      	mov	r0, r6
 8004732:	f7ff fab3 	bl	8003c9c <_malloc_r>
 8004736:	b948      	cbnz	r0, 800474c <__smakebuf_r+0x44>
 8004738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473c:	059a      	lsls	r2, r3, #22
 800473e:	d4ef      	bmi.n	8004720 <__smakebuf_r+0x18>
 8004740:	f023 0303 	bic.w	r3, r3, #3
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e7e3      	b.n	8004714 <__smakebuf_r+0xc>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	6020      	str	r0, [r4, #0]
 8004750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	9b00      	ldr	r3, [sp, #0]
 8004758:	6163      	str	r3, [r4, #20]
 800475a:	9b01      	ldr	r3, [sp, #4]
 800475c:	6120      	str	r0, [r4, #16]
 800475e:	b15b      	cbz	r3, 8004778 <__smakebuf_r+0x70>
 8004760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f81d 	bl	80047a4 <_isatty_r>
 800476a:	b128      	cbz	r0, 8004778 <__smakebuf_r+0x70>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	431d      	orrs	r5, r3
 800477c:	81a5      	strh	r5, [r4, #12]
 800477e:	e7cf      	b.n	8004720 <__smakebuf_r+0x18>

08004780 <_fstat_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_fstat_r+0x20>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	f7fb ffa4 	bl	80006da <_fstat>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d102      	bne.n	800479c <_fstat_r+0x1c>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	b103      	cbz	r3, 800479c <_fstat_r+0x1c>
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	20000330 	.word	0x20000330

080047a4 <_isatty_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_isatty_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fb ffa3 	bl	80006fa <_isatty>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_isatty_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_isatty_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000330 	.word	0x20000330

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
