
New3LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e0  080049e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080049e0  080049e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e0  080049e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08004a50  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004a50  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4ae  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213f  00000000  00000000  0002b589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e1  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273ce  00000000  00000000  0002eda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f305  00000000  00000000  00056177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eea63  00000000  00000000  0006547c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d70  00000000  00000000  00153ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00157c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047a8 	.word	0x080047a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080047a8 	.word	0x080047a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_DMA_Init+0x38>)
 8000278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <MX_DMA_Init+0x38>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6493      	str	r3, [r2, #72]	; 0x48
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_DMA_Init+0x38>)
 8000284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f000 fdbf 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f000 fdd8 	bl	8000e4e <HAL_NVIC_EnableIRQ>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_GPIO_Init+0x68>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_GPIO_Init+0x68>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_GPIO_Init+0x68>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_GPIO_Init+0x68>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <MX_GPIO_Init+0x68>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_GPIO_Init+0x68>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80002f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4619      	mov	r1, r3
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_GPIO_Init+0x6c>)
 8000308:	f000 ffb4 	bl	8001274 <HAL_GPIO_Init>

}
 800030c:	bf00      	nop
 800030e:	3720      	adds	r7, #32
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021000 	.word	0x40021000
 8000318:	48000800 	.word	0x48000800

0800031c <is_button_pressed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool pressed = false;

bool is_button_pressed(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 8000320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000324:	4805      	ldr	r0, [pc, #20]	; (800033c <is_button_pressed+0x20>)
 8000326:	f001 f94f 	bl	80015c8 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b01      	cmp	r3, #1
 800032e:	d101      	bne.n	8000334 <is_button_pressed+0x18>
      return true;
 8000330:	2301      	movs	r3, #1
 8000332:	e000      	b.n	8000336 <is_button_pressed+0x1a>
    } else {
      return false;
 8000334:	2300      	movs	r3, #0
    }
}
 8000336:	4618      	mov	r0, r3
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	48000800 	.word	0x48000800

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fbf2 	bl	8000b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f8a1 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f7ff ffad 	bl	80002ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000352:	f7ff ff8d 	bl	8000270 <MX_DMA_Init>
  MX_TIM3_Init();
 8000356:	f000 fa23 	bl	80007a0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ws2812b_init();
 800035a:	f000 fb4b 	bl	80009f4 <ws2812b_init>
//		  	    ws2812b_set_color(6, r, g, b);
//		  	    ws2812b_update();
//		  	    HAL_Delay(100);
//
//	  }
	  if(is_button_pressed()){
 800035e:	f7ff ffdd 	bl	800031c <is_button_pressed>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d047      	beq.n	80003f8 <main+0xb8>
		  uint8_t r = gamma8[rand() % 70];
 8000368:	f003 fa38 	bl	80037dc <rand>
 800036c:	4603      	mov	r3, r0
 800036e:	4a46      	ldr	r2, [pc, #280]	; (8000488 <main+0x148>)
 8000370:	fb82 1203 	smull	r1, r2, r2, r3
 8000374:	441a      	add	r2, r3
 8000376:	1191      	asrs	r1, r2, #6
 8000378:	17da      	asrs	r2, r3, #31
 800037a:	1a8a      	subs	r2, r1, r2
 800037c:	2146      	movs	r1, #70	; 0x46
 800037e:	fb01 f202 	mul.w	r2, r1, r2
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	4b41      	ldr	r3, [pc, #260]	; (800048c <main+0x14c>)
 8000386:	5c9b      	ldrb	r3, [r3, r2]
 8000388:	713b      	strb	r3, [r7, #4]
		  	  uint8_t g = gamma8[rand() % 70];
 800038a:	f003 fa27 	bl	80037dc <rand>
 800038e:	4603      	mov	r3, r0
 8000390:	4a3d      	ldr	r2, [pc, #244]	; (8000488 <main+0x148>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	441a      	add	r2, r3
 8000398:	1191      	asrs	r1, r2, #6
 800039a:	17da      	asrs	r2, r3, #31
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	2146      	movs	r1, #70	; 0x46
 80003a0:	fb01 f202 	mul.w	r2, r1, r2
 80003a4:	1a9a      	subs	r2, r3, r2
 80003a6:	4b39      	ldr	r3, [pc, #228]	; (800048c <main+0x14c>)
 80003a8:	5c9b      	ldrb	r3, [r3, r2]
 80003aa:	70fb      	strb	r3, [r7, #3]
		  	  uint8_t b = gamma8[rand() % 70];
 80003ac:	f003 fa16 	bl	80037dc <rand>
 80003b0:	4603      	mov	r3, r0
 80003b2:	4a35      	ldr	r2, [pc, #212]	; (8000488 <main+0x148>)
 80003b4:	fb82 1203 	smull	r1, r2, r2, r3
 80003b8:	441a      	add	r2, r3
 80003ba:	1191      	asrs	r1, r2, #6
 80003bc:	17da      	asrs	r2, r3, #31
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	2146      	movs	r1, #70	; 0x46
 80003c2:	fb01 f202 	mul.w	r2, r1, r2
 80003c6:	1a9a      	subs	r2, r3, r2
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <main+0x14c>)
 80003ca:	5c9b      	ldrb	r3, [r3, r2]
 80003cc:	70bb      	strb	r3, [r7, #2]
		  	  for (int led = 0; led < 6; led++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e00d      	b.n	80003f0 <main+0xb0>
		  	    ws2812b_set_color(led, r, g, b);
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	78bb      	ldrb	r3, [r7, #2]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
 80003da:	7939      	ldrb	r1, [r7, #4]
 80003dc:	f000 fb48 	bl	8000a70 <ws2812b_set_color>
		  	    ws2812b_update();
 80003e0:	f000 fb38 	bl	8000a54 <ws2812b_update>
		  	    HAL_Delay(100);
 80003e4:	2064      	movs	r0, #100	; 0x64
 80003e6:	f000 fc17 	bl	8000c18 <HAL_Delay>
		  	  for (int led = 0; led < 6; led++) {
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3301      	adds	r3, #1
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	ddee      	ble.n	80003d4 <main+0x94>
 80003f6:	e7b2      	b.n	800035e <main+0x1e>
		  	  }
	  }
	  else{
		  uint8_t r = gamma8[rand() % 70];
 80003f8:	f003 f9f0 	bl	80037dc <rand>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4a22      	ldr	r2, [pc, #136]	; (8000488 <main+0x148>)
 8000400:	fb82 1203 	smull	r1, r2, r2, r3
 8000404:	441a      	add	r2, r3
 8000406:	1191      	asrs	r1, r2, #6
 8000408:	17da      	asrs	r2, r3, #31
 800040a:	1a8a      	subs	r2, r1, r2
 800040c:	2146      	movs	r1, #70	; 0x46
 800040e:	fb01 f202 	mul.w	r2, r1, r2
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <main+0x14c>)
 8000416:	5c9b      	ldrb	r3, [r3, r2]
 8000418:	71fb      	strb	r3, [r7, #7]
		  	  uint8_t g = gamma8[rand() % 70];
 800041a:	f003 f9df 	bl	80037dc <rand>
 800041e:	4603      	mov	r3, r0
 8000420:	4a19      	ldr	r2, [pc, #100]	; (8000488 <main+0x148>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	441a      	add	r2, r3
 8000428:	1191      	asrs	r1, r2, #6
 800042a:	17da      	asrs	r2, r3, #31
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	2146      	movs	r1, #70	; 0x46
 8000430:	fb01 f202 	mul.w	r2, r1, r2
 8000434:	1a9a      	subs	r2, r3, r2
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <main+0x14c>)
 8000438:	5c9b      	ldrb	r3, [r3, r2]
 800043a:	71bb      	strb	r3, [r7, #6]
		  	  uint8_t b = gamma8[rand() % 70];
 800043c:	f003 f9ce 	bl	80037dc <rand>
 8000440:	4603      	mov	r3, r0
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <main+0x148>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	441a      	add	r2, r3
 800044a:	1191      	asrs	r1, r2, #6
 800044c:	17da      	asrs	r2, r3, #31
 800044e:	1a8a      	subs	r2, r1, r2
 8000450:	2146      	movs	r1, #70	; 0x46
 8000452:	fb01 f202 	mul.w	r2, r1, r2
 8000456:	1a9a      	subs	r2, r3, r2
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <main+0x14c>)
 800045a:	5c9b      	ldrb	r3, [r3, r2]
 800045c:	717b      	strb	r3, [r7, #5]
		  	  for (int led = 0; led < 6; led++) {
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	e00d      	b.n	8000480 <main+0x140>
		  	    ws2812b_set_color(led, r, g, b);
 8000464:	68b8      	ldr	r0, [r7, #8]
 8000466:	797b      	ldrb	r3, [r7, #5]
 8000468:	79ba      	ldrb	r2, [r7, #6]
 800046a:	79f9      	ldrb	r1, [r7, #7]
 800046c:	f000 fb00 	bl	8000a70 <ws2812b_set_color>
		  	    ws2812b_update();
 8000470:	f000 faf0 	bl	8000a54 <ws2812b_update>
		  	    HAL_Delay(100);
 8000474:	2064      	movs	r0, #100	; 0x64
 8000476:	f000 fbcf 	bl	8000c18 <HAL_Delay>
		  	  for (int led = 0; led < 6; led++) {
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	3301      	adds	r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2b05      	cmp	r3, #5
 8000484:	ddee      	ble.n	8000464 <main+0x124>
	  if(is_button_pressed()){
 8000486:	e76a      	b.n	800035e <main+0x1e>
 8000488:	ea0ea0eb 	.word	0xea0ea0eb
 800048c:	080047c0 	.word	0x080047c0

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	; 0x58
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	; 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fadf 	bl	8003a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b6:	f001 f8ad 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004c0:	f000 f838 	bl	8000534 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c4:	2310      	movs	r3, #16
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c8:	2301      	movs	r3, #1
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004d0:	2360      	movs	r3, #96	; 0x60
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004d8:	2301      	movs	r3, #1
 80004da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004dc:	2301      	movs	r3, #1
 80004de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004e0:	2328      	movs	r3, #40	; 0x28
 80004e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004e4:	2307      	movs	r3, #7
 80004e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ec:	2302      	movs	r3, #2
 80004ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f8e3 	bl	80016c0 <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000500:	f000 f818 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000508:	2303      	movs	r3, #3
 800050a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	2104      	movs	r1, #4
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fcab 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000528:	f000 f804 	bl	8000534 <Error_Handler>
  }
}
 800052c:	bf00      	nop
 800052e:	3758      	adds	r7, #88	; 0x58
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x44>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x44>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6613      	str	r3, [r2, #96]	; 0x60
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x44>)
 8000554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_MspInit+0x44>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_MspInit+0x44>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_MspInit+0x44>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 fb00 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <DMA1_Channel6_IRQHandler+0x10>)
 80005e2:	f000 fd67 	bl	80010b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000d4 	.word	0x200000d4

080005f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return 1;
 80005f4:	2301      	movs	r3, #1
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <_kill>:

int _kill(int pid, int sig)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800060a:	f003 fa79 	bl	8003b00 <__errno>
 800060e:	4603      	mov	r3, r0
 8000610:	2216      	movs	r2, #22
 8000612:	601a      	str	r2, [r3, #0]
  return -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_exit>:

void _exit (int status)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000628:	f04f 31ff 	mov.w	r1, #4294967295
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffe7 	bl	8000600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000632:	e7fe      	b.n	8000632 <_exit+0x12>

08000634 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e00a      	b.n	800065c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000646:	f3af 8000 	nop.w
 800064a:	4601      	mov	r1, r0
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	60ba      	str	r2, [r7, #8]
 8000652:	b2ca      	uxtb	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <_read+0x12>
  }

  return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	e009      	b.n	8000694 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf1      	blt.n	8000680 <_write+0x12>
  }
  return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_close>:

int _close(int file)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ce:	605a      	str	r2, [r3, #4]
  return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <_isatty>:

int _isatty(int file)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <_sbrk+0x5c>)
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <_sbrk+0x60>)
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <_sbrk+0x64>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <_sbrk+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	d207      	bcs.n	8000750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000740:	f003 f9de 	bl	8003b00 <__errno>
 8000744:	4603      	mov	r3, r0
 8000746:	220c      	movs	r2, #12
 8000748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	e009      	b.n	8000764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <_sbrk+0x64>)
 8000760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20018000 	.word	0x20018000
 8000770:	00000400 	.word	0x00000400
 8000774:	20000084 	.word	0x20000084
 8000778:	20000340 	.word	0x20000340

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007d4:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007e6:	2263      	movs	r2, #99	; 0x63
 80007e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f8:	f001 fd2a 	bl	8002250 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000802:	f7ff fe97 	bl	8000534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000810:	4619      	mov	r1, r3
 8000812:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000814:	f002 f972 	bl	8002afc <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800081e:	f7ff fe89 	bl	8000534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000824:	f001 fdd4 	bl	80023d0 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800082e:	f7ff fe81 	bl	8000534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000842:	f002 ff43 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800084c:	f7ff fe72 	bl	8000534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000868:	f002 f834 	bl	80028d4 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000872:	f7ff fe5f 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000878:	f000 f85a 	bl	8000930 <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000088 	.word	0x20000088
 8000888:	40000400 	.word	0x40000400

0800088c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <HAL_TIM_Base_MspInit+0x94>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d13b      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_TIM_Base_MspInit+0x98>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <HAL_TIM_Base_MspInit+0x98>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_TIM_Base_MspInit+0x98>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_TIM_Base_MspInit+0xa0>)
 80008ba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008be:	2205      	movs	r2, #5
 80008c0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008da:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 80008f0:	f000 fac8 	bl	8000e84 <HAL_DMA_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80008fa:	f7ff fe1b 	bl	8000534 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <HAL_TIM_Base_MspInit+0x9c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40000400 	.word	0x40000400
 8000924:	40021000 	.word	0x40021000
 8000928:	200000d4 	.word	0x200000d4
 800092c:	4002006c 	.word	0x4002006c

08000930 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <HAL_TIM_MspPostInit+0x64>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d11c      	bne.n	800098c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_MspPostInit+0x68>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fc74 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40000400 	.word	0x40000400
 8000998:	40021000 	.word	0x40021000

0800099c <set_byte>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e016      	b.n	80009dc <set_byte+0x40>
    if (value & 0x80) {
 80009ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da06      	bge.n	80009c4 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <set_byte+0x54>)
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	54d1      	strb	r1, [r2, r3]
 80009c2:	e005      	b.n	80009d0 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <set_byte+0x54>)
 80009cc:	2120      	movs	r1, #32
 80009ce:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	dde5      	ble.n	80009ae <set_byte+0x12>
  }
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	2000011c 	.word	0x2000011c

080009f4 <ws2812b_init>:

void ws2812b_init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	e007      	b.n	8000a10 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <ws2812b_init+0x58>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b27      	cmp	r3, #39	; 0x27
 8000a14:	ddf4      	ble.n	8000a00 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e007      	b.n	8000a2c <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3328      	adds	r3, #40	; 0x28
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <ws2812b_init+0x58>)
 8000a22:	2120      	movs	r1, #32
 8000a24:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2ba7      	cmp	r3, #167	; 0xa7
 8000a30:	ddf4      	ble.n	8000a1c <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <ws2812b_init+0x58>)
 8000a34:	2264      	movs	r2, #100	; 0x64
 8000a36:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

  HAL_TIM_Base_Start(&htim3);
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <ws2812b_init+0x5c>)
 8000a3c:	f001 fc60 	bl	8002300 <HAL_TIM_Base_Start>
  ws2812b_update();
 8000a40:	f000 f808 	bl	8000a54 <ws2812b_update>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000011c 	.word	0x2000011c
 8000a50:	20000088 	.word	0x20000088

08000a54 <ws2812b_update>:


void ws2812b_update(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000a58:	23d1      	movs	r3, #209	; 0xd1
 8000a5a:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <ws2812b_update+0x14>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <ws2812b_update+0x18>)
 8000a60:	f001 fd18 	bl	8002494 <HAL_TIM_PWM_Start_DMA>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000011c 	.word	0x2000011c
 8000a6c:	20000088 	.word	0x20000088

08000a70 <ws2812b_set_color>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4603      	mov	r3, r0
 8000a80:	70fb      	strb	r3, [r7, #3]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70bb      	strb	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b06      	cmp	r3, #6
 8000a8e:	d820      	bhi.n	8000ad2 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	3328      	adds	r3, #40	; 0x28
 8000a9c:	78ba      	ldrb	r2, [r7, #2]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff7b 	bl	800099c <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	3330      	adds	r3, #48	; 0x30
 8000ab2:	78fa      	ldrb	r2, [r7, #3]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff70 	bl	800099c <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	3338      	adds	r3, #56	; 0x38
 8000ac8:	787a      	ldrb	r2, [r7, #1]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff65 	bl	800099c <set_byte>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae0:	f7ff fe4c 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 ffff 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0e:	f7ff fc17 	bl	8000340 <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b20:	080049e8 	.word	0x080049e8
  ldr r2, =_sbss
 8000b24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b28:	20000340 	.word	0x20000340

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>

08000b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f961 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f80e 	bl	8000b60 <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b50:	f7ff fcf6 	bl	8000540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_InitTick+0x70>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f96d 	bl	8000e6a <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10f      	bne.n	8000bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d809      	bhi.n	8000bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f937 	bl	8000e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_InitTick+0x74>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e001      	b.n	8000bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	200001f0 	.word	0x200001f0

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200001f0 	.word	0x200001f0

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e098      	b.n	8000fc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <HAL_DMA_Init+0x150>)
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d80f      	bhi.n	8000ec2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <HAL_DMA_Init+0x154>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <HAL_DMA_Init+0x158>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	009a      	lsls	r2, r3, #2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_DMA_Init+0x15c>)
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec0:	e00e      	b.n	8000ee0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <HAL_DMA_Init+0x160>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <HAL_DMA_Init+0x158>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	009a      	lsls	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a42      	ldr	r2, [pc, #264]	; (8000fe8 <HAL_DMA_Init+0x164>)
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f3a:	d039      	beq.n	8000fb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <HAL_DMA_Init+0x15c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11a      	bne.n	8000f7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_DMA_Init+0x168>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 031c 	and.w	r3, r3, #28
 8000f52:	210f      	movs	r1, #15
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4924      	ldr	r1, [pc, #144]	; (8000fec <HAL_DMA_Init+0x168>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_DMA_Init+0x168>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 031c 	and.w	r3, r3, #28
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	491d      	ldr	r1, [pc, #116]	; (8000fec <HAL_DMA_Init+0x168>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
 8000f7a:	e019      	b.n	8000fb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_DMA_Init+0x16c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	f003 031c 	and.w	r3, r3, #28
 8000f88:	210f      	movs	r1, #15
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4917      	ldr	r1, [pc, #92]	; (8000ff0 <HAL_DMA_Init+0x16c>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_DMA_Init+0x16c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f003 031c 	and.w	r3, r3, #28
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <HAL_DMA_Init+0x16c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40020407 	.word	0x40020407
 8000fd8:	bffdfff8 	.word	0xbffdfff8
 8000fdc:	cccccccd 	.word	0xcccccccd
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	bffdfbf8 	.word	0xbffdfbf8
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	400200a8 	.word	0x400200a8
 8000ff0:	400204a8 	.word	0x400204a8

08000ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_DMA_Start_IT+0x20>
 8001010:	2302      	movs	r3, #2
 8001012:	e04b      	b.n	80010ac <HAL_DMA_Start_IT+0xb8>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d13a      	bne.n	800109e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f8e0 	bl	8001212 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	2b00      	cmp	r3, #0
 8001058:	d008      	beq.n	800106c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 020e 	orr.w	r2, r2, #14
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e00f      	b.n	800108c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0204 	bic.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 020a 	orr.w	r2, r2, #10
 800108a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e005      	b.n	80010aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010a6:	2302      	movs	r3, #2
 80010a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f003 031c 	and.w	r3, r3, #28
 80010d4:	2204      	movs	r2, #4
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d026      	beq.n	800112e <HAL_DMA_IRQHandler+0x7a>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d021      	beq.n	800112e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0204 	bic.w	r2, r2, #4
 8001106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	f003 021c 	and.w	r2, r3, #28
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	2104      	movs	r1, #4
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	2b00      	cmp	r3, #0
 8001122:	d071      	beq.n	8001208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800112c:	e06c      	b.n	8001208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 031c 	and.w	r3, r3, #28
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02e      	beq.n	80011a0 <HAL_DMA_IRQHandler+0xec>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d029      	beq.n	80011a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10b      	bne.n	8001172 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 020a 	bic.w	r2, r2, #10
 8001168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f003 021c 	and.w	r2, r3, #28
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2102      	movs	r1, #2
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d038      	beq.n	8001208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800119e:	e033      	b.n	8001208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f003 031c 	and.w	r3, r3, #28
 80011a8:	2208      	movs	r2, #8
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02a      	beq.n	800120a <HAL_DMA_IRQHandler+0x156>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d025      	beq.n	800120a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 020e 	bic.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 021c 	and.w	r2, r3, #28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001208:	bf00      	nop
 800120a:	bf00      	nop
}
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001212:	b480      	push	{r7}
 8001214:	b085      	sub	sp, #20
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f003 021c 	and.w	r2, r3, #28
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b10      	cmp	r3, #16
 8001242:	d108      	bne.n	8001256 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001254:	e007      	b.n	8001266 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	60da      	str	r2, [r3, #12]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e17f      	b.n	8001584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8171 	beq.w	800157e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d118      	bne.n	8001354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80ac 	beq.w	800157e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_GPIO_Init+0x330>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <HAL_GPIO_Init+0x334>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x338>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x33c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x340>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x344>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x348>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x22a>
 800149a:	2306      	movs	r3, #6
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae78 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	48001800 	.word	0x48001800
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_PWREx_GetVoltageRange+0x18>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001622:	d130      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001630:	d038      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2232      	movs	r2, #50	; 0x32
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9b      	lsrs	r3, r3, #18
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001658:	e002      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166c:	d102      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001680:	d110      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e00f      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001692:	d007      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3ca      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80e4 	beq.w	80018bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_RCC_OscConfig+0x4a>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	f040 808b 	bne.w	8001818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b01      	cmp	r3, #1
 8001706:	f040 8087 	bne.w	8001818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170a:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3a2      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_RCC_OscConfig+0x7c>
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173a:	e005      	b.n	8001748 <HAL_RCC_OscConfig+0x88>
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001748:	4293      	cmp	r3, r2
 800174a:	d223      	bcs.n	8001794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd1d 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e383      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a72      	ldr	r2, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	496d      	ldr	r1, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	4968      	ldr	r1, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
 8001792:	e025      	b.n	80017e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4960      	ldr	r1, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	495b      	ldr	r1, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fcdd 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e343      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e0:	f000 fc4a 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b52      	ldr	r3, [pc, #328]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4950      	ldr	r1, [pc, #320]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x278>)
 80017fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001800:	4b4e      	ldr	r3, [pc, #312]	; (800193c <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9ab 	bl	8000b60 <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d052      	beq.n	80018ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	e327      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d032      	beq.n	8001886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a42      	ldr	r2, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182c:	f7ff f9e8 	bl	8000c00 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001834:	f7ff f9e4 	bl	8000c00 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e310      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a36      	ldr	r2, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4931      	ldr	r1, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	492c      	ldr	r1, [pc, #176]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e01a      	b.n	80018bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a29      	ldr	r2, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001892:	f7ff f9b5 	bl	8000c00 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189a:	f7ff f9b1 	bl	8000c00 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2dd      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x1da>
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d074      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x21a>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d10e      	bne.n	80018f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d064      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d160      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e2ba      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x24a>
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e026      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x280>
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800191a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a02      	ldr	r2, [pc, #8]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	080048c0 	.word	0x080048c0
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004
 8001940:	4ba0      	ldr	r3, [pc, #640]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a9f      	ldr	r2, [pc, #636]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a9c      	ldr	r2, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f94e 	bl	8000c00 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f94a 	bl	8000c00 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e276      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197a:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x2a8>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f93a 	bl	8000c00 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f936 	bl	8000c00 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e262      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x2d0>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d060      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x310>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x328>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e23f      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	4973      	ldr	r1, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e040      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d023      	beq.n	8001a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f8f5 	bl	8000c00 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f8f1 	bl	8000c00 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e21d      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	495f      	ldr	r1, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f8d1 	bl	8000c00 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8cd 	bl	8000c00 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1f9      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f8ac 	bl	8000c00 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f8a8 	bl	8000c00 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1d4      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x3ec>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f88f 	bl	8000c00 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f88b 	bl	8000c00 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1b7      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a6 	beq.w	8001c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d118      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b58:	f7ff f852 	bl	8000c00 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7ff f84e 	bl	8000c00 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4d8>
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_OscConfig+0x50c>
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	4b9c      	ldr	r3, [pc, #624]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a9b      	ldr	r2, [pc, #620]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a97      	ldr	r2, [pc, #604]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f804 	bl	8000c00 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f800 	bl	8000c00 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e12a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ed      	beq.n	8001bfc <HAL_RCC_OscConfig+0x53c>
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7fe ffed 	bl	8000c00 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7fe ffe9 	bl	8000c00 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e113      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c40:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ed      	bne.n	8001c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a79      	ldr	r2, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80fe 	beq.w	8001e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f040 80d0 	bne.w	8001e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c74:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d130      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	3b01      	subs	r3, #1
 8001c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d127      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d11f      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb4:	2a07      	cmp	r2, #7
 8001cb6:	bf14      	ite	ne
 8001cb8:	2201      	movne	r2, #1
 8001cba:	2200      	moveq	r2, #0
 8001cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d113      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d06e      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d069      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0ad      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d18:	f7fe ff72 	bl	8000c00 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe ff6e 	bl	8000c00 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e09a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d58:	0212      	lsls	r2, r2, #8
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	3a01      	subs	r2, #1
 8001d64:	0552      	lsls	r2, r2, #21
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d6c:	0852      	lsrs	r2, r2, #1
 8001d6e:	3a01      	subs	r2, #1
 8001d70:	0652      	lsls	r2, r2, #25
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d78:	0912      	lsrs	r2, r2, #4
 8001d7a:	0452      	lsls	r2, r2, #17
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	4930      	ldr	r1, [pc, #192]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9c:	f7fe ff30 	bl	8000c00 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ff2c 	bl	8000c00 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e058      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	e050      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e04f      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d148      	bne.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dec:	f7fe ff08 	bl	8000c00 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe ff04 	bl	8000c00 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e030      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x734>
 8001e12:	e028      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d023      	beq.n	8001e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7fe feeb 	bl	8000c00 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e00c      	b.n	8001e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fee7 	bl	8000c00 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d905      	bls.n	8001e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ec      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	4905      	ldr	r1, [pc, #20]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x7b4>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
 8001e60:	e001      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	feeefffc 	.word	0xfeeefffc

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0e7      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4970      	ldr	r1, [pc, #448]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cf      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4960      	ldr	r1, [pc, #384]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d04c      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0a6      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e09a      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08e      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e086      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4943      	ldr	r1, [pc, #268]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe fe4e 	bl	8000c00 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe fe4a 	bl	8000c00 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e06e      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d208      	bcs.n	8001fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	492b      	ldr	r1, [pc, #172]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d210      	bcs.n	8001fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 0207 	bic.w	r2, r3, #7
 8001fd4:	4923      	ldr	r1, [pc, #140]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e036      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4918      	ldr	r1, [pc, #96]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4910      	ldr	r1, [pc, #64]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202c:	f000 f824 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	490b      	ldr	r1, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1f4>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1fc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd85 	bl	8000b60 <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	72fb      	strb	r3, [r7, #11]

  return status;
 800205a:	7afb      	ldrb	r3, [r7, #11]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	080048c0 	.word	0x080048c0
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x34>
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d11e      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10d      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_GetSysClockFreq+0x110>)
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	e004      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCC_GetSysClockFreq+0x114>)
 80020fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d134      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0xa6>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d003      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0xac>
 800211c:	e005      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_RCC_GetSysClockFreq+0x110>)
 8002120:	617b      	str	r3, [r7, #20]
      break;
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_GetSysClockFreq+0x114>)
 8002126:	617b      	str	r3, [r7, #20]
      break;
 8002128:	e002      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	617b      	str	r3, [r7, #20]
      break;
 800212e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	3301      	adds	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	fb03 f202 	mul.w	r2, r3, r2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	0e5b      	lsrs	r3, r3, #25
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	3301      	adds	r3, #1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002170:	69bb      	ldr	r3, [r7, #24]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	080048d0 	.word	0x080048d0
 8002188:	00f42400 	.word	0x00f42400
 800218c:	007a1200 	.word	0x007a1200

08002190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a8:	f7ff fa26 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 80021ac:	6178      	str	r0, [r7, #20]
 80021ae:	e014      	b.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c8:	f7ff fa16 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 80021cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d10b      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d919      	bls.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2ba0      	cmp	r3, #160	; 0xa0
 80021ec:	d902      	bls.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ee:	2302      	movs	r3, #2
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e013      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e010      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d902      	bls.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002200:	2303      	movs	r3, #3
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e00a      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d102      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e004      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d101      	bne.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 0207 	bic.w	r2, r3, #7
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e049      	b.n	80022f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fb08 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 fdec 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e047      	b.n	80023a8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <HAL_TIM_Base_Start+0xb4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01d      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002332:	d018      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_TIM_Base_Start+0xb8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_TIM_Base_Start+0xbc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00e      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_TIM_Base_Start+0xc0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_TIM_Base_Start+0xc4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_TIM_Base_Start+0x66>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_TIM_Base_Start+0xc8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d115      	bne.n	8002392 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_TIM_Base_Start+0xcc>)
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b06      	cmp	r3, #6
 8002376:	d015      	beq.n	80023a4 <HAL_TIM_Base_Start+0xa4>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d011      	beq.n	80023a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e008      	b.n	80023a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40013400 	.word	0x40013400
 80023c8:	40014000 	.word	0x40014000
 80023cc:	00010007 	.word	0x00010007

080023d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e049      	b.n	8002476 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f841 	bl	800247e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fd2c 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e03c      	b.n	800253a <HAL_TIM_PWM_Start_DMA+0xa6>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d109      	bne.n	80024da <HAL_TIM_PWM_Start_DMA+0x46>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e02f      	b.n	800253a <HAL_TIM_PWM_Start_DMA+0xa6>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d109      	bne.n	80024f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e022      	b.n	800253a <HAL_TIM_PWM_Start_DMA+0xa6>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b0c      	cmp	r3, #12
 80024f8:	d109      	bne.n	800250e <HAL_TIM_PWM_Start_DMA+0x7a>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e015      	b.n	800253a <HAL_TIM_PWM_Start_DMA+0xa6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b10      	cmp	r3, #16
 8002512:	d109      	bne.n	8002528 <HAL_TIM_PWM_Start_DMA+0x94>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e008      	b.n	800253a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	e1ab      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e03c      	b.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x142>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d109      	bne.n	8002576 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e02f      	b.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start_DMA+0xfc>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e022      	b.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d109      	bne.n	80025aa <HAL_TIM_PWM_Start_DMA+0x116>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e015      	b.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x142>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d109      	bne.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x130>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x142>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d034      	beq.n	8002644 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_TIM_PWM_Start_DMA+0x152>
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e157      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start_DMA+0x166>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	e026      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d104      	bne.n	800260a <HAL_TIM_PWM_Start_DMA+0x176>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	e01e      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d104      	bne.n	800261a <HAL_TIM_PWM_Start_DMA+0x186>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	e016      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d104      	bne.n	800262a <HAL_TIM_PWM_Start_DMA+0x196>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002628:	e00e      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b10      	cmp	r3, #16
 800262e:	d104      	bne.n	800263a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	e006      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002642:	e001      	b.n	8002648 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e128      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	f200 80ae 	bhi.w	80027ac <HAL_TIM_PWM_Start_DMA+0x318>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	0800268d 	.word	0x0800268d
 800265c:	080027ad 	.word	0x080027ad
 8002660:	080027ad 	.word	0x080027ad
 8002664:	080027ad 	.word	0x080027ad
 8002668:	080026d5 	.word	0x080026d5
 800266c:	080027ad 	.word	0x080027ad
 8002670:	080027ad 	.word	0x080027ad
 8002674:	080027ad 	.word	0x080027ad
 8002678:	0800271d 	.word	0x0800271d
 800267c:	080027ad 	.word	0x080027ad
 8002680:	080027ad 	.word	0x080027ad
 8002684:	080027ad 	.word	0x080027ad
 8002688:	08002765 	.word	0x08002765
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	4a84      	ldr	r2, [pc, #528]	; (80028a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	4a83      	ldr	r2, [pc, #524]	; (80028a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800269a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	4a82      	ldr	r2, [pc, #520]	; (80028ac <HAL_TIM_PWM_Start_DMA+0x418>)
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3334      	adds	r3, #52	; 0x34
 80026b0:	461a      	mov	r2, r3
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	f7fe fc9e 	bl	8000ff4 <HAL_DMA_Start_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0eb      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	60da      	str	r2, [r3, #12]
      break;
 80026d2:	e06e      	b.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	4a71      	ldr	r2, [pc, #452]	; (80028a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	4a70      	ldr	r2, [pc, #448]	; (80028ac <HAL_TIM_PWM_Start_DMA+0x418>)
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3338      	adds	r3, #56	; 0x38
 80026f8:	461a      	mov	r2, r3
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	f7fe fc7a 	bl	8000ff4 <HAL_DMA_Start_IT>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0c7      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002718:	60da      	str	r2, [r3, #12]
      break;
 800271a:	e04a      	b.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a60      	ldr	r2, [pc, #384]	; (80028a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4a5f      	ldr	r2, [pc, #380]	; (80028a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800272a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	4a5e      	ldr	r2, [pc, #376]	; (80028ac <HAL_TIM_PWM_Start_DMA+0x418>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	333c      	adds	r3, #60	; 0x3c
 8002740:	461a      	mov	r2, r3
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	f7fe fc56 	bl	8000ff4 <HAL_DMA_Start_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0a3      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002760:	60da      	str	r2, [r3, #12]
      break;
 8002762:	e026      	b.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002772:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a4c      	ldr	r2, [pc, #304]	; (80028ac <HAL_TIM_PWM_Start_DMA+0x418>)
 800277a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3340      	adds	r3, #64	; 0x40
 8002788:	461a      	mov	r2, r3
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	f7fe fc32 	bl	8000ff4 <HAL_DMA_Start_IT>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07f      	b.n	800289a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027a8:	60da      	str	r2, [r3, #12]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d16f      	bne.n	8002898 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 ff5d 	bl	8003680 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a37      	ldr	r2, [pc, #220]	; (80028b4 <HAL_TIM_PWM_Start_DMA+0x420>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a36      	ldr	r2, [pc, #216]	; (80028b8 <HAL_TIM_PWM_Start_DMA+0x424>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_TIM_PWM_Start_DMA+0x428>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_PWM_Start_DMA+0x368>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_TIM_PWM_Start_DMA+0x36a>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d01d      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d018      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a23      	ldr	r2, [pc, #140]	; (80028cc <HAL_TIM_PWM_Start_DMA+0x438>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_TIM_PWM_Start_DMA+0x420>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d115      	bne.n	8002884 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d015      	beq.n	8002896 <HAL_TIM_PWM_Start_DMA+0x402>
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d011      	beq.n	8002896 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002882:	e008      	b.n	8002896 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e000      	b.n	8002898 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08002d5d 	.word	0x08002d5d
 80028a8:	08002e05 	.word	0x08002e05
 80028ac:	08002ccb 	.word	0x08002ccb
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40013400 	.word	0x40013400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40014400 	.word	0x40014400
 80028c0:	40014800 	.word	0x40014800
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	00010007 	.word	0x00010007

080028d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0ff      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b14      	cmp	r3, #20
 80028fe:	f200 80f0 	bhi.w	8002ae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002902:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	0800295d 	.word	0x0800295d
 800290c:	08002ae3 	.word	0x08002ae3
 8002910:	08002ae3 	.word	0x08002ae3
 8002914:	08002ae3 	.word	0x08002ae3
 8002918:	0800299d 	.word	0x0800299d
 800291c:	08002ae3 	.word	0x08002ae3
 8002920:	08002ae3 	.word	0x08002ae3
 8002924:	08002ae3 	.word	0x08002ae3
 8002928:	080029df 	.word	0x080029df
 800292c:	08002ae3 	.word	0x08002ae3
 8002930:	08002ae3 	.word	0x08002ae3
 8002934:	08002ae3 	.word	0x08002ae3
 8002938:	08002a1f 	.word	0x08002a1f
 800293c:	08002ae3 	.word	0x08002ae3
 8002940:	08002ae3 	.word	0x08002ae3
 8002944:	08002ae3 	.word	0x08002ae3
 8002948:	08002a61 	.word	0x08002a61
 800294c:	08002ae3 	.word	0x08002ae3
 8002950:	08002ae3 	.word	0x08002ae3
 8002954:	08002ae3 	.word	0x08002ae3
 8002958:	08002aa1 	.word	0x08002aa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fb1c 	bl	8002fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0208 	orr.w	r2, r2, #8
 8002976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6999      	ldr	r1, [r3, #24]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	619a      	str	r2, [r3, #24]
      break;
 800299a:	e0a5      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fb8c 	bl	80030c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6999      	ldr	r1, [r3, #24]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	021a      	lsls	r2, r3, #8
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
      break;
 80029dc:	e084      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fbf5 	bl	80031d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0208 	orr.w	r2, r2, #8
 80029f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0204 	bic.w	r2, r2, #4
 8002a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69d9      	ldr	r1, [r3, #28]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	61da      	str	r2, [r3, #28]
      break;
 8002a1c:	e064      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fc5d 	bl	80032e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69d9      	ldr	r1, [r3, #28]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	61da      	str	r2, [r3, #28]
      break;
 8002a5e:	e043      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fca6 	bl	80033b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a9e:	e023      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fcea 	bl	8003480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop

08002afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_TIM_ConfigClockSource+0x1c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0b6      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x18a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b54:	d03e      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xd8>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	f200 8087 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	f000 8086 	beq.w	8002c72 <HAL_TIM_ConfigClockSource+0x176>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6a:	d87f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xaa>
 8002b70:	2b70      	cmp	r3, #112	; 0x70
 8002b72:	d87b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d050      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x11e>
 8002b78:	2b60      	cmp	r3, #96	; 0x60
 8002b7a:	d877      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d03c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xfe>
 8002b80:	2b50      	cmp	r3, #80	; 0x50
 8002b82:	d873      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d058      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x13e>
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d86f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d064      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15e>
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d86b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d060      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15e>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d867      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15e>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d05a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15e>
 8002ba4:	e062      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	f000 fd43 	bl	8003640 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	f000 fd2c 	bl	8003640 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fca0 	bl	800354c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	; 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fcf9 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8002c18:	e02c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fcbf 	bl	80035aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	; 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fce9 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8002c38:	e01c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fc80 	bl	800354c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fcd9 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8002c58:	e00c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 fcd0 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d107      	bne.n	8002cf2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	e02a      	b.n	8002d48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0a:	e01d      	b.n	8002d48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d107      	bne.n	8002d26 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d24:	e010      	b.n	8002d48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2208      	movs	r2, #8
 8002d34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d3e:	e003      	b.n	8002d48 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ffb4 	bl	8002cb6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d10b      	bne.n	8002d8c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d136      	bne.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8a:	e031      	b.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10b      	bne.n	8002dae <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d125      	bne.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	e020      	b.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d10b      	bne.n	8002dd0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d114      	bne.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dce:	e00f      	b.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10a      	bne.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff4c 	bl	8002c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d103      	bne.n	8002e24 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	771a      	strb	r2, [r3, #28]
 8002e22:	e019      	b.n	8002e58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d103      	bne.n	8002e36 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2202      	movs	r2, #2
 8002e32:	771a      	strb	r2, [r3, #28]
 8002e34:	e010      	b.n	8002e58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d103      	bne.n	8002e48 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2204      	movs	r2, #4
 8002e44:	771a      	strb	r2, [r3, #28]
 8002e46:	e007      	b.n	8002e58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d102      	bne.n	8002e58 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2208      	movs	r2, #8
 8002e56:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff ff22 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <TIM_Base_SetConfig+0x114>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d00f      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <TIM_Base_SetConfig+0x118>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00b      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <TIM_Base_SetConfig+0x11c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <TIM_Base_SetConfig+0x120>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <TIM_Base_SetConfig+0x124>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d108      	bne.n	8002ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <TIM_Base_SetConfig+0x114>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <TIM_Base_SetConfig+0x118>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <TIM_Base_SetConfig+0x11c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <TIM_Base_SetConfig+0x120>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <TIM_Base_SetConfig+0x124>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <TIM_Base_SetConfig+0x128>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <TIM_Base_SetConfig+0x12c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <TIM_Base_SetConfig+0x130>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <TIM_Base_SetConfig+0x124>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <TIM_Base_SetConfig+0x128>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <TIM_Base_SetConfig+0x12c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <TIM_Base_SetConfig+0x130>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40013400 	.word	0x40013400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0201 	bic.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <TIM_OC1_SetConfig+0x10c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_OC1_SetConfig+0x80>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <TIM_OC1_SetConfig+0x110>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_OC1_SetConfig+0x80>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <TIM_OC1_SetConfig+0x114>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_OC1_SetConfig+0x80>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <TIM_OC1_SetConfig+0x118>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_OC1_SetConfig+0x80>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a28      	ldr	r2, [pc, #160]	; (80030bc <TIM_OC1_SetConfig+0x11c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10c      	bne.n	800303a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0308 	bic.w	r3, r3, #8
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <TIM_OC1_SetConfig+0x10c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00f      	beq.n	8003062 <TIM_OC1_SetConfig+0xc2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <TIM_OC1_SetConfig+0x110>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00b      	beq.n	8003062 <TIM_OC1_SetConfig+0xc2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <TIM_OC1_SetConfig+0x114>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <TIM_OC1_SetConfig+0xc2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <TIM_OC1_SetConfig+0x118>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <TIM_OC1_SetConfig+0xc2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <TIM_OC1_SetConfig+0x11c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d111      	bne.n	8003086 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800

080030c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 0210 	bic.w	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0320 	bic.w	r3, r3, #32
 800310e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <TIM_OC2_SetConfig+0x100>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC2_SetConfig+0x6c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <TIM_OC2_SetConfig+0x104>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10d      	bne.n	8003148 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <TIM_OC2_SetConfig+0x100>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00f      	beq.n	8003170 <TIM_OC2_SetConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <TIM_OC2_SetConfig+0x104>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_OC2_SetConfig+0xb0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <TIM_OC2_SetConfig+0x108>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_OC2_SetConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <TIM_OC2_SetConfig+0x10c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_OC2_SetConfig+0xb0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_OC2_SetConfig+0x110>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d113      	bne.n	8003198 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <TIM_OC3_SetConfig+0xfc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC3_SetConfig+0x6a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <TIM_OC3_SetConfig+0x100>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <TIM_OC3_SetConfig+0xfc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00f      	beq.n	8003282 <TIM_OC3_SetConfig+0xae>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <TIM_OC3_SetConfig+0x100>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_OC3_SetConfig+0xae>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <TIM_OC3_SetConfig+0x104>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_OC3_SetConfig+0xae>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <TIM_OC3_SetConfig+0x108>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_OC3_SetConfig+0xae>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <TIM_OC3_SetConfig+0x10c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d113      	bne.n	80032aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40013400 	.word	0x40013400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	031b      	lsls	r3, r3, #12
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <TIM_OC4_SetConfig+0xc0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00f      	beq.n	8003368 <TIM_OC4_SetConfig+0x84>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <TIM_OC4_SetConfig+0xc4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_OC4_SetConfig+0x84>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a16      	ldr	r2, [pc, #88]	; (80033ac <TIM_OC4_SetConfig+0xc8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_OC4_SetConfig+0x84>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM_OC4_SetConfig+0xcc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_OC4_SetConfig+0x84>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <TIM_OC4_SetConfig+0xd0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40013400 	.word	0x40013400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <TIM_OC5_SetConfig+0xb4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00f      	beq.n	8003432 <TIM_OC5_SetConfig+0x7a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <TIM_OC5_SetConfig+0xb8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_OC5_SetConfig+0x7a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <TIM_OC5_SetConfig+0xbc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_OC5_SetConfig+0x7a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <TIM_OC5_SetConfig+0xc0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_OC5_SetConfig+0x7a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <TIM_OC5_SetConfig+0xc4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d109      	bne.n	8003446 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	051b      	lsls	r3, r3, #20
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <TIM_OC6_SetConfig+0xb8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00f      	beq.n	80034fc <TIM_OC6_SetConfig+0x7c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a17      	ldr	r2, [pc, #92]	; (800353c <TIM_OC6_SetConfig+0xbc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_OC6_SetConfig+0x7c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <TIM_OC6_SetConfig+0xc0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <TIM_OC6_SetConfig+0x7c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <TIM_OC6_SetConfig+0xc4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_OC6_SetConfig+0x7c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <TIM_OC6_SetConfig+0xc8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d109      	bne.n	8003510 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40013400 	.word	0x40013400
 8003540:	40014000 	.word	0x40014000
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800

0800354c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0201 	bic.w	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 030a 	bic.w	r3, r3, #10
 8003588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f023 0210 	bic.w	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	f043 0307 	orr.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	021a      	lsls	r2, r3, #8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	431a      	orrs	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e068      	b.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2e      	ldr	r2, [pc, #184]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2d      	ldr	r2, [pc, #180]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800371e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003730:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d018      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10c      	bne.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4313      	orrs	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40013400 	.word	0x40013400
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40014000 	.word	0x40014000

080037dc <rand>:
 80037dc:	4b16      	ldr	r3, [pc, #88]	; (8003838 <rand+0x5c>)
 80037de:	b510      	push	{r4, lr}
 80037e0:	681c      	ldr	r4, [r3, #0]
 80037e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037e4:	b9b3      	cbnz	r3, 8003814 <rand+0x38>
 80037e6:	2018      	movs	r0, #24
 80037e8:	f000 fa22 	bl	8003c30 <malloc>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6320      	str	r0, [r4, #48]	; 0x30
 80037f0:	b920      	cbnz	r0, 80037fc <rand+0x20>
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <rand+0x60>)
 80037f4:	4812      	ldr	r0, [pc, #72]	; (8003840 <rand+0x64>)
 80037f6:	2152      	movs	r1, #82	; 0x52
 80037f8:	f000 f9b0 	bl	8003b5c <__assert_func>
 80037fc:	4911      	ldr	r1, [pc, #68]	; (8003844 <rand+0x68>)
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <rand+0x6c>)
 8003800:	e9c0 1300 	strd	r1, r3, [r0]
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <rand+0x70>)
 8003806:	6083      	str	r3, [r0, #8]
 8003808:	230b      	movs	r3, #11
 800380a:	8183      	strh	r3, [r0, #12]
 800380c:	2100      	movs	r1, #0
 800380e:	2001      	movs	r0, #1
 8003810:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003816:	480e      	ldr	r0, [pc, #56]	; (8003850 <rand+0x74>)
 8003818:	690b      	ldr	r3, [r1, #16]
 800381a:	694c      	ldr	r4, [r1, #20]
 800381c:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <rand+0x78>)
 800381e:	4358      	muls	r0, r3
 8003820:	fb02 0004 	mla	r0, r2, r4, r0
 8003824:	fba3 3202 	umull	r3, r2, r3, r2
 8003828:	3301      	adds	r3, #1
 800382a:	eb40 0002 	adc.w	r0, r0, r2
 800382e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003832:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003836:	bd10      	pop	{r4, pc}
 8003838:	20000064 	.word	0x20000064
 800383c:	08004900 	.word	0x08004900
 8003840:	08004917 	.word	0x08004917
 8003844:	abcd330e 	.word	0xabcd330e
 8003848:	e66d1234 	.word	0xe66d1234
 800384c:	0005deec 	.word	0x0005deec
 8003850:	5851f42d 	.word	0x5851f42d
 8003854:	4c957f2d 	.word	0x4c957f2d

08003858 <std>:
 8003858:	2300      	movs	r3, #0
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
 800385e:	e9c0 3300 	strd	r3, r3, [r0]
 8003862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003866:	6083      	str	r3, [r0, #8]
 8003868:	8181      	strh	r1, [r0, #12]
 800386a:	6643      	str	r3, [r0, #100]	; 0x64
 800386c:	81c2      	strh	r2, [r0, #14]
 800386e:	6183      	str	r3, [r0, #24]
 8003870:	4619      	mov	r1, r3
 8003872:	2208      	movs	r2, #8
 8003874:	305c      	adds	r0, #92	; 0x5c
 8003876:	f000 f8f4 	bl	8003a62 <memset>
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <std+0x58>)
 800387c:	6263      	str	r3, [r4, #36]	; 0x24
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <std+0x5c>)
 8003880:	62a3      	str	r3, [r4, #40]	; 0x28
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <std+0x60>)
 8003884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <std+0x64>)
 8003888:	6323      	str	r3, [r4, #48]	; 0x30
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <std+0x68>)
 800388c:	6224      	str	r4, [r4, #32]
 800388e:	429c      	cmp	r4, r3
 8003890:	d006      	beq.n	80038a0 <std+0x48>
 8003892:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003896:	4294      	cmp	r4, r2
 8003898:	d002      	beq.n	80038a0 <std+0x48>
 800389a:	33d0      	adds	r3, #208	; 0xd0
 800389c:	429c      	cmp	r4, r3
 800389e:	d105      	bne.n	80038ac <std+0x54>
 80038a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a8:	f000 b954 	b.w	8003b54 <__retarget_lock_init_recursive>
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	bf00      	nop
 80038b0:	080039dd 	.word	0x080039dd
 80038b4:	080039ff 	.word	0x080039ff
 80038b8:	08003a37 	.word	0x08003a37
 80038bc:	08003a5b 	.word	0x08003a5b
 80038c0:	200001f4 	.word	0x200001f4

080038c4 <stdio_exit_handler>:
 80038c4:	4a02      	ldr	r2, [pc, #8]	; (80038d0 <stdio_exit_handler+0xc>)
 80038c6:	4903      	ldr	r1, [pc, #12]	; (80038d4 <stdio_exit_handler+0x10>)
 80038c8:	4803      	ldr	r0, [pc, #12]	; (80038d8 <stdio_exit_handler+0x14>)
 80038ca:	f000 b869 	b.w	80039a0 <_fwalk_sglue>
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	08003ea5 	.word	0x08003ea5
 80038d8:	20000018 	.word	0x20000018

080038dc <cleanup_stdio>:
 80038dc:	6841      	ldr	r1, [r0, #4]
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <cleanup_stdio+0x34>)
 80038e0:	4299      	cmp	r1, r3
 80038e2:	b510      	push	{r4, lr}
 80038e4:	4604      	mov	r4, r0
 80038e6:	d001      	beq.n	80038ec <cleanup_stdio+0x10>
 80038e8:	f000 fadc 	bl	8003ea4 <_fflush_r>
 80038ec:	68a1      	ldr	r1, [r4, #8]
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <cleanup_stdio+0x38>)
 80038f0:	4299      	cmp	r1, r3
 80038f2:	d002      	beq.n	80038fa <cleanup_stdio+0x1e>
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fad5 	bl	8003ea4 <_fflush_r>
 80038fa:	68e1      	ldr	r1, [r4, #12]
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <cleanup_stdio+0x3c>)
 80038fe:	4299      	cmp	r1, r3
 8003900:	d004      	beq.n	800390c <cleanup_stdio+0x30>
 8003902:	4620      	mov	r0, r4
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003908:	f000 bacc 	b.w	8003ea4 <_fflush_r>
 800390c:	bd10      	pop	{r4, pc}
 800390e:	bf00      	nop
 8003910:	200001f4 	.word	0x200001f4
 8003914:	2000025c 	.word	0x2000025c
 8003918:	200002c4 	.word	0x200002c4

0800391c <global_stdio_init.part.0>:
 800391c:	b510      	push	{r4, lr}
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <global_stdio_init.part.0+0x30>)
 8003920:	4c0b      	ldr	r4, [pc, #44]	; (8003950 <global_stdio_init.part.0+0x34>)
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <global_stdio_init.part.0+0x38>)
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	4620      	mov	r0, r4
 8003928:	2200      	movs	r2, #0
 800392a:	2104      	movs	r1, #4
 800392c:	f7ff ff94 	bl	8003858 <std>
 8003930:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003934:	2201      	movs	r2, #1
 8003936:	2109      	movs	r1, #9
 8003938:	f7ff ff8e 	bl	8003858 <std>
 800393c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003940:	2202      	movs	r2, #2
 8003942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003946:	2112      	movs	r1, #18
 8003948:	f7ff bf86 	b.w	8003858 <std>
 800394c:	2000032c 	.word	0x2000032c
 8003950:	200001f4 	.word	0x200001f4
 8003954:	080038c5 	.word	0x080038c5

08003958 <__sfp_lock_acquire>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__sfp_lock_acquire+0x8>)
 800395a:	f000 b8fc 	b.w	8003b56 <__retarget_lock_acquire_recursive>
 800395e:	bf00      	nop
 8003960:	20000335 	.word	0x20000335

08003964 <__sfp_lock_release>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__sfp_lock_release+0x8>)
 8003966:	f000 b8f7 	b.w	8003b58 <__retarget_lock_release_recursive>
 800396a:	bf00      	nop
 800396c:	20000335 	.word	0x20000335

08003970 <__sinit>:
 8003970:	b510      	push	{r4, lr}
 8003972:	4604      	mov	r4, r0
 8003974:	f7ff fff0 	bl	8003958 <__sfp_lock_acquire>
 8003978:	6a23      	ldr	r3, [r4, #32]
 800397a:	b11b      	cbz	r3, 8003984 <__sinit+0x14>
 800397c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003980:	f7ff bff0 	b.w	8003964 <__sfp_lock_release>
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__sinit+0x28>)
 8003986:	6223      	str	r3, [r4, #32]
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__sinit+0x2c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f5      	bne.n	800397c <__sinit+0xc>
 8003990:	f7ff ffc4 	bl	800391c <global_stdio_init.part.0>
 8003994:	e7f2      	b.n	800397c <__sinit+0xc>
 8003996:	bf00      	nop
 8003998:	080038dd 	.word	0x080038dd
 800399c:	2000032c 	.word	0x2000032c

080039a0 <_fwalk_sglue>:
 80039a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a4:	4607      	mov	r7, r0
 80039a6:	4688      	mov	r8, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	2600      	movs	r6, #0
 80039ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039b0:	f1b9 0901 	subs.w	r9, r9, #1
 80039b4:	d505      	bpl.n	80039c2 <_fwalk_sglue+0x22>
 80039b6:	6824      	ldr	r4, [r4, #0]
 80039b8:	2c00      	cmp	r4, #0
 80039ba:	d1f7      	bne.n	80039ac <_fwalk_sglue+0xc>
 80039bc:	4630      	mov	r0, r6
 80039be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c2:	89ab      	ldrh	r3, [r5, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d907      	bls.n	80039d8 <_fwalk_sglue+0x38>
 80039c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039cc:	3301      	adds	r3, #1
 80039ce:	d003      	beq.n	80039d8 <_fwalk_sglue+0x38>
 80039d0:	4629      	mov	r1, r5
 80039d2:	4638      	mov	r0, r7
 80039d4:	47c0      	blx	r8
 80039d6:	4306      	orrs	r6, r0
 80039d8:	3568      	adds	r5, #104	; 0x68
 80039da:	e7e9      	b.n	80039b0 <_fwalk_sglue+0x10>

080039dc <__sread>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	f000 f868 	bl	8003ab8 <_read_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bfab      	itete	ge
 80039ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ee:	89a3      	ldrhlt	r3, [r4, #12]
 80039f0:	181b      	addge	r3, r3, r0
 80039f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039f6:	bfac      	ite	ge
 80039f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039fa:	81a3      	strhlt	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__swrite>:
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	461f      	mov	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	05db      	lsls	r3, r3, #23
 8003a08:	4605      	mov	r5, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1e>
 8003a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a14:	2302      	movs	r3, #2
 8003a16:	2200      	movs	r2, #0
 8003a18:	f000 f83c 	bl	8003a94 <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f000 b853 	b.w	8003adc <_write_r>

08003a36 <__sseek>:
 8003a36:	b510      	push	{r4, lr}
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 f829 	bl	8003a94 <_lseek_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	bf15      	itete	ne
 8003a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a52:	81a3      	strheq	r3, [r4, #12]
 8003a54:	bf18      	it	ne
 8003a56:	81a3      	strhne	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__sclose>:
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 b809 	b.w	8003a74 <_close_r>

08003a62 <memset>:
 8003a62:	4402      	add	r2, r0
 8003a64:	4603      	mov	r3, r0
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d100      	bne.n	8003a6c <memset+0xa>
 8003a6a:	4770      	bx	lr
 8003a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8003a70:	e7f9      	b.n	8003a66 <memset+0x4>
	...

08003a74 <_close_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4d06      	ldr	r5, [pc, #24]	; (8003a90 <_close_r+0x1c>)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fc fe11 	bl	80006a6 <_close>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_close_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_close_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	20000330 	.word	0x20000330

08003a94 <_lseek_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4d07      	ldr	r5, [pc, #28]	; (8003ab4 <_lseek_r+0x20>)
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	602a      	str	r2, [r5, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7fc fe26 	bl	80006f4 <_lseek>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_lseek_r+0x1e>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_lseek_r+0x1e>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000330 	.word	0x20000330

08003ab8 <_read_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4d07      	ldr	r5, [pc, #28]	; (8003ad8 <_read_r+0x20>)
 8003abc:	4604      	mov	r4, r0
 8003abe:	4608      	mov	r0, r1
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	602a      	str	r2, [r5, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f7fc fdb4 	bl	8000634 <_read>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_read_r+0x1e>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_read_r+0x1e>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000330 	.word	0x20000330

08003adc <_write_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_write_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fc fdbf 	bl	800066e <_write>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_write_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_write_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	20000330 	.word	0x20000330

08003b00 <__errno>:
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <__errno+0x8>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000064 	.word	0x20000064

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 fe42 	bl	80047a8 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	080049e0 	.word	0x080049e0
 8003b48:	080049e0 	.word	0x080049e0
 8003b4c:	080049e0 	.word	0x080049e0
 8003b50:	080049e4 	.word	0x080049e4

08003b54 <__retarget_lock_init_recursive>:
 8003b54:	4770      	bx	lr

08003b56 <__retarget_lock_acquire_recursive>:
 8003b56:	4770      	bx	lr

08003b58 <__retarget_lock_release_recursive>:
 8003b58:	4770      	bx	lr
	...

08003b5c <__assert_func>:
 8003b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b5e:	4614      	mov	r4, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <__assert_func+0x2c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4605      	mov	r5, r0
 8003b68:	68d8      	ldr	r0, [r3, #12]
 8003b6a:	b14c      	cbz	r4, 8003b80 <__assert_func+0x24>
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <__assert_func+0x30>)
 8003b6e:	9100      	str	r1, [sp, #0]
 8003b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <__assert_func+0x34>)
 8003b76:	462b      	mov	r3, r5
 8003b78:	f000 f9bc 	bl	8003ef4 <fiprintf>
 8003b7c:	f000 f9dc 	bl	8003f38 <abort>
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__assert_func+0x38>)
 8003b82:	461c      	mov	r4, r3
 8003b84:	e7f3      	b.n	8003b6e <__assert_func+0x12>
 8003b86:	bf00      	nop
 8003b88:	20000064 	.word	0x20000064
 8003b8c:	0800496f 	.word	0x0800496f
 8003b90:	0800497c 	.word	0x0800497c
 8003b94:	080049aa 	.word	0x080049aa

08003b98 <_free_r>:
 8003b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d044      	beq.n	8003c28 <_free_r+0x90>
 8003b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba2:	9001      	str	r0, [sp, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8003baa:	bfb8      	it	lt
 8003bac:	18e4      	addlt	r4, r4, r3
 8003bae:	f000 f8e7 	bl	8003d80 <__malloc_lock>
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <_free_r+0x94>)
 8003bb4:	9801      	ldr	r0, [sp, #4]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	b933      	cbnz	r3, 8003bc8 <_free_r+0x30>
 8003bba:	6063      	str	r3, [r4, #4]
 8003bbc:	6014      	str	r4, [r2, #0]
 8003bbe:	b003      	add	sp, #12
 8003bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bc4:	f000 b8e2 	b.w	8003d8c <__malloc_unlock>
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	d908      	bls.n	8003bde <_free_r+0x46>
 8003bcc:	6825      	ldr	r5, [r4, #0]
 8003bce:	1961      	adds	r1, r4, r5
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	bf01      	itttt	eq
 8003bd4:	6819      	ldreq	r1, [r3, #0]
 8003bd6:	685b      	ldreq	r3, [r3, #4]
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	e7ed      	b.n	8003bba <_free_r+0x22>
 8003bde:	461a      	mov	r2, r3
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b10b      	cbz	r3, 8003be8 <_free_r+0x50>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d9fa      	bls.n	8003bde <_free_r+0x46>
 8003be8:	6811      	ldr	r1, [r2, #0]
 8003bea:	1855      	adds	r5, r2, r1
 8003bec:	42a5      	cmp	r5, r4
 8003bee:	d10b      	bne.n	8003c08 <_free_r+0x70>
 8003bf0:	6824      	ldr	r4, [r4, #0]
 8003bf2:	4421      	add	r1, r4
 8003bf4:	1854      	adds	r4, r2, r1
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	d1e0      	bne.n	8003bbe <_free_r+0x26>
 8003bfc:	681c      	ldr	r4, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	6053      	str	r3, [r2, #4]
 8003c02:	440c      	add	r4, r1
 8003c04:	6014      	str	r4, [r2, #0]
 8003c06:	e7da      	b.n	8003bbe <_free_r+0x26>
 8003c08:	d902      	bls.n	8003c10 <_free_r+0x78>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	e7d6      	b.n	8003bbe <_free_r+0x26>
 8003c10:	6825      	ldr	r5, [r4, #0]
 8003c12:	1961      	adds	r1, r4, r5
 8003c14:	428b      	cmp	r3, r1
 8003c16:	bf04      	itt	eq
 8003c18:	6819      	ldreq	r1, [r3, #0]
 8003c1a:	685b      	ldreq	r3, [r3, #4]
 8003c1c:	6063      	str	r3, [r4, #4]
 8003c1e:	bf04      	itt	eq
 8003c20:	1949      	addeq	r1, r1, r5
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	6054      	str	r4, [r2, #4]
 8003c26:	e7ca      	b.n	8003bbe <_free_r+0x26>
 8003c28:	b003      	add	sp, #12
 8003c2a:	bd30      	pop	{r4, r5, pc}
 8003c2c:	20000338 	.word	0x20000338

08003c30 <malloc>:
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <malloc+0xc>)
 8003c32:	4601      	mov	r1, r0
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f000 b823 	b.w	8003c80 <_malloc_r>
 8003c3a:	bf00      	nop
 8003c3c:	20000064 	.word	0x20000064

08003c40 <sbrk_aligned>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	4e0e      	ldr	r6, [pc, #56]	; (8003c7c <sbrk_aligned+0x3c>)
 8003c44:	460c      	mov	r4, r1
 8003c46:	6831      	ldr	r1, [r6, #0]
 8003c48:	4605      	mov	r5, r0
 8003c4a:	b911      	cbnz	r1, 8003c52 <sbrk_aligned+0x12>
 8003c4c:	f000 f964 	bl	8003f18 <_sbrk_r>
 8003c50:	6030      	str	r0, [r6, #0]
 8003c52:	4621      	mov	r1, r4
 8003c54:	4628      	mov	r0, r5
 8003c56:	f000 f95f 	bl	8003f18 <_sbrk_r>
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	d00a      	beq.n	8003c74 <sbrk_aligned+0x34>
 8003c5e:	1cc4      	adds	r4, r0, #3
 8003c60:	f024 0403 	bic.w	r4, r4, #3
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d007      	beq.n	8003c78 <sbrk_aligned+0x38>
 8003c68:	1a21      	subs	r1, r4, r0
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 f954 	bl	8003f18 <_sbrk_r>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d101      	bne.n	8003c78 <sbrk_aligned+0x38>
 8003c74:	f04f 34ff 	mov.w	r4, #4294967295
 8003c78:	4620      	mov	r0, r4
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	2000033c 	.word	0x2000033c

08003c80 <_malloc_r>:
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c84:	1ccd      	adds	r5, r1, #3
 8003c86:	f025 0503 	bic.w	r5, r5, #3
 8003c8a:	3508      	adds	r5, #8
 8003c8c:	2d0c      	cmp	r5, #12
 8003c8e:	bf38      	it	cc
 8003c90:	250c      	movcc	r5, #12
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	4607      	mov	r7, r0
 8003c96:	db01      	blt.n	8003c9c <_malloc_r+0x1c>
 8003c98:	42a9      	cmp	r1, r5
 8003c9a:	d905      	bls.n	8003ca8 <_malloc_r+0x28>
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d7c <_malloc_r+0xfc>
 8003cac:	f000 f868 	bl	8003d80 <__malloc_lock>
 8003cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	bb5c      	cbnz	r4, 8003d10 <_malloc_r+0x90>
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7ff ffc0 	bl	8003c40 <sbrk_aligned>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	d155      	bne.n	8003d72 <_malloc_r+0xf2>
 8003cc6:	f8d8 4000 	ldr.w	r4, [r8]
 8003cca:	4626      	mov	r6, r4
 8003ccc:	2e00      	cmp	r6, #0
 8003cce:	d145      	bne.n	8003d5c <_malloc_r+0xdc>
 8003cd0:	2c00      	cmp	r4, #0
 8003cd2:	d048      	beq.n	8003d66 <_malloc_r+0xe6>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	4638      	mov	r0, r7
 8003cda:	eb04 0903 	add.w	r9, r4, r3
 8003cde:	f000 f91b 	bl	8003f18 <_sbrk_r>
 8003ce2:	4581      	cmp	r9, r0
 8003ce4:	d13f      	bne.n	8003d66 <_malloc_r+0xe6>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	1a6d      	subs	r5, r5, r1
 8003cea:	4629      	mov	r1, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff ffa7 	bl	8003c40 <sbrk_aligned>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d037      	beq.n	8003d66 <_malloc_r+0xe6>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	442b      	add	r3, r5
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d038      	beq.n	8003d76 <_malloc_r+0xf6>
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	42a2      	cmp	r2, r4
 8003d08:	d12b      	bne.n	8003d62 <_malloc_r+0xe2>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	e00f      	b.n	8003d30 <_malloc_r+0xb0>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	1b52      	subs	r2, r2, r5
 8003d14:	d41f      	bmi.n	8003d56 <_malloc_r+0xd6>
 8003d16:	2a0b      	cmp	r2, #11
 8003d18:	d917      	bls.n	8003d4a <_malloc_r+0xca>
 8003d1a:	1961      	adds	r1, r4, r5
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	bf18      	it	ne
 8003d22:	6059      	strne	r1, [r3, #4]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	bf08      	it	eq
 8003d28:	f8c8 1000 	streq.w	r1, [r8]
 8003d2c:	5162      	str	r2, [r4, r5]
 8003d2e:	604b      	str	r3, [r1, #4]
 8003d30:	4638      	mov	r0, r7
 8003d32:	f104 060b 	add.w	r6, r4, #11
 8003d36:	f000 f829 	bl	8003d8c <__malloc_unlock>
 8003d3a:	f026 0607 	bic.w	r6, r6, #7
 8003d3e:	1d23      	adds	r3, r4, #4
 8003d40:	1af2      	subs	r2, r6, r3
 8003d42:	d0ae      	beq.n	8003ca2 <_malloc_r+0x22>
 8003d44:	1b9b      	subs	r3, r3, r6
 8003d46:	50a3      	str	r3, [r4, r2]
 8003d48:	e7ab      	b.n	8003ca2 <_malloc_r+0x22>
 8003d4a:	42a3      	cmp	r3, r4
 8003d4c:	6862      	ldr	r2, [r4, #4]
 8003d4e:	d1dd      	bne.n	8003d0c <_malloc_r+0x8c>
 8003d50:	f8c8 2000 	str.w	r2, [r8]
 8003d54:	e7ec      	b.n	8003d30 <_malloc_r+0xb0>
 8003d56:	4623      	mov	r3, r4
 8003d58:	6864      	ldr	r4, [r4, #4]
 8003d5a:	e7ac      	b.n	8003cb6 <_malloc_r+0x36>
 8003d5c:	4634      	mov	r4, r6
 8003d5e:	6876      	ldr	r6, [r6, #4]
 8003d60:	e7b4      	b.n	8003ccc <_malloc_r+0x4c>
 8003d62:	4613      	mov	r3, r2
 8003d64:	e7cc      	b.n	8003d00 <_malloc_r+0x80>
 8003d66:	230c      	movs	r3, #12
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f000 f80e 	bl	8003d8c <__malloc_unlock>
 8003d70:	e797      	b.n	8003ca2 <_malloc_r+0x22>
 8003d72:	6025      	str	r5, [r4, #0]
 8003d74:	e7dc      	b.n	8003d30 <_malloc_r+0xb0>
 8003d76:	605b      	str	r3, [r3, #4]
 8003d78:	deff      	udf	#255	; 0xff
 8003d7a:	bf00      	nop
 8003d7c:	20000338 	.word	0x20000338

08003d80 <__malloc_lock>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__malloc_lock+0x8>)
 8003d82:	f7ff bee8 	b.w	8003b56 <__retarget_lock_acquire_recursive>
 8003d86:	bf00      	nop
 8003d88:	20000334 	.word	0x20000334

08003d8c <__malloc_unlock>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__malloc_unlock+0x8>)
 8003d8e:	f7ff bee3 	b.w	8003b58 <__retarget_lock_release_recursive>
 8003d92:	bf00      	nop
 8003d94:	20000334 	.word	0x20000334

08003d98 <__sflush_r>:
 8003d98:	898a      	ldrh	r2, [r1, #12]
 8003d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9e:	4605      	mov	r5, r0
 8003da0:	0710      	lsls	r0, r2, #28
 8003da2:	460c      	mov	r4, r1
 8003da4:	d458      	bmi.n	8003e58 <__sflush_r+0xc0>
 8003da6:	684b      	ldr	r3, [r1, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dc05      	bgt.n	8003db8 <__sflush_r+0x20>
 8003dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	dc02      	bgt.n	8003db8 <__sflush_r+0x20>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d0f9      	beq.n	8003db2 <__sflush_r+0x1a>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dc4:	682f      	ldr	r7, [r5, #0]
 8003dc6:	6a21      	ldr	r1, [r4, #32]
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	d032      	beq.n	8003e32 <__sflush_r+0x9a>
 8003dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	075a      	lsls	r2, r3, #29
 8003dd2:	d505      	bpl.n	8003de0 <__sflush_r+0x48>
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	1ac0      	subs	r0, r0, r3
 8003dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dda:	b10b      	cbz	r3, 8003de0 <__sflush_r+0x48>
 8003ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dde:	1ac0      	subs	r0, r0, r3
 8003de0:	2300      	movs	r3, #0
 8003de2:	4602      	mov	r2, r0
 8003de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003de6:	6a21      	ldr	r1, [r4, #32]
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b0      	blx	r6
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	d106      	bne.n	8003e00 <__sflush_r+0x68>
 8003df2:	6829      	ldr	r1, [r5, #0]
 8003df4:	291d      	cmp	r1, #29
 8003df6:	d82b      	bhi.n	8003e50 <__sflush_r+0xb8>
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <__sflush_r+0x108>)
 8003dfa:	410a      	asrs	r2, r1
 8003dfc:	07d6      	lsls	r6, r2, #31
 8003dfe:	d427      	bmi.n	8003e50 <__sflush_r+0xb8>
 8003e00:	2200      	movs	r2, #0
 8003e02:	6062      	str	r2, [r4, #4]
 8003e04:	04d9      	lsls	r1, r3, #19
 8003e06:	6922      	ldr	r2, [r4, #16]
 8003e08:	6022      	str	r2, [r4, #0]
 8003e0a:	d504      	bpl.n	8003e16 <__sflush_r+0x7e>
 8003e0c:	1c42      	adds	r2, r0, #1
 8003e0e:	d101      	bne.n	8003e14 <__sflush_r+0x7c>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b903      	cbnz	r3, 8003e16 <__sflush_r+0x7e>
 8003e14:	6560      	str	r0, [r4, #84]	; 0x54
 8003e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e18:	602f      	str	r7, [r5, #0]
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d0c9      	beq.n	8003db2 <__sflush_r+0x1a>
 8003e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e22:	4299      	cmp	r1, r3
 8003e24:	d002      	beq.n	8003e2c <__sflush_r+0x94>
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7ff feb6 	bl	8003b98 <_free_r>
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e30:	e7c0      	b.n	8003db4 <__sflush_r+0x1c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b0      	blx	r6
 8003e38:	1c41      	adds	r1, r0, #1
 8003e3a:	d1c8      	bne.n	8003dce <__sflush_r+0x36>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0c5      	beq.n	8003dce <__sflush_r+0x36>
 8003e42:	2b1d      	cmp	r3, #29
 8003e44:	d001      	beq.n	8003e4a <__sflush_r+0xb2>
 8003e46:	2b16      	cmp	r3, #22
 8003e48:	d101      	bne.n	8003e4e <__sflush_r+0xb6>
 8003e4a:	602f      	str	r7, [r5, #0]
 8003e4c:	e7b1      	b.n	8003db2 <__sflush_r+0x1a>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e54:	81a3      	strh	r3, [r4, #12]
 8003e56:	e7ad      	b.n	8003db4 <__sflush_r+0x1c>
 8003e58:	690f      	ldr	r7, [r1, #16]
 8003e5a:	2f00      	cmp	r7, #0
 8003e5c:	d0a9      	beq.n	8003db2 <__sflush_r+0x1a>
 8003e5e:	0793      	lsls	r3, r2, #30
 8003e60:	680e      	ldr	r6, [r1, #0]
 8003e62:	bf08      	it	eq
 8003e64:	694b      	ldreq	r3, [r1, #20]
 8003e66:	600f      	str	r7, [r1, #0]
 8003e68:	bf18      	it	ne
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	eba6 0807 	sub.w	r8, r6, r7
 8003e70:	608b      	str	r3, [r1, #8]
 8003e72:	f1b8 0f00 	cmp.w	r8, #0
 8003e76:	dd9c      	ble.n	8003db2 <__sflush_r+0x1a>
 8003e78:	6a21      	ldr	r1, [r4, #32]
 8003e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e7c:	4643      	mov	r3, r8
 8003e7e:	463a      	mov	r2, r7
 8003e80:	4628      	mov	r0, r5
 8003e82:	47b0      	blx	r6
 8003e84:	2800      	cmp	r0, #0
 8003e86:	dc06      	bgt.n	8003e96 <__sflush_r+0xfe>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	e78e      	b.n	8003db4 <__sflush_r+0x1c>
 8003e96:	4407      	add	r7, r0
 8003e98:	eba8 0800 	sub.w	r8, r8, r0
 8003e9c:	e7e9      	b.n	8003e72 <__sflush_r+0xda>
 8003e9e:	bf00      	nop
 8003ea0:	dfbffffe 	.word	0xdfbffffe

08003ea4 <_fflush_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	b913      	cbnz	r3, 8003eb4 <_fflush_r+0x10>
 8003eae:	2500      	movs	r5, #0
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	b118      	cbz	r0, 8003ebe <_fflush_r+0x1a>
 8003eb6:	6a03      	ldr	r3, [r0, #32]
 8003eb8:	b90b      	cbnz	r3, 8003ebe <_fflush_r+0x1a>
 8003eba:	f7ff fd59 	bl	8003970 <__sinit>
 8003ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f3      	beq.n	8003eae <_fflush_r+0xa>
 8003ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ec8:	07d0      	lsls	r0, r2, #31
 8003eca:	d404      	bmi.n	8003ed6 <_fflush_r+0x32>
 8003ecc:	0599      	lsls	r1, r3, #22
 8003ece:	d402      	bmi.n	8003ed6 <_fflush_r+0x32>
 8003ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ed2:	f7ff fe40 	bl	8003b56 <__retarget_lock_acquire_recursive>
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7ff ff5d 	bl	8003d98 <__sflush_r>
 8003ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ee0:	07da      	lsls	r2, r3, #31
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	d4e4      	bmi.n	8003eb0 <_fflush_r+0xc>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	d4e1      	bmi.n	8003eb0 <_fflush_r+0xc>
 8003eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eee:	f7ff fe33 	bl	8003b58 <__retarget_lock_release_recursive>
 8003ef2:	e7dd      	b.n	8003eb0 <_fflush_r+0xc>

08003ef4 <fiprintf>:
 8003ef4:	b40e      	push	{r1, r2, r3}
 8003ef6:	b503      	push	{r0, r1, lr}
 8003ef8:	4601      	mov	r1, r0
 8003efa:	ab03      	add	r3, sp, #12
 8003efc:	4805      	ldr	r0, [pc, #20]	; (8003f14 <fiprintf+0x20>)
 8003efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f02:	6800      	ldr	r0, [r0, #0]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	f000 f847 	bl	8003f98 <_vfiprintf_r>
 8003f0a:	b002      	add	sp, #8
 8003f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f10:	b003      	add	sp, #12
 8003f12:	4770      	bx	lr
 8003f14:	20000064 	.word	0x20000064

08003f18 <_sbrk_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d06      	ldr	r5, [pc, #24]	; (8003f34 <_sbrk_r+0x1c>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fbf4 	bl	8000710 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_sbrk_r+0x1a>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_sbrk_r+0x1a>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	20000330 	.word	0x20000330

08003f38 <abort>:
 8003f38:	b508      	push	{r3, lr}
 8003f3a:	2006      	movs	r0, #6
 8003f3c:	f000 fb94 	bl	8004668 <raise>
 8003f40:	2001      	movs	r0, #1
 8003f42:	f7fc fb6d 	bl	8000620 <_exit>

08003f46 <__sfputc_r>:
 8003f46:	6893      	ldr	r3, [r2, #8]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	b410      	push	{r4}
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	da08      	bge.n	8003f64 <__sfputc_r+0x1e>
 8003f52:	6994      	ldr	r4, [r2, #24]
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	db01      	blt.n	8003f5c <__sfputc_r+0x16>
 8003f58:	290a      	cmp	r1, #10
 8003f5a:	d103      	bne.n	8003f64 <__sfputc_r+0x1e>
 8003f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f60:	f000 bac4 	b.w	80044ec <__swbuf_r>
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	1c58      	adds	r0, r3, #1
 8003f68:	6010      	str	r0, [r2, #0]
 8003f6a:	7019      	strb	r1, [r3, #0]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <__sfputs_r>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	4606      	mov	r6, r0
 8003f78:	460f      	mov	r7, r1
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	18d5      	adds	r5, r2, r3
 8003f7e:	42ac      	cmp	r4, r5
 8003f80:	d101      	bne.n	8003f86 <__sfputs_r+0x12>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e007      	b.n	8003f96 <__sfputs_r+0x22>
 8003f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ffda 	bl	8003f46 <__sfputc_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	d1f3      	bne.n	8003f7e <__sfputs_r+0xa>
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f98 <_vfiprintf_r>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	b09d      	sub	sp, #116	; 0x74
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	4698      	mov	r8, r3
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b118      	cbz	r0, 8003fb0 <_vfiprintf_r+0x18>
 8003fa8:	6a03      	ldr	r3, [r0, #32]
 8003faa:	b90b      	cbnz	r3, 8003fb0 <_vfiprintf_r+0x18>
 8003fac:	f7ff fce0 	bl	8003970 <__sinit>
 8003fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb2:	07d9      	lsls	r1, r3, #31
 8003fb4:	d405      	bmi.n	8003fc2 <_vfiprintf_r+0x2a>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	059a      	lsls	r2, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_vfiprintf_r+0x2a>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7ff fdca 	bl	8003b56 <__retarget_lock_acquire_recursive>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	d501      	bpl.n	8003fcc <_vfiprintf_r+0x34>
 8003fc8:	692b      	ldr	r3, [r5, #16]
 8003fca:	b99b      	cbnz	r3, 8003ff4 <_vfiprintf_r+0x5c>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 faca 	bl	8004568 <__swsetup_r>
 8003fd4:	b170      	cbz	r0, 8003ff4 <_vfiprintf_r+0x5c>
 8003fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd8:	07dc      	lsls	r4, r3, #31
 8003fda:	d504      	bpl.n	8003fe6 <_vfiprintf_r+0x4e>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b01d      	add	sp, #116	; 0x74
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	89ab      	ldrh	r3, [r5, #12]
 8003fe8:	0598      	lsls	r0, r3, #22
 8003fea:	d4f7      	bmi.n	8003fdc <_vfiprintf_r+0x44>
 8003fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fee:	f7ff fdb3 	bl	8003b58 <__retarget_lock_release_recursive>
 8003ff2:	e7f3      	b.n	8003fdc <_vfiprintf_r+0x44>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004002:	2330      	movs	r3, #48	; 0x30
 8004004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80041b8 <_vfiprintf_r+0x220>
 8004008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800400c:	f04f 0901 	mov.w	r9, #1
 8004010:	4623      	mov	r3, r4
 8004012:	469a      	mov	sl, r3
 8004014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004018:	b10a      	cbz	r2, 800401e <_vfiprintf_r+0x86>
 800401a:	2a25      	cmp	r2, #37	; 0x25
 800401c:	d1f9      	bne.n	8004012 <_vfiprintf_r+0x7a>
 800401e:	ebba 0b04 	subs.w	fp, sl, r4
 8004022:	d00b      	beq.n	800403c <_vfiprintf_r+0xa4>
 8004024:	465b      	mov	r3, fp
 8004026:	4622      	mov	r2, r4
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f7ff ffa2 	bl	8003f74 <__sfputs_r>
 8004030:	3001      	adds	r0, #1
 8004032:	f000 80a9 	beq.w	8004188 <_vfiprintf_r+0x1f0>
 8004036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004038:	445a      	add	r2, fp
 800403a:	9209      	str	r2, [sp, #36]	; 0x24
 800403c:	f89a 3000 	ldrb.w	r3, [sl]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a1 	beq.w	8004188 <_vfiprintf_r+0x1f0>
 8004046:	2300      	movs	r3, #0
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004050:	f10a 0a01 	add.w	sl, sl, #1
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	9307      	str	r3, [sp, #28]
 8004058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800405c:	931a      	str	r3, [sp, #104]	; 0x68
 800405e:	4654      	mov	r4, sl
 8004060:	2205      	movs	r2, #5
 8004062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004066:	4854      	ldr	r0, [pc, #336]	; (80041b8 <_vfiprintf_r+0x220>)
 8004068:	f7fc f8b2 	bl	80001d0 <memchr>
 800406c:	9a04      	ldr	r2, [sp, #16]
 800406e:	b9d8      	cbnz	r0, 80040a8 <_vfiprintf_r+0x110>
 8004070:	06d1      	lsls	r1, r2, #27
 8004072:	bf44      	itt	mi
 8004074:	2320      	movmi	r3, #32
 8004076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800407a:	0713      	lsls	r3, r2, #28
 800407c:	bf44      	itt	mi
 800407e:	232b      	movmi	r3, #43	; 0x2b
 8004080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004084:	f89a 3000 	ldrb.w	r3, [sl]
 8004088:	2b2a      	cmp	r3, #42	; 0x2a
 800408a:	d015      	beq.n	80040b8 <_vfiprintf_r+0x120>
 800408c:	9a07      	ldr	r2, [sp, #28]
 800408e:	4654      	mov	r4, sl
 8004090:	2000      	movs	r0, #0
 8004092:	f04f 0c0a 	mov.w	ip, #10
 8004096:	4621      	mov	r1, r4
 8004098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409c:	3b30      	subs	r3, #48	; 0x30
 800409e:	2b09      	cmp	r3, #9
 80040a0:	d94d      	bls.n	800413e <_vfiprintf_r+0x1a6>
 80040a2:	b1b0      	cbz	r0, 80040d2 <_vfiprintf_r+0x13a>
 80040a4:	9207      	str	r2, [sp, #28]
 80040a6:	e014      	b.n	80040d2 <_vfiprintf_r+0x13a>
 80040a8:	eba0 0308 	sub.w	r3, r0, r8
 80040ac:	fa09 f303 	lsl.w	r3, r9, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	46a2      	mov	sl, r4
 80040b6:	e7d2      	b.n	800405e <_vfiprintf_r+0xc6>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	9103      	str	r1, [sp, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfbb      	ittet	lt
 80040c4:	425b      	neglt	r3, r3
 80040c6:	f042 0202 	orrlt.w	r2, r2, #2
 80040ca:	9307      	strge	r3, [sp, #28]
 80040cc:	9307      	strlt	r3, [sp, #28]
 80040ce:	bfb8      	it	lt
 80040d0:	9204      	strlt	r2, [sp, #16]
 80040d2:	7823      	ldrb	r3, [r4, #0]
 80040d4:	2b2e      	cmp	r3, #46	; 0x2e
 80040d6:	d10c      	bne.n	80040f2 <_vfiprintf_r+0x15a>
 80040d8:	7863      	ldrb	r3, [r4, #1]
 80040da:	2b2a      	cmp	r3, #42	; 0x2a
 80040dc:	d134      	bne.n	8004148 <_vfiprintf_r+0x1b0>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ee:	3402      	adds	r4, #2
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041c8 <_vfiprintf_r+0x230>
 80040f6:	7821      	ldrb	r1, [r4, #0]
 80040f8:	2203      	movs	r2, #3
 80040fa:	4650      	mov	r0, sl
 80040fc:	f7fc f868 	bl	80001d0 <memchr>
 8004100:	b138      	cbz	r0, 8004112 <_vfiprintf_r+0x17a>
 8004102:	9b04      	ldr	r3, [sp, #16]
 8004104:	eba0 000a 	sub.w	r0, r0, sl
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	4082      	lsls	r2, r0
 800410c:	4313      	orrs	r3, r2
 800410e:	3401      	adds	r4, #1
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004116:	4829      	ldr	r0, [pc, #164]	; (80041bc <_vfiprintf_r+0x224>)
 8004118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800411c:	2206      	movs	r2, #6
 800411e:	f7fc f857 	bl	80001d0 <memchr>
 8004122:	2800      	cmp	r0, #0
 8004124:	d03f      	beq.n	80041a6 <_vfiprintf_r+0x20e>
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <_vfiprintf_r+0x228>)
 8004128:	bb1b      	cbnz	r3, 8004172 <_vfiprintf_r+0x1da>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	3307      	adds	r3, #7
 800412e:	f023 0307 	bic.w	r3, r3, #7
 8004132:	3308      	adds	r3, #8
 8004134:	9303      	str	r3, [sp, #12]
 8004136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004138:	443b      	add	r3, r7
 800413a:	9309      	str	r3, [sp, #36]	; 0x24
 800413c:	e768      	b.n	8004010 <_vfiprintf_r+0x78>
 800413e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004142:	460c      	mov	r4, r1
 8004144:	2001      	movs	r0, #1
 8004146:	e7a6      	b.n	8004096 <_vfiprintf_r+0xfe>
 8004148:	2300      	movs	r3, #0
 800414a:	3401      	adds	r4, #1
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	4619      	mov	r1, r3
 8004150:	f04f 0c0a 	mov.w	ip, #10
 8004154:	4620      	mov	r0, r4
 8004156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800415a:	3a30      	subs	r2, #48	; 0x30
 800415c:	2a09      	cmp	r2, #9
 800415e:	d903      	bls.n	8004168 <_vfiprintf_r+0x1d0>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0c6      	beq.n	80040f2 <_vfiprintf_r+0x15a>
 8004164:	9105      	str	r1, [sp, #20]
 8004166:	e7c4      	b.n	80040f2 <_vfiprintf_r+0x15a>
 8004168:	fb0c 2101 	mla	r1, ip, r1, r2
 800416c:	4604      	mov	r4, r0
 800416e:	2301      	movs	r3, #1
 8004170:	e7f0      	b.n	8004154 <_vfiprintf_r+0x1bc>
 8004172:	ab03      	add	r3, sp, #12
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	462a      	mov	r2, r5
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <_vfiprintf_r+0x22c>)
 800417a:	a904      	add	r1, sp, #16
 800417c:	4630      	mov	r0, r6
 800417e:	f3af 8000 	nop.w
 8004182:	4607      	mov	r7, r0
 8004184:	1c78      	adds	r0, r7, #1
 8004186:	d1d6      	bne.n	8004136 <_vfiprintf_r+0x19e>
 8004188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800418a:	07d9      	lsls	r1, r3, #31
 800418c:	d405      	bmi.n	800419a <_vfiprintf_r+0x202>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	059a      	lsls	r2, r3, #22
 8004192:	d402      	bmi.n	800419a <_vfiprintf_r+0x202>
 8004194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004196:	f7ff fcdf 	bl	8003b58 <__retarget_lock_release_recursive>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	065b      	lsls	r3, r3, #25
 800419e:	f53f af1d 	bmi.w	8003fdc <_vfiprintf_r+0x44>
 80041a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a4:	e71c      	b.n	8003fe0 <_vfiprintf_r+0x48>
 80041a6:	ab03      	add	r3, sp, #12
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	462a      	mov	r2, r5
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <_vfiprintf_r+0x22c>)
 80041ae:	a904      	add	r1, sp, #16
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 f879 	bl	80042a8 <_printf_i>
 80041b6:	e7e4      	b.n	8004182 <_vfiprintf_r+0x1ea>
 80041b8:	080049ab 	.word	0x080049ab
 80041bc:	080049b5 	.word	0x080049b5
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f75 	.word	0x08003f75
 80041c8:	080049b1 	.word	0x080049b1

080041cc <_printf_common>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	4616      	mov	r6, r2
 80041d2:	4699      	mov	r9, r3
 80041d4:	688a      	ldr	r2, [r1, #8]
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041dc:	4293      	cmp	r3, r2
 80041de:	bfb8      	it	lt
 80041e0:	4613      	movlt	r3, r2
 80041e2:	6033      	str	r3, [r6, #0]
 80041e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041e8:	4607      	mov	r7, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	b10a      	cbz	r2, 80041f2 <_printf_common+0x26>
 80041ee:	3301      	adds	r3, #1
 80041f0:	6033      	str	r3, [r6, #0]
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	0699      	lsls	r1, r3, #26
 80041f6:	bf42      	ittt	mi
 80041f8:	6833      	ldrmi	r3, [r6, #0]
 80041fa:	3302      	addmi	r3, #2
 80041fc:	6033      	strmi	r3, [r6, #0]
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	f015 0506 	ands.w	r5, r5, #6
 8004204:	d106      	bne.n	8004214 <_printf_common+0x48>
 8004206:	f104 0a19 	add.w	sl, r4, #25
 800420a:	68e3      	ldr	r3, [r4, #12]
 800420c:	6832      	ldr	r2, [r6, #0]
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	42ab      	cmp	r3, r5
 8004212:	dc26      	bgt.n	8004262 <_printf_common+0x96>
 8004214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004218:	1e13      	subs	r3, r2, #0
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	bf18      	it	ne
 800421e:	2301      	movne	r3, #1
 8004220:	0692      	lsls	r2, r2, #26
 8004222:	d42b      	bmi.n	800427c <_printf_common+0xb0>
 8004224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004228:	4649      	mov	r1, r9
 800422a:	4638      	mov	r0, r7
 800422c:	47c0      	blx	r8
 800422e:	3001      	adds	r0, #1
 8004230:	d01e      	beq.n	8004270 <_printf_common+0xa4>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	6922      	ldr	r2, [r4, #16]
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	2b04      	cmp	r3, #4
 800423c:	bf02      	ittt	eq
 800423e:	68e5      	ldreq	r5, [r4, #12]
 8004240:	6833      	ldreq	r3, [r6, #0]
 8004242:	1aed      	subeq	r5, r5, r3
 8004244:	68a3      	ldr	r3, [r4, #8]
 8004246:	bf0c      	ite	eq
 8004248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800424c:	2500      	movne	r5, #0
 800424e:	4293      	cmp	r3, r2
 8004250:	bfc4      	itt	gt
 8004252:	1a9b      	subgt	r3, r3, r2
 8004254:	18ed      	addgt	r5, r5, r3
 8004256:	2600      	movs	r6, #0
 8004258:	341a      	adds	r4, #26
 800425a:	42b5      	cmp	r5, r6
 800425c:	d11a      	bne.n	8004294 <_printf_common+0xc8>
 800425e:	2000      	movs	r0, #0
 8004260:	e008      	b.n	8004274 <_printf_common+0xa8>
 8004262:	2301      	movs	r3, #1
 8004264:	4652      	mov	r2, sl
 8004266:	4649      	mov	r1, r9
 8004268:	4638      	mov	r0, r7
 800426a:	47c0      	blx	r8
 800426c:	3001      	adds	r0, #1
 800426e:	d103      	bne.n	8004278 <_printf_common+0xac>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004278:	3501      	adds	r5, #1
 800427a:	e7c6      	b.n	800420a <_printf_common+0x3e>
 800427c:	18e1      	adds	r1, r4, r3
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	2030      	movs	r0, #48	; 0x30
 8004282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004286:	4422      	add	r2, r4
 8004288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800428c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004290:	3302      	adds	r3, #2
 8004292:	e7c7      	b.n	8004224 <_printf_common+0x58>
 8004294:	2301      	movs	r3, #1
 8004296:	4622      	mov	r2, r4
 8004298:	4649      	mov	r1, r9
 800429a:	4638      	mov	r0, r7
 800429c:	47c0      	blx	r8
 800429e:	3001      	adds	r0, #1
 80042a0:	d0e6      	beq.n	8004270 <_printf_common+0xa4>
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7d9      	b.n	800425a <_printf_common+0x8e>
	...

080042a8 <_printf_i>:
 80042a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	7e0f      	ldrb	r7, [r1, #24]
 80042ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b0:	2f78      	cmp	r7, #120	; 0x78
 80042b2:	4691      	mov	r9, r2
 80042b4:	4680      	mov	r8, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	469a      	mov	sl, r3
 80042ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042be:	d807      	bhi.n	80042d0 <_printf_i+0x28>
 80042c0:	2f62      	cmp	r7, #98	; 0x62
 80042c2:	d80a      	bhi.n	80042da <_printf_i+0x32>
 80042c4:	2f00      	cmp	r7, #0
 80042c6:	f000 80d4 	beq.w	8004472 <_printf_i+0x1ca>
 80042ca:	2f58      	cmp	r7, #88	; 0x58
 80042cc:	f000 80c0 	beq.w	8004450 <_printf_i+0x1a8>
 80042d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042d8:	e03a      	b.n	8004350 <_printf_i+0xa8>
 80042da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042de:	2b15      	cmp	r3, #21
 80042e0:	d8f6      	bhi.n	80042d0 <_printf_i+0x28>
 80042e2:	a101      	add	r1, pc, #4	; (adr r1, 80042e8 <_printf_i+0x40>)
 80042e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042e8:	08004341 	.word	0x08004341
 80042ec:	08004355 	.word	0x08004355
 80042f0:	080042d1 	.word	0x080042d1
 80042f4:	080042d1 	.word	0x080042d1
 80042f8:	080042d1 	.word	0x080042d1
 80042fc:	080042d1 	.word	0x080042d1
 8004300:	08004355 	.word	0x08004355
 8004304:	080042d1 	.word	0x080042d1
 8004308:	080042d1 	.word	0x080042d1
 800430c:	080042d1 	.word	0x080042d1
 8004310:	080042d1 	.word	0x080042d1
 8004314:	08004459 	.word	0x08004459
 8004318:	08004381 	.word	0x08004381
 800431c:	08004413 	.word	0x08004413
 8004320:	080042d1 	.word	0x080042d1
 8004324:	080042d1 	.word	0x080042d1
 8004328:	0800447b 	.word	0x0800447b
 800432c:	080042d1 	.word	0x080042d1
 8004330:	08004381 	.word	0x08004381
 8004334:	080042d1 	.word	0x080042d1
 8004338:	080042d1 	.word	0x080042d1
 800433c:	0800441b 	.word	0x0800441b
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800434c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004350:	2301      	movs	r3, #1
 8004352:	e09f      	b.n	8004494 <_printf_i+0x1ec>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	682b      	ldr	r3, [r5, #0]
 8004358:	0607      	lsls	r7, r0, #24
 800435a:	f103 0104 	add.w	r1, r3, #4
 800435e:	6029      	str	r1, [r5, #0]
 8004360:	d501      	bpl.n	8004366 <_printf_i+0xbe>
 8004362:	681e      	ldr	r6, [r3, #0]
 8004364:	e003      	b.n	800436e <_printf_i+0xc6>
 8004366:	0646      	lsls	r6, r0, #25
 8004368:	d5fb      	bpl.n	8004362 <_printf_i+0xba>
 800436a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800436e:	2e00      	cmp	r6, #0
 8004370:	da03      	bge.n	800437a <_printf_i+0xd2>
 8004372:	232d      	movs	r3, #45	; 0x2d
 8004374:	4276      	negs	r6, r6
 8004376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437a:	485a      	ldr	r0, [pc, #360]	; (80044e4 <_printf_i+0x23c>)
 800437c:	230a      	movs	r3, #10
 800437e:	e012      	b.n	80043a6 <_printf_i+0xfe>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	6820      	ldr	r0, [r4, #0]
 8004384:	1d19      	adds	r1, r3, #4
 8004386:	6029      	str	r1, [r5, #0]
 8004388:	0605      	lsls	r5, r0, #24
 800438a:	d501      	bpl.n	8004390 <_printf_i+0xe8>
 800438c:	681e      	ldr	r6, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0xee>
 8004390:	0641      	lsls	r1, r0, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0xe4>
 8004394:	881e      	ldrh	r6, [r3, #0]
 8004396:	4853      	ldr	r0, [pc, #332]	; (80044e4 <_printf_i+0x23c>)
 8004398:	2f6f      	cmp	r7, #111	; 0x6f
 800439a:	bf0c      	ite	eq
 800439c:	2308      	moveq	r3, #8
 800439e:	230a      	movne	r3, #10
 80043a0:	2100      	movs	r1, #0
 80043a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043a6:	6865      	ldr	r5, [r4, #4]
 80043a8:	60a5      	str	r5, [r4, #8]
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	bfa2      	ittt	ge
 80043ae:	6821      	ldrge	r1, [r4, #0]
 80043b0:	f021 0104 	bicge.w	r1, r1, #4
 80043b4:	6021      	strge	r1, [r4, #0]
 80043b6:	b90e      	cbnz	r6, 80043bc <_printf_i+0x114>
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	d04b      	beq.n	8004454 <_printf_i+0x1ac>
 80043bc:	4615      	mov	r5, r2
 80043be:	fbb6 f1f3 	udiv	r1, r6, r3
 80043c2:	fb03 6711 	mls	r7, r3, r1, r6
 80043c6:	5dc7      	ldrb	r7, [r0, r7]
 80043c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043cc:	4637      	mov	r7, r6
 80043ce:	42bb      	cmp	r3, r7
 80043d0:	460e      	mov	r6, r1
 80043d2:	d9f4      	bls.n	80043be <_printf_i+0x116>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10b      	bne.n	80043f0 <_printf_i+0x148>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	07de      	lsls	r6, r3, #31
 80043dc:	d508      	bpl.n	80043f0 <_printf_i+0x148>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	6861      	ldr	r1, [r4, #4]
 80043e2:	4299      	cmp	r1, r3
 80043e4:	bfde      	ittt	le
 80043e6:	2330      	movle	r3, #48	; 0x30
 80043e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043f0:	1b52      	subs	r2, r2, r5
 80043f2:	6122      	str	r2, [r4, #16]
 80043f4:	f8cd a000 	str.w	sl, [sp]
 80043f8:	464b      	mov	r3, r9
 80043fa:	aa03      	add	r2, sp, #12
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff fee4 	bl	80041cc <_printf_common>
 8004404:	3001      	adds	r0, #1
 8004406:	d14a      	bne.n	800449e <_printf_i+0x1f6>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	b004      	add	sp, #16
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f043 0320 	orr.w	r3, r3, #32
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	4833      	ldr	r0, [pc, #204]	; (80044e8 <_printf_i+0x240>)
 800441c:	2778      	movs	r7, #120	; 0x78
 800441e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6829      	ldr	r1, [r5, #0]
 8004426:	061f      	lsls	r7, r3, #24
 8004428:	f851 6b04 	ldr.w	r6, [r1], #4
 800442c:	d402      	bmi.n	8004434 <_printf_i+0x18c>
 800442e:	065f      	lsls	r7, r3, #25
 8004430:	bf48      	it	mi
 8004432:	b2b6      	uxthmi	r6, r6
 8004434:	07df      	lsls	r7, r3, #31
 8004436:	bf48      	it	mi
 8004438:	f043 0320 	orrmi.w	r3, r3, #32
 800443c:	6029      	str	r1, [r5, #0]
 800443e:	bf48      	it	mi
 8004440:	6023      	strmi	r3, [r4, #0]
 8004442:	b91e      	cbnz	r6, 800444c <_printf_i+0x1a4>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	2310      	movs	r3, #16
 800444e:	e7a7      	b.n	80043a0 <_printf_i+0xf8>
 8004450:	4824      	ldr	r0, [pc, #144]	; (80044e4 <_printf_i+0x23c>)
 8004452:	e7e4      	b.n	800441e <_printf_i+0x176>
 8004454:	4615      	mov	r5, r2
 8004456:	e7bd      	b.n	80043d4 <_printf_i+0x12c>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6826      	ldr	r6, [r4, #0]
 800445c:	6961      	ldr	r1, [r4, #20]
 800445e:	1d18      	adds	r0, r3, #4
 8004460:	6028      	str	r0, [r5, #0]
 8004462:	0635      	lsls	r5, r6, #24
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	d501      	bpl.n	800446c <_printf_i+0x1c4>
 8004468:	6019      	str	r1, [r3, #0]
 800446a:	e002      	b.n	8004472 <_printf_i+0x1ca>
 800446c:	0670      	lsls	r0, r6, #25
 800446e:	d5fb      	bpl.n	8004468 <_printf_i+0x1c0>
 8004470:	8019      	strh	r1, [r3, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	4615      	mov	r5, r2
 8004478:	e7bc      	b.n	80043f4 <_printf_i+0x14c>
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	1d1a      	adds	r2, r3, #4
 800447e:	602a      	str	r2, [r5, #0]
 8004480:	681d      	ldr	r5, [r3, #0]
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	2100      	movs	r1, #0
 8004486:	4628      	mov	r0, r5
 8004488:	f7fb fea2 	bl	80001d0 <memchr>
 800448c:	b108      	cbz	r0, 8004492 <_printf_i+0x1ea>
 800448e:	1b40      	subs	r0, r0, r5
 8004490:	6060      	str	r0, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	2300      	movs	r3, #0
 8004498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800449c:	e7aa      	b.n	80043f4 <_printf_i+0x14c>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	462a      	mov	r2, r5
 80044a2:	4649      	mov	r1, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	47d0      	blx	sl
 80044a8:	3001      	adds	r0, #1
 80044aa:	d0ad      	beq.n	8004408 <_printf_i+0x160>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	079b      	lsls	r3, r3, #30
 80044b0:	d413      	bmi.n	80044da <_printf_i+0x232>
 80044b2:	68e0      	ldr	r0, [r4, #12]
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	4298      	cmp	r0, r3
 80044b8:	bfb8      	it	lt
 80044ba:	4618      	movlt	r0, r3
 80044bc:	e7a6      	b.n	800440c <_printf_i+0x164>
 80044be:	2301      	movs	r3, #1
 80044c0:	4632      	mov	r2, r6
 80044c2:	4649      	mov	r1, r9
 80044c4:	4640      	mov	r0, r8
 80044c6:	47d0      	blx	sl
 80044c8:	3001      	adds	r0, #1
 80044ca:	d09d      	beq.n	8004408 <_printf_i+0x160>
 80044cc:	3501      	adds	r5, #1
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	9903      	ldr	r1, [sp, #12]
 80044d2:	1a5b      	subs	r3, r3, r1
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	dcf2      	bgt.n	80044be <_printf_i+0x216>
 80044d8:	e7eb      	b.n	80044b2 <_printf_i+0x20a>
 80044da:	2500      	movs	r5, #0
 80044dc:	f104 0619 	add.w	r6, r4, #25
 80044e0:	e7f5      	b.n	80044ce <_printf_i+0x226>
 80044e2:	bf00      	nop
 80044e4:	080049bc 	.word	0x080049bc
 80044e8:	080049cd 	.word	0x080049cd

080044ec <__swbuf_r>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	460e      	mov	r6, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	4605      	mov	r5, r0
 80044f4:	b118      	cbz	r0, 80044fe <__swbuf_r+0x12>
 80044f6:	6a03      	ldr	r3, [r0, #32]
 80044f8:	b90b      	cbnz	r3, 80044fe <__swbuf_r+0x12>
 80044fa:	f7ff fa39 	bl	8003970 <__sinit>
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	071a      	lsls	r2, r3, #28
 8004506:	d525      	bpl.n	8004554 <__swbuf_r+0x68>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	b31b      	cbz	r3, 8004554 <__swbuf_r+0x68>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	6922      	ldr	r2, [r4, #16]
 8004510:	1a98      	subs	r0, r3, r2
 8004512:	6963      	ldr	r3, [r4, #20]
 8004514:	b2f6      	uxtb	r6, r6
 8004516:	4283      	cmp	r3, r0
 8004518:	4637      	mov	r7, r6
 800451a:	dc04      	bgt.n	8004526 <__swbuf_r+0x3a>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff fcc0 	bl	8003ea4 <_fflush_r>
 8004524:	b9e0      	cbnz	r0, 8004560 <__swbuf_r+0x74>
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	60a3      	str	r3, [r4, #8]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	701e      	strb	r6, [r3, #0]
 8004534:	6962      	ldr	r2, [r4, #20]
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	429a      	cmp	r2, r3
 800453a:	d004      	beq.n	8004546 <__swbuf_r+0x5a>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	07db      	lsls	r3, r3, #31
 8004540:	d506      	bpl.n	8004550 <__swbuf_r+0x64>
 8004542:	2e0a      	cmp	r6, #10
 8004544:	d104      	bne.n	8004550 <__swbuf_r+0x64>
 8004546:	4621      	mov	r1, r4
 8004548:	4628      	mov	r0, r5
 800454a:	f7ff fcab 	bl	8003ea4 <_fflush_r>
 800454e:	b938      	cbnz	r0, 8004560 <__swbuf_r+0x74>
 8004550:	4638      	mov	r0, r7
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	4621      	mov	r1, r4
 8004556:	4628      	mov	r0, r5
 8004558:	f000 f806 	bl	8004568 <__swsetup_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	d0d5      	beq.n	800450c <__swbuf_r+0x20>
 8004560:	f04f 37ff 	mov.w	r7, #4294967295
 8004564:	e7f4      	b.n	8004550 <__swbuf_r+0x64>
	...

08004568 <__swsetup_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <__swsetup_r+0xac>)
 800456c:	4605      	mov	r5, r0
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	460c      	mov	r4, r1
 8004572:	b118      	cbz	r0, 800457c <__swsetup_r+0x14>
 8004574:	6a03      	ldr	r3, [r0, #32]
 8004576:	b90b      	cbnz	r3, 800457c <__swsetup_r+0x14>
 8004578:	f7ff f9fa 	bl	8003970 <__sinit>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004582:	0718      	lsls	r0, r3, #28
 8004584:	d422      	bmi.n	80045cc <__swsetup_r+0x64>
 8004586:	06d9      	lsls	r1, r3, #27
 8004588:	d407      	bmi.n	800459a <__swsetup_r+0x32>
 800458a:	2309      	movs	r3, #9
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e034      	b.n	8004604 <__swsetup_r+0x9c>
 800459a:	0758      	lsls	r0, r3, #29
 800459c:	d512      	bpl.n	80045c4 <__swsetup_r+0x5c>
 800459e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045a0:	b141      	cbz	r1, 80045b4 <__swsetup_r+0x4c>
 80045a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a6:	4299      	cmp	r1, r3
 80045a8:	d002      	beq.n	80045b0 <__swsetup_r+0x48>
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff faf4 	bl	8003b98 <_free_r>
 80045b0:	2300      	movs	r3, #0
 80045b2:	6363      	str	r3, [r4, #52]	; 0x34
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	2300      	movs	r3, #0
 80045be:	6063      	str	r3, [r4, #4]
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	b94b      	cbnz	r3, 80045e4 <__swsetup_r+0x7c>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d003      	beq.n	80045e4 <__swsetup_r+0x7c>
 80045dc:	4621      	mov	r1, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f884 	bl	80046ec <__smakebuf_r>
 80045e4:	89a0      	ldrh	r0, [r4, #12]
 80045e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ea:	f010 0301 	ands.w	r3, r0, #1
 80045ee:	d00a      	beq.n	8004606 <__swsetup_r+0x9e>
 80045f0:	2300      	movs	r3, #0
 80045f2:	60a3      	str	r3, [r4, #8]
 80045f4:	6963      	ldr	r3, [r4, #20]
 80045f6:	425b      	negs	r3, r3
 80045f8:	61a3      	str	r3, [r4, #24]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b943      	cbnz	r3, 8004610 <__swsetup_r+0xa8>
 80045fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004602:	d1c4      	bne.n	800458e <__swsetup_r+0x26>
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	0781      	lsls	r1, r0, #30
 8004608:	bf58      	it	pl
 800460a:	6963      	ldrpl	r3, [r4, #20]
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	e7f4      	b.n	80045fa <__swsetup_r+0x92>
 8004610:	2000      	movs	r0, #0
 8004612:	e7f7      	b.n	8004604 <__swsetup_r+0x9c>
 8004614:	20000064 	.word	0x20000064

08004618 <_raise_r>:
 8004618:	291f      	cmp	r1, #31
 800461a:	b538      	push	{r3, r4, r5, lr}
 800461c:	4604      	mov	r4, r0
 800461e:	460d      	mov	r5, r1
 8004620:	d904      	bls.n	800462c <_raise_r+0x14>
 8004622:	2316      	movs	r3, #22
 8004624:	6003      	str	r3, [r0, #0]
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800462e:	b112      	cbz	r2, 8004636 <_raise_r+0x1e>
 8004630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004634:	b94b      	cbnz	r3, 800464a <_raise_r+0x32>
 8004636:	4620      	mov	r0, r4
 8004638:	f000 f830 	bl	800469c <_getpid_r>
 800463c:	462a      	mov	r2, r5
 800463e:	4601      	mov	r1, r0
 8004640:	4620      	mov	r0, r4
 8004642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004646:	f000 b817 	b.w	8004678 <_kill_r>
 800464a:	2b01      	cmp	r3, #1
 800464c:	d00a      	beq.n	8004664 <_raise_r+0x4c>
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	d103      	bne.n	800465a <_raise_r+0x42>
 8004652:	2316      	movs	r3, #22
 8004654:	6003      	str	r3, [r0, #0]
 8004656:	2001      	movs	r0, #1
 8004658:	e7e7      	b.n	800462a <_raise_r+0x12>
 800465a:	2400      	movs	r4, #0
 800465c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004660:	4628      	mov	r0, r5
 8004662:	4798      	blx	r3
 8004664:	2000      	movs	r0, #0
 8004666:	e7e0      	b.n	800462a <_raise_r+0x12>

08004668 <raise>:
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <raise+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f7ff bfd3 	b.w	8004618 <_raise_r>
 8004672:	bf00      	nop
 8004674:	20000064 	.word	0x20000064

08004678 <_kill_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d07      	ldr	r5, [pc, #28]	; (8004698 <_kill_r+0x20>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	f7fb ffbb 	bl	8000600 <_kill>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d102      	bne.n	8004694 <_kill_r+0x1c>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	b103      	cbz	r3, 8004694 <_kill_r+0x1c>
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	bd38      	pop	{r3, r4, r5, pc}
 8004696:	bf00      	nop
 8004698:	20000330 	.word	0x20000330

0800469c <_getpid_r>:
 800469c:	f7fb bfa8 	b.w	80005f0 <_getpid>

080046a0 <__swhatbuf_r>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	460c      	mov	r4, r1
 80046a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a8:	2900      	cmp	r1, #0
 80046aa:	b096      	sub	sp, #88	; 0x58
 80046ac:	4615      	mov	r5, r2
 80046ae:	461e      	mov	r6, r3
 80046b0:	da0d      	bge.n	80046ce <__swhatbuf_r+0x2e>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	bf0c      	ite	eq
 80046be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046c2:	2340      	movne	r3, #64	; 0x40
 80046c4:	2000      	movs	r0, #0
 80046c6:	6031      	str	r1, [r6, #0]
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	b016      	add	sp, #88	; 0x58
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	466a      	mov	r2, sp
 80046d0:	f000 f848 	bl	8004764 <_fstat_r>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dbec      	blt.n	80046b2 <__swhatbuf_r+0x12>
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046e2:	4259      	negs	r1, r3
 80046e4:	4159      	adcs	r1, r3
 80046e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ea:	e7eb      	b.n	80046c4 <__swhatbuf_r+0x24>

080046ec <__smakebuf_r>:
 80046ec:	898b      	ldrh	r3, [r1, #12]
 80046ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046f0:	079d      	lsls	r5, r3, #30
 80046f2:	4606      	mov	r6, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	d507      	bpl.n	8004708 <__smakebuf_r+0x1c>
 80046f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	2301      	movs	r3, #1
 8004702:	6163      	str	r3, [r4, #20]
 8004704:	b002      	add	sp, #8
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	ab01      	add	r3, sp, #4
 800470a:	466a      	mov	r2, sp
 800470c:	f7ff ffc8 	bl	80046a0 <__swhatbuf_r>
 8004710:	9900      	ldr	r1, [sp, #0]
 8004712:	4605      	mov	r5, r0
 8004714:	4630      	mov	r0, r6
 8004716:	f7ff fab3 	bl	8003c80 <_malloc_r>
 800471a:	b948      	cbnz	r0, 8004730 <__smakebuf_r+0x44>
 800471c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004720:	059a      	lsls	r2, r3, #22
 8004722:	d4ef      	bmi.n	8004704 <__smakebuf_r+0x18>
 8004724:	f023 0303 	bic.w	r3, r3, #3
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	e7e3      	b.n	80046f8 <__smakebuf_r+0xc>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	6020      	str	r0, [r4, #0]
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	81a3      	strh	r3, [r4, #12]
 800473a:	9b00      	ldr	r3, [sp, #0]
 800473c:	6163      	str	r3, [r4, #20]
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	6120      	str	r0, [r4, #16]
 8004742:	b15b      	cbz	r3, 800475c <__smakebuf_r+0x70>
 8004744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f81d 	bl	8004788 <_isatty_r>
 800474e:	b128      	cbz	r0, 800475c <__smakebuf_r+0x70>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	431d      	orrs	r5, r3
 8004760:	81a5      	strh	r5, [r4, #12]
 8004762:	e7cf      	b.n	8004704 <__smakebuf_r+0x18>

08004764 <_fstat_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d07      	ldr	r5, [pc, #28]	; (8004784 <_fstat_r+0x20>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	f7fb ffa4 	bl	80006be <_fstat>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d102      	bne.n	8004780 <_fstat_r+0x1c>
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	b103      	cbz	r3, 8004780 <_fstat_r+0x1c>
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	20000330 	.word	0x20000330

08004788 <_isatty_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4d06      	ldr	r5, [pc, #24]	; (80047a4 <_isatty_r+0x1c>)
 800478c:	2300      	movs	r3, #0
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fb ffa3 	bl	80006de <_isatty>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_isatty_r+0x1a>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_isatty_r+0x1a>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20000330 	.word	0x20000330

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr
