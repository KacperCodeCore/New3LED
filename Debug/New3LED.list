
New3LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08004948  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004948  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b466  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002148  00000000  00000000  0002b541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e1  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273ce  00000000  00000000  0002ed71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2ba  00000000  00000000  0005613f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eea63  00000000  00000000  000653f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d70  00000000  00000000  00153e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00157bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046a0 	.word	0x080046a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080046a0 	.word	0x080046a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_DMA_Init+0x38>)
 8000278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <MX_DMA_Init+0x38>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6493      	str	r3, [r2, #72]	; 0x48
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_DMA_Init+0x38>)
 8000284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f000 fd53 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f000 fd6c 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000

080002ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_GPIO_Init+0x50>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <MX_GPIO_Init+0x50>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_GPIO_Init+0x50>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80002d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f000 ff55 	bl	800119c <HAL_GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000306:	f000 fba6 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030a:	f000 f855 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030e:	f7ff ffcd 	bl	80002ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000312:	f7ff ffad 	bl	8000270 <MX_DMA_Init>
  MX_TIM3_Init();
 8000316:	f000 f9d7 	bl	80006c8 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ws2812b_init();
 800031a:	f000 faff 	bl	800091c <ws2812b_init>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(is_button_pressed){
		  uint8_t r = gamma8[rand() % 70];
 800031e:	f003 f9d9 	bl	80036d4 <rand>
 8000322:	4603      	mov	r3, r0
 8000324:	4a22      	ldr	r2, [pc, #136]	; (80003b0 <main+0xb0>)
 8000326:	fb82 1203 	smull	r1, r2, r2, r3
 800032a:	441a      	add	r2, r3
 800032c:	1191      	asrs	r1, r2, #6
 800032e:	17da      	asrs	r2, r3, #31
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	2146      	movs	r1, #70	; 0x46
 8000334:	fb01 f202 	mul.w	r2, r1, r2
 8000338:	1a9a      	subs	r2, r3, r2
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <main+0xb4>)
 800033c:	5c9b      	ldrb	r3, [r3, r2]
 800033e:	70fb      	strb	r3, [r7, #3]
		  	  uint8_t g = gamma8[rand() % 70];
 8000340:	f003 f9c8 	bl	80036d4 <rand>
 8000344:	4603      	mov	r3, r0
 8000346:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <main+0xb0>)
 8000348:	fb82 1203 	smull	r1, r2, r2, r3
 800034c:	441a      	add	r2, r3
 800034e:	1191      	asrs	r1, r2, #6
 8000350:	17da      	asrs	r2, r3, #31
 8000352:	1a8a      	subs	r2, r1, r2
 8000354:	2146      	movs	r1, #70	; 0x46
 8000356:	fb01 f202 	mul.w	r2, r1, r2
 800035a:	1a9a      	subs	r2, r3, r2
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <main+0xb4>)
 800035e:	5c9b      	ldrb	r3, [r3, r2]
 8000360:	70bb      	strb	r3, [r7, #2]
		  	  uint8_t b = gamma8[rand() % 70];
 8000362:	f003 f9b7 	bl	80036d4 <rand>
 8000366:	4603      	mov	r3, r0
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <main+0xb0>)
 800036a:	fb82 1203 	smull	r1, r2, r2, r3
 800036e:	441a      	add	r2, r3
 8000370:	1191      	asrs	r1, r2, #6
 8000372:	17da      	asrs	r2, r3, #31
 8000374:	1a8a      	subs	r2, r1, r2
 8000376:	2146      	movs	r1, #70	; 0x46
 8000378:	fb01 f202 	mul.w	r2, r1, r2
 800037c:	1a9a      	subs	r2, r3, r2
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <main+0xb4>)
 8000380:	5c9b      	ldrb	r3, [r3, r2]
 8000382:	707b      	strb	r3, [r7, #1]
		  	  for (int led = 0; led < 6; led++) {
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	e00d      	b.n	80003a6 <main+0xa6>
		  	    ws2812b_set_color(led, r, g, b);
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	787b      	ldrb	r3, [r7, #1]
 800038e:	78ba      	ldrb	r2, [r7, #2]
 8000390:	78f9      	ldrb	r1, [r7, #3]
 8000392:	f000 fb01 	bl	8000998 <ws2812b_set_color>
		  	    ws2812b_update();
 8000396:	f000 faf1 	bl	800097c <ws2812b_update>
		  	    HAL_Delay(100);
 800039a:	2064      	movs	r0, #100	; 0x64
 800039c:	f000 fbd0 	bl	8000b40 <HAL_Delay>
		  	  for (int led = 0; led < 6; led++) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3301      	adds	r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	ddee      	ble.n	800038a <main+0x8a>
	  if(is_button_pressed){
 80003ac:	e7b7      	b.n	800031e <main+0x1e>
 80003ae:	bf00      	nop
 80003b0:	ea0ea0eb 	.word	0xea0ea0eb
 80003b4:	080046b8 	.word	0x080046b8

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	; 0x58
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2244      	movs	r2, #68	; 0x44
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fac7 	bl	800395a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003de:	f001 f895 	bl	800150c <HAL_PWREx_ControlVoltageScaling>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003e8:	f000 f838 	bl	800045c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ec:	2310      	movs	r3, #16
 80003ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003f8:	2360      	movs	r3, #96	; 0x60
 80003fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000400:	2301      	movs	r3, #1
 8000402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000408:	2328      	movs	r3, #40	; 0x28
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800040c:	2307      	movs	r3, #7
 800040e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f8cb 	bl	80015b8 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000428:	f000 f818 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2303      	movs	r3, #3
 8000432:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	2104      	movs	r1, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fc93 	bl	8001d70 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000450:	f000 f804 	bl	800045c <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3758      	adds	r7, #88	; 0x58
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6613      	str	r3, [r2, #96]	; 0x60
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	6593      	str	r3, [r2, #88]	; 0x58
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x44>)
 8000494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 fb00 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <DMA1_Channel6_IRQHandler+0x10>)
 800050a:	f000 fd67 	bl	8000fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000d4 	.word	0x200000d4

08000518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return 1;
 800051c:	2301      	movs	r3, #1
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_kill>:

int _kill(int pid, int sig)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000532:	f003 fa61 	bl	80039f8 <__errno>
 8000536:	4603      	mov	r3, r0
 8000538:	2216      	movs	r2, #22
 800053a:	601a      	str	r2, [r3, #0]
  return -1;
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_exit>:

void _exit (int status)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000550:	f04f 31ff 	mov.w	r1, #4294967295
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff ffe7 	bl	8000528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800055a:	e7fe      	b.n	800055a <_exit+0x12>

0800055c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e00a      	b.n	8000584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056e:	f3af 8000 	nop.w
 8000572:	4601      	mov	r1, r0
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	60ba      	str	r2, [r7, #8]
 800057a:	b2ca      	uxtb	r2, r1
 800057c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbf0      	blt.n	800056e <_read+0x12>
  }

  return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e009      	b.n	80005bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3301      	adds	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dbf1      	blt.n	80005a8 <_write+0x12>
  }
  return len;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <_close>:

int _close(int file)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f6:	605a      	str	r2, [r3, #4]
  return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_isatty>:

int _isatty(int file)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f003 f9c6 	bl	80039f8 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20018000 	.word	0x20018000
 8000698:	00000400 	.word	0x00000400
 800069c:	20000084 	.word	0x20000084
 80006a0:	20000340 	.word	0x20000340

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	; 0x38
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <MX_TIM3_Init+0xe4>)
 80006fc:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_TIM3_Init+0xe8>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_TIM3_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <MX_TIM3_Init+0xe4>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_TIM3_Init+0xe4>)
 800070e:	2263      	movs	r2, #99	; 0x63
 8000710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_TIM3_Init+0xe4>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_TIM3_Init+0xe4>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800071e:	4823      	ldr	r0, [pc, #140]	; (80007ac <MX_TIM3_Init+0xe4>)
 8000720:	f001 fd12 	bl	8002148 <HAL_TIM_Base_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800072a:	f7ff fe97 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000738:	4619      	mov	r1, r3
 800073a:	481c      	ldr	r0, [pc, #112]	; (80007ac <MX_TIM3_Init+0xe4>)
 800073c:	f002 f95a 	bl	80029f4 <HAL_TIM_ConfigClockSource>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000746:	f7ff fe89 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800074a:	4818      	ldr	r0, [pc, #96]	; (80007ac <MX_TIM3_Init+0xe4>)
 800074c:	f001 fdbc 	bl	80022c8 <HAL_TIM_PWM_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000756:	f7ff fe81 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_TIM3_Init+0xe4>)
 800076a:	f002 ff2b 	bl	80035c4 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000774:	f7ff fe72 	bl	800045c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM3_Init+0xe4>)
 8000790:	f002 f81c 	bl	80027cc <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800079a:	f7ff fe5f 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM3_Init+0xe4>)
 80007a0:	f000 f85a 	bl	8000858 <HAL_TIM_MspPostInit>

}
 80007a4:	bf00      	nop
 80007a6:	3738      	adds	r7, #56	; 0x38
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000088 	.word	0x20000088
 80007b0:	40000400 	.word	0x40000400

080007b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <HAL_TIM_Base_MspInit+0x94>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d13b      	bne.n	800083e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <HAL_TIM_Base_MspInit+0x98>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <HAL_TIM_Base_MspInit+0x98>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <HAL_TIM_Base_MspInit+0x98>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_TIM_Base_MspInit+0xa0>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007e6:	2205      	movs	r2, #5
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 80007fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000802:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 8000818:	f000 fac8 	bl	8000dac <HAL_DMA_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000822:	f7ff fe1b 	bl	800045c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <HAL_TIM_Base_MspInit+0x9c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40000400 	.word	0x40000400
 800084c:	40021000 	.word	0x40021000
 8000850:	200000d4 	.word	0x200000d4
 8000854:	4002006c 	.word	0x4002006c

08000858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_TIM_MspPostInit+0x64>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d11c      	bne.n	80008b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_TIM_MspPostInit+0x68>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_TIM_MspPostInit+0x68>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_TIM_MspPostInit+0x68>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fc74 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40000400 	.word	0x40000400
 80008c0:	40021000 	.word	0x40021000

080008c4 <set_byte>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	e016      	b.n	8000904 <set_byte+0x40>
    if (value & 0x80) {
 80008d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da06      	bge.n	80008ec <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <set_byte+0x54>)
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	54d1      	strb	r1, [r2, r3]
 80008ea:	e005      	b.n	80008f8 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <set_byte+0x54>)
 80008f4:	2120      	movs	r1, #32
 80008f6:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b07      	cmp	r3, #7
 8000908:	dde5      	ble.n	80008d6 <set_byte+0x12>
  }
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	2000011c 	.word	0x2000011c

0800091c <ws2812b_init>:

void ws2812b_init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	e007      	b.n	8000938 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <ws2812b_init+0x58>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b27      	cmp	r3, #39	; 0x27
 800093c:	ddf4      	ble.n	8000928 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e007      	b.n	8000954 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3328      	adds	r3, #40	; 0x28
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <ws2812b_init+0x58>)
 800094a:	2120      	movs	r1, #32
 800094c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2ba7      	cmp	r3, #167	; 0xa7
 8000958:	ddf4      	ble.n	8000944 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <ws2812b_init+0x58>)
 800095c:	2264      	movs	r2, #100	; 0x64
 800095e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

  HAL_TIM_Base_Start(&htim3);
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <ws2812b_init+0x5c>)
 8000964:	f001 fc48 	bl	80021f8 <HAL_TIM_Base_Start>
  ws2812b_update();
 8000968:	f000 f808 	bl	800097c <ws2812b_update>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000011c 	.word	0x2000011c
 8000978:	20000088 	.word	0x20000088

0800097c <ws2812b_update>:


void ws2812b_update(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000980:	23d1      	movs	r3, #209	; 0xd1
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <ws2812b_update+0x14>)
 8000984:	2100      	movs	r1, #0
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <ws2812b_update+0x18>)
 8000988:	f001 fd00 	bl	800238c <HAL_TIM_PWM_Start_DMA>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000011c 	.word	0x2000011c
 8000994:	20000088 	.word	0x20000088

08000998 <ws2812b_set_color>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	4608      	mov	r0, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4603      	mov	r3, r0
 80009a8:	70fb      	strb	r3, [r7, #3]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70bb      	strb	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b06      	cmp	r3, #6
 80009b6:	d820      	bhi.n	80009fa <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	3328      	adds	r3, #40	; 0x28
 80009c4:	78ba      	ldrb	r2, [r7, #2]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff7b 	bl	80008c4 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	3330      	adds	r3, #48	; 0x30
 80009da:	78fa      	ldrb	r2, [r7, #3]
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff70 	bl	80008c4 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	3338      	adds	r3, #56	; 0x38
 80009f0:	787a      	ldrb	r2, [r7, #1]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff65 	bl	80008c4 <set_byte>
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff fe4c 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 ffe7 	bl	8003a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fc63 	bl	8000300 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a48:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8000a4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a50:	20000340 	.word	0x20000340

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>

08000a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f961 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f80e 	bl	8000a88 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fcf6 	bl	8000468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_InitTick+0x6c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_InitTick+0x70>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x6c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f96d 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10f      	bne.n	8000ade <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d809      	bhi.n	8000ad8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f937 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_InitTick+0x74>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e001      	b.n	8000ae8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200001f0 	.word	0x200001f0

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200001f0 	.word	0x200001f0

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e098      	b.n	8000ef0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <HAL_DMA_Init+0x150>)
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d80f      	bhi.n	8000dea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_DMA_Init+0x154>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <HAL_DMA_Init+0x158>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	009a      	lsls	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_DMA_Init+0x15c>)
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
 8000de8:	e00e      	b.n	8000e08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_DMA_Init+0x160>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4a43      	ldr	r2, [pc, #268]	; (8000f04 <HAL_DMA_Init+0x158>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	009a      	lsls	r2, r3, #2
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <HAL_DMA_Init+0x164>)
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e62:	d039      	beq.n	8000ed8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_DMA_Init+0x15c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11a      	bne.n	8000ea4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_DMA_Init+0x168>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f003 031c 	and.w	r3, r3, #28
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4924      	ldr	r1, [pc, #144]	; (8000f14 <HAL_DMA_Init+0x168>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_DMA_Init+0x168>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	f003 031c 	and.w	r3, r3, #28
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	491d      	ldr	r1, [pc, #116]	; (8000f14 <HAL_DMA_Init+0x168>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
 8000ea2:	e019      	b.n	8000ed8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_DMA_Init+0x16c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f003 031c 	and.w	r3, r3, #28
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4917      	ldr	r1, [pc, #92]	; (8000f18 <HAL_DMA_Init+0x16c>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_DMA_Init+0x16c>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6859      	ldr	r1, [r3, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f003 031c 	and.w	r3, r3, #28
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	4911      	ldr	r1, [pc, #68]	; (8000f18 <HAL_DMA_Init+0x16c>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40020407 	.word	0x40020407
 8000f00:	bffdfff8 	.word	0xbffdfff8
 8000f04:	cccccccd 	.word	0xcccccccd
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	bffdfbf8 	.word	0xbffdfbf8
 8000f10:	40020400 	.word	0x40020400
 8000f14:	400200a8 	.word	0x400200a8
 8000f18:	400204a8 	.word	0x400204a8

08000f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Start_IT+0x20>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e04b      	b.n	8000fd4 <HAL_DMA_Start_IT+0xb8>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d13a      	bne.n	8000fc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f000 f8e0 	bl	800113a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d008      	beq.n	8000f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 020e 	orr.w	r2, r2, #14
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00f      	b.n	8000fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0204 	bic.w	r2, r2, #4
 8000fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 020a 	orr.w	r2, r2, #10
 8000fb2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e005      	b.n	8000fd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f003 031c 	and.w	r3, r3, #28
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	409a      	lsls	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d026      	beq.n	8001056 <HAL_DMA_IRQHandler+0x7a>
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d021      	beq.n	8001056 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0204 	bic.w	r2, r2, #4
 800102e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 021c 	and.w	r2, r3, #28
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2104      	movs	r1, #4
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	2b00      	cmp	r3, #0
 800104a:	d071      	beq.n	8001130 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001054:	e06c      	b.n	8001130 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 031c 	and.w	r3, r3, #28
 800105e:	2202      	movs	r2, #2
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d02e      	beq.n	80010c8 <HAL_DMA_IRQHandler+0xec>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d029      	beq.n	80010c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10b      	bne.n	800109a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 020a 	bic.w	r2, r2, #10
 8001090:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 021c 	and.w	r2, r3, #28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2102      	movs	r1, #2
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d038      	beq.n	8001130 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010c6:	e033      	b.n	8001130 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f003 031c 	and.w	r3, r3, #28
 80010d0:	2208      	movs	r2, #8
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d02a      	beq.n	8001132 <HAL_DMA_IRQHandler+0x156>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d025      	beq.n	8001132 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 020e 	bic.w	r2, r2, #14
 80010f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f003 021c 	and.w	r2, r3, #28
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001130:	bf00      	nop
 8001132:	bf00      	nop
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f003 021c 	and.w	r2, r3, #28
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d108      	bne.n	800117e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800117c:	e007      	b.n	800118e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	60da      	str	r2, [r3, #12]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e17f      	b.n	80014ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8171 	beq.w	80014a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_Init+0x40>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d118      	bne.n	800127c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80ac 	beq.w	80014a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	4a5e      	ldr	r2, [pc, #376]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6613      	str	r3, [r2, #96]	; 0x60
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <HAL_GPIO_Init+0x330>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001366:	4a5a      	ldr	r2, [pc, #360]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x242>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4f      	ldr	r2, [pc, #316]	; (80014d4 <HAL_GPIO_Init+0x338>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x23e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_GPIO_Init+0x33c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x23a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <HAL_GPIO_Init+0x340>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x236>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_GPIO_Init+0x344>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x232>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_GPIO_Init+0x348>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x22e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x34c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x22a>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013de:	2300      	movs	r3, #0
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f0:	4937      	ldr	r1, [pc, #220]	; (80014d0 <HAL_GPIO_Init+0x334>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_GPIO_Init+0x350>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <HAL_GPIO_Init+0x350>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_GPIO_Init+0x350>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800144c:	4a27      	ldr	r2, [pc, #156]	; (80014ec <HAL_GPIO_Init+0x350>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_GPIO_Init+0x350>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x350>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_GPIO_Init+0x350>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_GPIO_Init+0x350>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f ae78 	bne.w	80011ac <HAL_GPIO_Init+0x10>
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000
 80014d4:	48000400 	.word	0x48000400
 80014d8:	48000800 	.word	0x48000800
 80014dc:	48000c00 	.word	0x48000c00
 80014e0:	48001000 	.word	0x48001000
 80014e4:	48001400 	.word	0x48001400
 80014e8:	48001800 	.word	0x48001800
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	d130      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d038      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2232      	movs	r2, #50	; 0x32
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	e002      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f2      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d110      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d007      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3ca      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4b97      	ldr	r3, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4b94      	ldr	r3, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80e4 	beq.w	80017b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_OscConfig+0x4a>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	f040 808b 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8087 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x62>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3a2      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_RCC_OscConfig+0x7c>
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	e005      	b.n	8001640 <HAL_RCC_OscConfig+0x88>
 8001634:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	4293      	cmp	r3, r2
 8001642:	d223      	bcs.n	800168c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd1d 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e383      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001658:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	496d      	ldr	r1, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e025      	b.n	80016d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	495b      	ldr	r1, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fcdd 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e343      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f000 fc4a 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b52      	ldr	r3, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	4950      	ldr	r1, [pc, #320]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 80016f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f9c3 	bl	8000a88 <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d052      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	e327      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fa00 	bl	8000b28 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff f9fc 	bl	8000b28 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e310      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4931      	ldr	r1, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	492c      	ldr	r1, [pc, #176]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e01a      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178a:	f7ff f9cd 	bl	8000b28 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001792:	f7ff f9c9 	bl	8000b28 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2dd      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x1da>
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d074      	beq.n	80018aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x21a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d10e      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d064      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d160      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e2ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x24a>
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e026      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d115      	bne.n	8001838 <HAL_RCC_OscConfig+0x280>
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	080047b8 	.word	0x080047b8
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9f      	ldr	r2, [pc, #636]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9c      	ldr	r2, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f966 	bl	8000b28 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f962 	bl	8000b28 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e276      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2a8>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f952 	bl	8000b28 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff f94e 	bl	8000b28 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e262      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d0>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x310>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x328>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e23f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4973      	ldr	r1, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e040      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f90d 	bl	8000b28 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f909 	bl	8000b28 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e21d      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	495f      	ldr	r1, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e018      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f8e9 	bl	8000b28 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff f8e5 	bl	8000b28 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1f9      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f8c4 	bl	8000b28 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff f8c0 	bl	8000b28 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1d4      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3ec>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f8a7 	bl	8000b28 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f8a3 	bl	8000b28 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1b7      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f86a 	bl	8000b28 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7ff f866 	bl	8000b28 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	e029      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x50c>
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a9b      	ldr	r2, [pc, #620]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a97      	ldr	r2, [pc, #604]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f81c 	bl	8000b28 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f818 	bl	8000b28 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ed      	beq.n	8001af4 <HAL_RCC_OscConfig+0x53c>
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f805 	bl	8000b28 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff f801 	bl	8000b28 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e113      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ed      	bne.n	8001b22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a79      	ldr	r2, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80fe 	beq.w	8001d5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80d0 	bne.w	8001d0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6c:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d130      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d127      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bac:	2a07      	cmp	r2, #7
 8001bae:	bf14      	ite	ne
 8001bb0:	2201      	movne	r2, #1
 8001bb2:	2200      	moveq	r2, #0
 8001bb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d06e      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d069      	beq.n	8001cbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ad      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c10:	f7fe ff8a 	bl	8000b28 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe ff86 	bl	8000b28 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e09a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x784>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c50:	0212      	lsls	r2, r2, #8
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0552      	lsls	r2, r2, #21
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c64:	0852      	lsrs	r2, r2, #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0652      	lsls	r2, r2, #25
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	0912      	lsrs	r2, r2, #4
 8001c72:	0452      	lsls	r2, r2, #17
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4930      	ldr	r1, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c94:	f7fe ff48 	bl	8000b28 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff44 	bl	8000b28 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e058      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cba:	e050      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d148      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce4:	f7fe ff20 	bl	8000b28 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff1c 	bl	8000b28 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e030      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x734>
 8001d0a:	e028      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7fe ff03 	bl	8000b28 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d24:	e00c      	b.n	8001d40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe feff 	bl	8000b28 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d905      	bls.n	8001d40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ec      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4905      	ldr	r1, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x7b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
 8001d58:	e001      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	feeefffc 	.word	0xfeeefffc

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0e7      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4970      	ldr	r1, [pc, #448]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cf      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d908      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4960      	ldr	r1, [pc, #384]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0a6      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e09a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e086      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4943      	ldr	r1, [pc, #268]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7fe fe66 	bl	8000b28 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe fe62 	bl	8000b28 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d210      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e036      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f24:	f000 f824 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1fc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fd9d 	bl	8000a88 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	080047b8 	.word	0x080047b8
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11e      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e004      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d134      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0xa6>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d003      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xac>
 8002014:	e005      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	fb03 f202 	mul.w	r2, r3, r2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0e5b      	lsrs	r3, r3, #25
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002068:	69bb      	ldr	r3, [r7, #24]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	080047c8 	.word	0x080047c8
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff fa26 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff fa16 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10b      	bne.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d919      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2ba0      	cmp	r3, #160	; 0xa0
 80020e4:	d902      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e010      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d902      	bls.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f8:	2303      	movs	r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e00a      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e004      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b70      	cmp	r3, #112	; 0x70
 800210e:	d101      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e049      	b.n	80021ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fb20 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 fdec 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d001      	beq.n	8002210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e047      	b.n	80022a0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_TIM_Base_Start+0xb4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01d      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d018      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_TIM_Base_Start+0xb8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_Base_Start+0xbc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00e      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_TIM_Base_Start+0xc0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_TIM_Base_Start+0xc4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_TIM_Base_Start+0x66>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_TIM_Base_Start+0xc8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d115      	bne.n	800228a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_TIM_Base_Start+0xcc>)
 8002266:	4013      	ands	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b06      	cmp	r3, #6
 800226e:	d015      	beq.n	800229c <HAL_TIM_Base_Start+0xa4>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d011      	beq.n	800229c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002288:	e008      	b.n	800229c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e000      	b.n	800229e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	40013400 	.word	0x40013400
 80022c0:	40014000 	.word	0x40014000
 80022c4:	00010007 	.word	0x00010007

080022c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e049      	b.n	800236e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f841 	bl	8002376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 fd2c 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e03c      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d109      	bne.n	80023d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e02f      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d109      	bne.n	80023ec <HAL_TIM_PWM_Start_DMA+0x60>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e022      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d109      	bne.n	8002406 <HAL_TIM_PWM_Start_DMA+0x7a>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	e015      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b10      	cmp	r3, #16
 800240a:	d109      	bne.n	8002420 <HAL_TIM_PWM_Start_DMA+0x94>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e008      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	e1ab      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e03c      	b.n	80024ce <HAL_TIM_PWM_Start_DMA+0x142>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b04      	cmp	r3, #4
 8002458:	d109      	bne.n	800246e <HAL_TIM_PWM_Start_DMA+0xe2>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	e02f      	b.n	80024ce <HAL_TIM_PWM_Start_DMA+0x142>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d109      	bne.n	8002488 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e022      	b.n	80024ce <HAL_TIM_PWM_Start_DMA+0x142>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d109      	bne.n	80024a2 <HAL_TIM_PWM_Start_DMA+0x116>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	e015      	b.n	80024ce <HAL_TIM_PWM_Start_DMA+0x142>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d109      	bne.n	80024bc <HAL_TIM_PWM_Start_DMA+0x130>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e008      	b.n	80024ce <HAL_TIM_PWM_Start_DMA+0x142>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d034      	beq.n	800253c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_TIM_PWM_Start_DMA+0x152>
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e157      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_PWM_Start_DMA+0x166>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	e026      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d104      	bne.n	8002502 <HAL_TIM_PWM_Start_DMA+0x176>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002500:	e01e      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d104      	bne.n	8002512 <HAL_TIM_PWM_Start_DMA+0x186>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	e016      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d104      	bne.n	8002522 <HAL_TIM_PWM_Start_DMA+0x196>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002520:	e00e      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d104      	bne.n	8002532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	e006      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800253a:	e001      	b.n	8002540 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e128      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	f200 80ae 	bhi.w	80026a4 <HAL_TIM_PWM_Start_DMA+0x318>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002585 	.word	0x08002585
 8002554:	080026a5 	.word	0x080026a5
 8002558:	080026a5 	.word	0x080026a5
 800255c:	080026a5 	.word	0x080026a5
 8002560:	080025cd 	.word	0x080025cd
 8002564:	080026a5 	.word	0x080026a5
 8002568:	080026a5 	.word	0x080026a5
 800256c:	080026a5 	.word	0x080026a5
 8002570:	08002615 	.word	0x08002615
 8002574:	080026a5 	.word	0x080026a5
 8002578:	080026a5 	.word	0x080026a5
 800257c:	080026a5 	.word	0x080026a5
 8002580:	0800265d 	.word	0x0800265d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	4a84      	ldr	r2, [pc, #528]	; (800279c <HAL_TIM_PWM_Start_DMA+0x410>)
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	4a83      	ldr	r2, [pc, #524]	; (80027a0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002592:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	4a82      	ldr	r2, [pc, #520]	; (80027a4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800259a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3334      	adds	r3, #52	; 0x34
 80025a8:	461a      	mov	r2, r3
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	f7fe fcb6 	bl	8000f1c <HAL_DMA_Start_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0eb      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	60da      	str	r2, [r3, #12]
      break;
 80025ca:	e06e      	b.n	80026aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	4a72      	ldr	r2, [pc, #456]	; (800279c <HAL_TIM_PWM_Start_DMA+0x410>)
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	4a71      	ldr	r2, [pc, #452]	; (80027a0 <HAL_TIM_PWM_Start_DMA+0x414>)
 80025da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	4a70      	ldr	r2, [pc, #448]	; (80027a4 <HAL_TIM_PWM_Start_DMA+0x418>)
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3338      	adds	r3, #56	; 0x38
 80025f0:	461a      	mov	r2, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	f7fe fc92 	bl	8000f1c <HAL_DMA_Start_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0c7      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002610:	60da      	str	r2, [r3, #12]
      break;
 8002612:	e04a      	b.n	80026aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	4a60      	ldr	r2, [pc, #384]	; (800279c <HAL_TIM_PWM_Start_DMA+0x410>)
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	4a5f      	ldr	r2, [pc, #380]	; (80027a0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002622:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4a5e      	ldr	r2, [pc, #376]	; (80027a4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800262a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	333c      	adds	r3, #60	; 0x3c
 8002638:	461a      	mov	r2, r3
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	f7fe fc6e 	bl	8000f1c <HAL_DMA_Start_IT>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0a3      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002658:	60da      	str	r2, [r3, #12]
      break;
 800265a:	e026      	b.n	80026aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_TIM_PWM_Start_DMA+0x410>)
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800266a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8002672:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3340      	adds	r3, #64	; 0x40
 8002680:	461a      	mov	r2, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	f7fe fc4a 	bl	8000f1c <HAL_DMA_Start_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07f      	b.n	8002792 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026a0:	60da      	str	r2, [r3, #12]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	75fb      	strb	r3, [r7, #23]
      break;
 80026a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d16f      	bne.n	8002790 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 ff5d 	bl	8003578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x364>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a37      	ldr	r2, [pc, #220]	; (80027ac <HAL_TIM_PWM_Start_DMA+0x420>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x364>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x364>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x364>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_PWM_Start_DMA+0x368>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d018      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_TIM_PWM_Start_DMA+0x430>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIM_PWM_Start_DMA+0x420>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d115      	bne.n	800277c <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d015      	beq.n	800278e <HAL_TIM_PWM_Start_DMA+0x402>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d011      	beq.n	800278e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	e008      	b.n	800278e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e000      	b.n	8002790 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002790:	7dfb      	ldrb	r3, [r7, #23]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	08002c55 	.word	0x08002c55
 80027a0:	08002cfd 	.word	0x08002cfd
 80027a4:	08002bc3 	.word	0x08002bc3
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	00010007 	.word	0x00010007

080027cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0ff      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b14      	cmp	r3, #20
 80027f6:	f200 80f0 	bhi.w	80029da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002855 	.word	0x08002855
 8002804:	080029db 	.word	0x080029db
 8002808:	080029db 	.word	0x080029db
 800280c:	080029db 	.word	0x080029db
 8002810:	08002895 	.word	0x08002895
 8002814:	080029db 	.word	0x080029db
 8002818:	080029db 	.word	0x080029db
 800281c:	080029db 	.word	0x080029db
 8002820:	080028d7 	.word	0x080028d7
 8002824:	080029db 	.word	0x080029db
 8002828:	080029db 	.word	0x080029db
 800282c:	080029db 	.word	0x080029db
 8002830:	08002917 	.word	0x08002917
 8002834:	080029db 	.word	0x080029db
 8002838:	080029db 	.word	0x080029db
 800283c:	080029db 	.word	0x080029db
 8002840:	08002959 	.word	0x08002959
 8002844:	080029db 	.word	0x080029db
 8002848:	080029db 	.word	0x080029db
 800284c:	080029db 	.word	0x080029db
 8002850:	08002999 	.word	0x08002999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fb1c 	bl	8002e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0208 	orr.w	r2, r2, #8
 800286e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	619a      	str	r2, [r3, #24]
      break;
 8002892:	e0a5      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fb8c 	bl	8002fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6999      	ldr	r1, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	021a      	lsls	r2, r3, #8
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]
      break;
 80028d4:	e084      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fbf5 	bl	80030cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0208 	orr.w	r2, r2, #8
 80028f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0204 	bic.w	r2, r2, #4
 8002900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	61da      	str	r2, [r3, #28]
      break;
 8002914:	e064      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fc5d 	bl	80031dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	61da      	str	r2, [r3, #28]
      break;
 8002956:	e043      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fca6 	bl	80032b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0208 	orr.w	r2, r2, #8
 8002972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0204 	bic.w	r2, r2, #4
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002996:	e023      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fcea 	bl	8003378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	021a      	lsls	r2, r3, #8
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
      break;
 80029de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIM_ConfigClockSource+0x1c>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0b6      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x18a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4c:	d03e      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0xd8>
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	f200 8087 	bhi.w	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	f000 8086 	beq.w	8002b6a <HAL_TIM_ConfigClockSource+0x176>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	d87f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a64:	2b70      	cmp	r3, #112	; 0x70
 8002a66:	d01a      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0xaa>
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d87b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d050      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x11e>
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d877      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d03c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0xfe>
 8002a78:	2b50      	cmp	r3, #80	; 0x50
 8002a7a:	d873      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d058      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x13e>
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d86f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d064      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15e>
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d86b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d060      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15e>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d867      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05c      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15e>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d05a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15e>
 8002a9c:	e062      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aae:	f000 fd43 	bl	8003538 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	609a      	str	r2, [r3, #8]
      break;
 8002aca:	e04f      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002adc:	f000 fd2c 	bl	8003538 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aee:	609a      	str	r2, [r3, #8]
      break;
 8002af0:	e03c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 fca0 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2150      	movs	r1, #80	; 0x50
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fcf9 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e02c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 fcbf 	bl	80034a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2160      	movs	r1, #96	; 0x60
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fce9 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002b30:	e01c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 fc80 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fcd9 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002b50:	e00c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f000 fcd0 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8002b62:	e003      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e000      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d107      	bne.n	8002bea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be8:	e02a      	b.n	8002c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c02:	e01d      	b.n	8002c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2204      	movs	r2, #4
 8002c12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	e010      	b.n	8002c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c36:	e003      	b.n	8002c40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ffb4 	bl	8002bae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10b      	bne.n	8002c84 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d136      	bne.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c82:	e031      	b.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10b      	bne.n	8002ca6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2202      	movs	r2, #2
 8002c92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d125      	bne.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	e020      	b.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10b      	bne.n	8002cc8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d114      	bne.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc6:	e00f      	b.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10a      	bne.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff ff4c 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d103      	bne.n	8002d1c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	771a      	strb	r2, [r3, #28]
 8002d1a:	e019      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d103      	bne.n	8002d2e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
 8002d2c:	e010      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d103      	bne.n	8002d40 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	771a      	strb	r2, [r3, #28]
 8002d3e:	e007      	b.n	8002d50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d102      	bne.n	8002d50 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff ff22 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <TIM_Base_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d00f      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <TIM_Base_SetConfig+0x118>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <TIM_Base_SetConfig+0x11c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	; (8002e84 <TIM_Base_SetConfig+0x120>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3a      	ldr	r2, [pc, #232]	; (8002e88 <TIM_Base_SetConfig+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <TIM_Base_SetConfig+0x114>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d01b      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <TIM_Base_SetConfig+0x118>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d017      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <TIM_Base_SetConfig+0x11c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <TIM_Base_SetConfig+0x120>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00f      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <TIM_Base_SetConfig+0x124>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <TIM_Base_SetConfig+0x128>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <TIM_Base_SetConfig+0x12c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <TIM_Base_SetConfig+0x130>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <TIM_Base_SetConfig+0x114>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00f      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <TIM_Base_SetConfig+0x124>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <TIM_Base_SetConfig+0x128>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <TIM_Base_SetConfig+0x12c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <TIM_Base_SetConfig+0x130>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d103      	bne.n	8002e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	615a      	str	r2, [r3, #20]
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800

08002e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 0201 	bic.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 0302 	bic.w	r3, r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <TIM_OC1_SetConfig+0x10c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00f      	beq.n	8002f18 <TIM_OC1_SetConfig+0x80>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <TIM_OC1_SetConfig+0x110>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <TIM_OC1_SetConfig+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <TIM_OC1_SetConfig+0x114>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <TIM_OC1_SetConfig+0x80>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_OC1_SetConfig+0x118>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_OC1_SetConfig+0x80>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <TIM_OC1_SetConfig+0x11c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10c      	bne.n	8002f32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0308 	bic.w	r3, r3, #8
 8002f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <TIM_OC1_SetConfig+0x10c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <TIM_OC1_SetConfig+0xc2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <TIM_OC1_SetConfig+0x110>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_OC1_SetConfig+0xc2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <TIM_OC1_SetConfig+0x114>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_OC1_SetConfig+0xc2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <TIM_OC1_SetConfig+0x118>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_OC1_SetConfig+0xc2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <TIM_OC1_SetConfig+0x11c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d111      	bne.n	8002f7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40013400 	.word	0x40013400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800

08002fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 0210 	bic.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0320 	bic.w	r3, r3, #32
 8003006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <TIM_OC2_SetConfig+0x100>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_OC2_SetConfig+0x6c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <TIM_OC2_SetConfig+0x104>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10d      	bne.n	8003040 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC2_SetConfig+0x100>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00f      	beq.n	8003068 <TIM_OC2_SetConfig+0xb0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <TIM_OC2_SetConfig+0x104>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_OC2_SetConfig+0xb0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <TIM_OC2_SetConfig+0x108>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_OC2_SetConfig+0xb0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <TIM_OC2_SetConfig+0x10c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_OC2_SetConfig+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <TIM_OC2_SetConfig+0x110>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d113      	bne.n	8003090 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800306e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800

080030cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <TIM_OC3_SetConfig+0xfc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC3_SetConfig+0x6a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <TIM_OC3_SetConfig+0x100>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10d      	bne.n	8003152 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800313c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <TIM_OC3_SetConfig+0xfc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00f      	beq.n	800317a <TIM_OC3_SetConfig+0xae>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <TIM_OC3_SetConfig+0x100>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_OC3_SetConfig+0xae>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <TIM_OC3_SetConfig+0x104>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_OC3_SetConfig+0xae>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <TIM_OC3_SetConfig+0x108>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC3_SetConfig+0xae>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <TIM_OC3_SetConfig+0x10c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40013400 	.word	0x40013400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800

080031dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	031b      	lsls	r3, r3, #12
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <TIM_OC4_SetConfig+0xc0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00f      	beq.n	8003260 <TIM_OC4_SetConfig+0x84>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <TIM_OC4_SetConfig+0xc4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_OC4_SetConfig+0x84>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <TIM_OC4_SetConfig+0xc8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_OC4_SetConfig+0x84>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <TIM_OC4_SetConfig+0xcc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_OC4_SetConfig+0x84>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <TIM_OC4_SetConfig+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d109      	bne.n	8003274 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40013400 	.word	0x40013400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40014400 	.word	0x40014400
 80032ac:	40014800 	.word	0x40014800

080032b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a17      	ldr	r2, [pc, #92]	; (8003364 <TIM_OC5_SetConfig+0xb4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <TIM_OC5_SetConfig+0x7a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a16      	ldr	r2, [pc, #88]	; (8003368 <TIM_OC5_SetConfig+0xb8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_OC5_SetConfig+0x7a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <TIM_OC5_SetConfig+0xbc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_OC5_SetConfig+0x7a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <TIM_OC5_SetConfig+0xc0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_OC5_SetConfig+0x7a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a13      	ldr	r2, [pc, #76]	; (8003374 <TIM_OC5_SetConfig+0xc4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d109      	bne.n	800333e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40013400 	.word	0x40013400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	051b      	lsls	r3, r3, #20
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a18      	ldr	r2, [pc, #96]	; (8003430 <TIM_OC6_SetConfig+0xb8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <TIM_OC6_SetConfig+0x7c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <TIM_OC6_SetConfig+0xbc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_OC6_SetConfig+0x7c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <TIM_OC6_SetConfig+0xc0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_OC6_SetConfig+0x7c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <TIM_OC6_SetConfig+0xc4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_OC6_SetConfig+0x7c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <TIM_OC6_SetConfig+0xc8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d109      	bne.n	8003408 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40014000 	.word	0x40014000
 800343c:	40014400 	.word	0x40014400
 8003440:	40014800 	.word	0x40014800

08003444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b087      	sub	sp, #28
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0210 	bic.w	r2, r3, #16
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	f043 0307 	orr.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	431a      	orrs	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d8:	2302      	movs	r3, #2
 80035da:	e068      	b.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d108      	bne.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01d      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d018      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40014000 	.word	0x40014000

080036d4 <rand>:
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <rand+0x5c>)
 80036d6:	b510      	push	{r4, lr}
 80036d8:	681c      	ldr	r4, [r3, #0]
 80036da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036dc:	b9b3      	cbnz	r3, 800370c <rand+0x38>
 80036de:	2018      	movs	r0, #24
 80036e0:	f000 fa22 	bl	8003b28 <malloc>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6320      	str	r0, [r4, #48]	; 0x30
 80036e8:	b920      	cbnz	r0, 80036f4 <rand+0x20>
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <rand+0x60>)
 80036ec:	4812      	ldr	r0, [pc, #72]	; (8003738 <rand+0x64>)
 80036ee:	2152      	movs	r1, #82	; 0x52
 80036f0:	f000 f9b0 	bl	8003a54 <__assert_func>
 80036f4:	4911      	ldr	r1, [pc, #68]	; (800373c <rand+0x68>)
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <rand+0x6c>)
 80036f8:	e9c0 1300 	strd	r1, r3, [r0]
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <rand+0x70>)
 80036fe:	6083      	str	r3, [r0, #8]
 8003700:	230b      	movs	r3, #11
 8003702:	8183      	strh	r3, [r0, #12]
 8003704:	2100      	movs	r1, #0
 8003706:	2001      	movs	r0, #1
 8003708:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800370c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800370e:	480e      	ldr	r0, [pc, #56]	; (8003748 <rand+0x74>)
 8003710:	690b      	ldr	r3, [r1, #16]
 8003712:	694c      	ldr	r4, [r1, #20]
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <rand+0x78>)
 8003716:	4358      	muls	r0, r3
 8003718:	fb02 0004 	mla	r0, r2, r4, r0
 800371c:	fba3 3202 	umull	r3, r2, r3, r2
 8003720:	3301      	adds	r3, #1
 8003722:	eb40 0002 	adc.w	r0, r0, r2
 8003726:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800372a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800372e:	bd10      	pop	{r4, pc}
 8003730:	20000064 	.word	0x20000064
 8003734:	080047f8 	.word	0x080047f8
 8003738:	0800480f 	.word	0x0800480f
 800373c:	abcd330e 	.word	0xabcd330e
 8003740:	e66d1234 	.word	0xe66d1234
 8003744:	0005deec 	.word	0x0005deec
 8003748:	5851f42d 	.word	0x5851f42d
 800374c:	4c957f2d 	.word	0x4c957f2d

08003750 <std>:
 8003750:	2300      	movs	r3, #0
 8003752:	b510      	push	{r4, lr}
 8003754:	4604      	mov	r4, r0
 8003756:	e9c0 3300 	strd	r3, r3, [r0]
 800375a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800375e:	6083      	str	r3, [r0, #8]
 8003760:	8181      	strh	r1, [r0, #12]
 8003762:	6643      	str	r3, [r0, #100]	; 0x64
 8003764:	81c2      	strh	r2, [r0, #14]
 8003766:	6183      	str	r3, [r0, #24]
 8003768:	4619      	mov	r1, r3
 800376a:	2208      	movs	r2, #8
 800376c:	305c      	adds	r0, #92	; 0x5c
 800376e:	f000 f8f4 	bl	800395a <memset>
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <std+0x58>)
 8003774:	6263      	str	r3, [r4, #36]	; 0x24
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <std+0x5c>)
 8003778:	62a3      	str	r3, [r4, #40]	; 0x28
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <std+0x60>)
 800377c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <std+0x64>)
 8003780:	6323      	str	r3, [r4, #48]	; 0x30
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <std+0x68>)
 8003784:	6224      	str	r4, [r4, #32]
 8003786:	429c      	cmp	r4, r3
 8003788:	d006      	beq.n	8003798 <std+0x48>
 800378a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800378e:	4294      	cmp	r4, r2
 8003790:	d002      	beq.n	8003798 <std+0x48>
 8003792:	33d0      	adds	r3, #208	; 0xd0
 8003794:	429c      	cmp	r4, r3
 8003796:	d105      	bne.n	80037a4 <std+0x54>
 8003798:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a0:	f000 b954 	b.w	8003a4c <__retarget_lock_init_recursive>
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	080038d5 	.word	0x080038d5
 80037ac:	080038f7 	.word	0x080038f7
 80037b0:	0800392f 	.word	0x0800392f
 80037b4:	08003953 	.word	0x08003953
 80037b8:	200001f4 	.word	0x200001f4

080037bc <stdio_exit_handler>:
 80037bc:	4a02      	ldr	r2, [pc, #8]	; (80037c8 <stdio_exit_handler+0xc>)
 80037be:	4903      	ldr	r1, [pc, #12]	; (80037cc <stdio_exit_handler+0x10>)
 80037c0:	4803      	ldr	r0, [pc, #12]	; (80037d0 <stdio_exit_handler+0x14>)
 80037c2:	f000 b869 	b.w	8003898 <_fwalk_sglue>
 80037c6:	bf00      	nop
 80037c8:	2000000c 	.word	0x2000000c
 80037cc:	08003d9d 	.word	0x08003d9d
 80037d0:	20000018 	.word	0x20000018

080037d4 <cleanup_stdio>:
 80037d4:	6841      	ldr	r1, [r0, #4]
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <cleanup_stdio+0x34>)
 80037d8:	4299      	cmp	r1, r3
 80037da:	b510      	push	{r4, lr}
 80037dc:	4604      	mov	r4, r0
 80037de:	d001      	beq.n	80037e4 <cleanup_stdio+0x10>
 80037e0:	f000 fadc 	bl	8003d9c <_fflush_r>
 80037e4:	68a1      	ldr	r1, [r4, #8]
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <cleanup_stdio+0x38>)
 80037e8:	4299      	cmp	r1, r3
 80037ea:	d002      	beq.n	80037f2 <cleanup_stdio+0x1e>
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 fad5 	bl	8003d9c <_fflush_r>
 80037f2:	68e1      	ldr	r1, [r4, #12]
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <cleanup_stdio+0x3c>)
 80037f6:	4299      	cmp	r1, r3
 80037f8:	d004      	beq.n	8003804 <cleanup_stdio+0x30>
 80037fa:	4620      	mov	r0, r4
 80037fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003800:	f000 bacc 	b.w	8003d9c <_fflush_r>
 8003804:	bd10      	pop	{r4, pc}
 8003806:	bf00      	nop
 8003808:	200001f4 	.word	0x200001f4
 800380c:	2000025c 	.word	0x2000025c
 8003810:	200002c4 	.word	0x200002c4

08003814 <global_stdio_init.part.0>:
 8003814:	b510      	push	{r4, lr}
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <global_stdio_init.part.0+0x30>)
 8003818:	4c0b      	ldr	r4, [pc, #44]	; (8003848 <global_stdio_init.part.0+0x34>)
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <global_stdio_init.part.0+0x38>)
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	4620      	mov	r0, r4
 8003820:	2200      	movs	r2, #0
 8003822:	2104      	movs	r1, #4
 8003824:	f7ff ff94 	bl	8003750 <std>
 8003828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800382c:	2201      	movs	r2, #1
 800382e:	2109      	movs	r1, #9
 8003830:	f7ff ff8e 	bl	8003750 <std>
 8003834:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003838:	2202      	movs	r2, #2
 800383a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800383e:	2112      	movs	r1, #18
 8003840:	f7ff bf86 	b.w	8003750 <std>
 8003844:	2000032c 	.word	0x2000032c
 8003848:	200001f4 	.word	0x200001f4
 800384c:	080037bd 	.word	0x080037bd

08003850 <__sfp_lock_acquire>:
 8003850:	4801      	ldr	r0, [pc, #4]	; (8003858 <__sfp_lock_acquire+0x8>)
 8003852:	f000 b8fc 	b.w	8003a4e <__retarget_lock_acquire_recursive>
 8003856:	bf00      	nop
 8003858:	20000335 	.word	0x20000335

0800385c <__sfp_lock_release>:
 800385c:	4801      	ldr	r0, [pc, #4]	; (8003864 <__sfp_lock_release+0x8>)
 800385e:	f000 b8f7 	b.w	8003a50 <__retarget_lock_release_recursive>
 8003862:	bf00      	nop
 8003864:	20000335 	.word	0x20000335

08003868 <__sinit>:
 8003868:	b510      	push	{r4, lr}
 800386a:	4604      	mov	r4, r0
 800386c:	f7ff fff0 	bl	8003850 <__sfp_lock_acquire>
 8003870:	6a23      	ldr	r3, [r4, #32]
 8003872:	b11b      	cbz	r3, 800387c <__sinit+0x14>
 8003874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003878:	f7ff bff0 	b.w	800385c <__sfp_lock_release>
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <__sinit+0x28>)
 800387e:	6223      	str	r3, [r4, #32]
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__sinit+0x2c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f5      	bne.n	8003874 <__sinit+0xc>
 8003888:	f7ff ffc4 	bl	8003814 <global_stdio_init.part.0>
 800388c:	e7f2      	b.n	8003874 <__sinit+0xc>
 800388e:	bf00      	nop
 8003890:	080037d5 	.word	0x080037d5
 8003894:	2000032c 	.word	0x2000032c

08003898 <_fwalk_sglue>:
 8003898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800389c:	4607      	mov	r7, r0
 800389e:	4688      	mov	r8, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	2600      	movs	r6, #0
 80038a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038a8:	f1b9 0901 	subs.w	r9, r9, #1
 80038ac:	d505      	bpl.n	80038ba <_fwalk_sglue+0x22>
 80038ae:	6824      	ldr	r4, [r4, #0]
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	d1f7      	bne.n	80038a4 <_fwalk_sglue+0xc>
 80038b4:	4630      	mov	r0, r6
 80038b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d907      	bls.n	80038d0 <_fwalk_sglue+0x38>
 80038c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038c4:	3301      	adds	r3, #1
 80038c6:	d003      	beq.n	80038d0 <_fwalk_sglue+0x38>
 80038c8:	4629      	mov	r1, r5
 80038ca:	4638      	mov	r0, r7
 80038cc:	47c0      	blx	r8
 80038ce:	4306      	orrs	r6, r0
 80038d0:	3568      	adds	r5, #104	; 0x68
 80038d2:	e7e9      	b.n	80038a8 <_fwalk_sglue+0x10>

080038d4 <__sread>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	460c      	mov	r4, r1
 80038d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038dc:	f000 f868 	bl	80039b0 <_read_r>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	bfab      	itete	ge
 80038e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038e6:	89a3      	ldrhlt	r3, [r4, #12]
 80038e8:	181b      	addge	r3, r3, r0
 80038ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038ee:	bfac      	ite	ge
 80038f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80038f2:	81a3      	strhlt	r3, [r4, #12]
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <__swrite>:
 80038f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fa:	461f      	mov	r7, r3
 80038fc:	898b      	ldrh	r3, [r1, #12]
 80038fe:	05db      	lsls	r3, r3, #23
 8003900:	4605      	mov	r5, r0
 8003902:	460c      	mov	r4, r1
 8003904:	4616      	mov	r6, r2
 8003906:	d505      	bpl.n	8003914 <__swrite+0x1e>
 8003908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390c:	2302      	movs	r3, #2
 800390e:	2200      	movs	r2, #0
 8003910:	f000 f83c 	bl	800398c <_lseek_r>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800391a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	4632      	mov	r2, r6
 8003922:	463b      	mov	r3, r7
 8003924:	4628      	mov	r0, r5
 8003926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800392a:	f000 b853 	b.w	80039d4 <_write_r>

0800392e <__sseek>:
 800392e:	b510      	push	{r4, lr}
 8003930:	460c      	mov	r4, r1
 8003932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003936:	f000 f829 	bl	800398c <_lseek_r>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	bf15      	itete	ne
 8003940:	6560      	strne	r0, [r4, #84]	; 0x54
 8003942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800394a:	81a3      	strheq	r3, [r4, #12]
 800394c:	bf18      	it	ne
 800394e:	81a3      	strhne	r3, [r4, #12]
 8003950:	bd10      	pop	{r4, pc}

08003952 <__sclose>:
 8003952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003956:	f000 b809 	b.w	800396c <_close_r>

0800395a <memset>:
 800395a:	4402      	add	r2, r0
 800395c:	4603      	mov	r3, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	d100      	bne.n	8003964 <memset+0xa>
 8003962:	4770      	bx	lr
 8003964:	f803 1b01 	strb.w	r1, [r3], #1
 8003968:	e7f9      	b.n	800395e <memset+0x4>
	...

0800396c <_close_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4d06      	ldr	r5, [pc, #24]	; (8003988 <_close_r+0x1c>)
 8003970:	2300      	movs	r3, #0
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fc fe29 	bl	80005ce <_close>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_close_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_close_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000330 	.word	0x20000330

0800398c <_lseek_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	; (80039ac <_lseek_r+0x20>)
 8003990:	4604      	mov	r4, r0
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	2200      	movs	r2, #0
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fc fe3e 	bl	800061c <_lseek>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_lseek_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_lseek_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000330 	.word	0x20000330

080039b0 <_read_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d07      	ldr	r5, [pc, #28]	; (80039d0 <_read_r+0x20>)
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fc fdcc 	bl	800055c <_read>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_read_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_read_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000330 	.word	0x20000330

080039d4 <_write_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d07      	ldr	r5, [pc, #28]	; (80039f4 <_write_r+0x20>)
 80039d8:	4604      	mov	r4, r0
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fc fdd7 	bl	8000596 <_write>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_write_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_write_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000330 	.word	0x20000330

080039f8 <__errno>:
 80039f8:	4b01      	ldr	r3, [pc, #4]	; (8003a00 <__errno+0x8>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000064 	.word	0x20000064

08003a04 <__libc_init_array>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4d0d      	ldr	r5, [pc, #52]	; (8003a3c <__libc_init_array+0x38>)
 8003a08:	4c0d      	ldr	r4, [pc, #52]	; (8003a40 <__libc_init_array+0x3c>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	2600      	movs	r6, #0
 8003a10:	42a6      	cmp	r6, r4
 8003a12:	d109      	bne.n	8003a28 <__libc_init_array+0x24>
 8003a14:	4d0b      	ldr	r5, [pc, #44]	; (8003a44 <__libc_init_array+0x40>)
 8003a16:	4c0c      	ldr	r4, [pc, #48]	; (8003a48 <__libc_init_array+0x44>)
 8003a18:	f000 fe42 	bl	80046a0 <_init>
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	2600      	movs	r6, #0
 8003a22:	42a6      	cmp	r6, r4
 8003a24:	d105      	bne.n	8003a32 <__libc_init_array+0x2e>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2c:	4798      	blx	r3
 8003a2e:	3601      	adds	r6, #1
 8003a30:	e7ee      	b.n	8003a10 <__libc_init_array+0xc>
 8003a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a36:	4798      	blx	r3
 8003a38:	3601      	adds	r6, #1
 8003a3a:	e7f2      	b.n	8003a22 <__libc_init_array+0x1e>
 8003a3c:	080048d8 	.word	0x080048d8
 8003a40:	080048d8 	.word	0x080048d8
 8003a44:	080048d8 	.word	0x080048d8
 8003a48:	080048dc 	.word	0x080048dc

08003a4c <__retarget_lock_init_recursive>:
 8003a4c:	4770      	bx	lr

08003a4e <__retarget_lock_acquire_recursive>:
 8003a4e:	4770      	bx	lr

08003a50 <__retarget_lock_release_recursive>:
 8003a50:	4770      	bx	lr
	...

08003a54 <__assert_func>:
 8003a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a56:	4614      	mov	r4, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <__assert_func+0x2c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4605      	mov	r5, r0
 8003a60:	68d8      	ldr	r0, [r3, #12]
 8003a62:	b14c      	cbz	r4, 8003a78 <__assert_func+0x24>
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <__assert_func+0x30>)
 8003a66:	9100      	str	r1, [sp, #0]
 8003a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a6c:	4906      	ldr	r1, [pc, #24]	; (8003a88 <__assert_func+0x34>)
 8003a6e:	462b      	mov	r3, r5
 8003a70:	f000 f9bc 	bl	8003dec <fiprintf>
 8003a74:	f000 f9dc 	bl	8003e30 <abort>
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <__assert_func+0x38>)
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	e7f3      	b.n	8003a66 <__assert_func+0x12>
 8003a7e:	bf00      	nop
 8003a80:	20000064 	.word	0x20000064
 8003a84:	08004867 	.word	0x08004867
 8003a88:	08004874 	.word	0x08004874
 8003a8c:	080048a2 	.word	0x080048a2

08003a90 <_free_r>:
 8003a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a92:	2900      	cmp	r1, #0
 8003a94:	d044      	beq.n	8003b20 <_free_r+0x90>
 8003a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9a:	9001      	str	r0, [sp, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003aa2:	bfb8      	it	lt
 8003aa4:	18e4      	addlt	r4, r4, r3
 8003aa6:	f000 f8e7 	bl	8003c78 <__malloc_lock>
 8003aaa:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <_free_r+0x94>)
 8003aac:	9801      	ldr	r0, [sp, #4]
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	b933      	cbnz	r3, 8003ac0 <_free_r+0x30>
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	6014      	str	r4, [r2, #0]
 8003ab6:	b003      	add	sp, #12
 8003ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003abc:	f000 b8e2 	b.w	8003c84 <__malloc_unlock>
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d908      	bls.n	8003ad6 <_free_r+0x46>
 8003ac4:	6825      	ldr	r5, [r4, #0]
 8003ac6:	1961      	adds	r1, r4, r5
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	bf01      	itttt	eq
 8003acc:	6819      	ldreq	r1, [r3, #0]
 8003ace:	685b      	ldreq	r3, [r3, #4]
 8003ad0:	1949      	addeq	r1, r1, r5
 8003ad2:	6021      	streq	r1, [r4, #0]
 8003ad4:	e7ed      	b.n	8003ab2 <_free_r+0x22>
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	b10b      	cbz	r3, 8003ae0 <_free_r+0x50>
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d9fa      	bls.n	8003ad6 <_free_r+0x46>
 8003ae0:	6811      	ldr	r1, [r2, #0]
 8003ae2:	1855      	adds	r5, r2, r1
 8003ae4:	42a5      	cmp	r5, r4
 8003ae6:	d10b      	bne.n	8003b00 <_free_r+0x70>
 8003ae8:	6824      	ldr	r4, [r4, #0]
 8003aea:	4421      	add	r1, r4
 8003aec:	1854      	adds	r4, r2, r1
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	6011      	str	r1, [r2, #0]
 8003af2:	d1e0      	bne.n	8003ab6 <_free_r+0x26>
 8003af4:	681c      	ldr	r4, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6053      	str	r3, [r2, #4]
 8003afa:	440c      	add	r4, r1
 8003afc:	6014      	str	r4, [r2, #0]
 8003afe:	e7da      	b.n	8003ab6 <_free_r+0x26>
 8003b00:	d902      	bls.n	8003b08 <_free_r+0x78>
 8003b02:	230c      	movs	r3, #12
 8003b04:	6003      	str	r3, [r0, #0]
 8003b06:	e7d6      	b.n	8003ab6 <_free_r+0x26>
 8003b08:	6825      	ldr	r5, [r4, #0]
 8003b0a:	1961      	adds	r1, r4, r5
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	bf04      	itt	eq
 8003b10:	6819      	ldreq	r1, [r3, #0]
 8003b12:	685b      	ldreq	r3, [r3, #4]
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	bf04      	itt	eq
 8003b18:	1949      	addeq	r1, r1, r5
 8003b1a:	6021      	streq	r1, [r4, #0]
 8003b1c:	6054      	str	r4, [r2, #4]
 8003b1e:	e7ca      	b.n	8003ab6 <_free_r+0x26>
 8003b20:	b003      	add	sp, #12
 8003b22:	bd30      	pop	{r4, r5, pc}
 8003b24:	20000338 	.word	0x20000338

08003b28 <malloc>:
 8003b28:	4b02      	ldr	r3, [pc, #8]	; (8003b34 <malloc+0xc>)
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f000 b823 	b.w	8003b78 <_malloc_r>
 8003b32:	bf00      	nop
 8003b34:	20000064 	.word	0x20000064

08003b38 <sbrk_aligned>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4e0e      	ldr	r6, [pc, #56]	; (8003b74 <sbrk_aligned+0x3c>)
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	6831      	ldr	r1, [r6, #0]
 8003b40:	4605      	mov	r5, r0
 8003b42:	b911      	cbnz	r1, 8003b4a <sbrk_aligned+0x12>
 8003b44:	f000 f964 	bl	8003e10 <_sbrk_r>
 8003b48:	6030      	str	r0, [r6, #0]
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f000 f95f 	bl	8003e10 <_sbrk_r>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	d00a      	beq.n	8003b6c <sbrk_aligned+0x34>
 8003b56:	1cc4      	adds	r4, r0, #3
 8003b58:	f024 0403 	bic.w	r4, r4, #3
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d007      	beq.n	8003b70 <sbrk_aligned+0x38>
 8003b60:	1a21      	subs	r1, r4, r0
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 f954 	bl	8003e10 <_sbrk_r>
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d101      	bne.n	8003b70 <sbrk_aligned+0x38>
 8003b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b70:	4620      	mov	r0, r4
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	2000033c 	.word	0x2000033c

08003b78 <_malloc_r>:
 8003b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b7c:	1ccd      	adds	r5, r1, #3
 8003b7e:	f025 0503 	bic.w	r5, r5, #3
 8003b82:	3508      	adds	r5, #8
 8003b84:	2d0c      	cmp	r5, #12
 8003b86:	bf38      	it	cc
 8003b88:	250c      	movcc	r5, #12
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	db01      	blt.n	8003b94 <_malloc_r+0x1c>
 8003b90:	42a9      	cmp	r1, r5
 8003b92:	d905      	bls.n	8003ba0 <_malloc_r+0x28>
 8003b94:	230c      	movs	r3, #12
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	2600      	movs	r6, #0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c74 <_malloc_r+0xfc>
 8003ba4:	f000 f868 	bl	8003c78 <__malloc_lock>
 8003ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bac:	461c      	mov	r4, r3
 8003bae:	bb5c      	cbnz	r4, 8003c08 <_malloc_r+0x90>
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	f7ff ffc0 	bl	8003b38 <sbrk_aligned>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	4604      	mov	r4, r0
 8003bbc:	d155      	bne.n	8003c6a <_malloc_r+0xf2>
 8003bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8003bc2:	4626      	mov	r6, r4
 8003bc4:	2e00      	cmp	r6, #0
 8003bc6:	d145      	bne.n	8003c54 <_malloc_r+0xdc>
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	d048      	beq.n	8003c5e <_malloc_r+0xe6>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	4631      	mov	r1, r6
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	eb04 0903 	add.w	r9, r4, r3
 8003bd6:	f000 f91b 	bl	8003e10 <_sbrk_r>
 8003bda:	4581      	cmp	r9, r0
 8003bdc:	d13f      	bne.n	8003c5e <_malloc_r+0xe6>
 8003bde:	6821      	ldr	r1, [r4, #0]
 8003be0:	1a6d      	subs	r5, r5, r1
 8003be2:	4629      	mov	r1, r5
 8003be4:	4638      	mov	r0, r7
 8003be6:	f7ff ffa7 	bl	8003b38 <sbrk_aligned>
 8003bea:	3001      	adds	r0, #1
 8003bec:	d037      	beq.n	8003c5e <_malloc_r+0xe6>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	442b      	add	r3, r5
 8003bf2:	6023      	str	r3, [r4, #0]
 8003bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d038      	beq.n	8003c6e <_malloc_r+0xf6>
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	42a2      	cmp	r2, r4
 8003c00:	d12b      	bne.n	8003c5a <_malloc_r+0xe2>
 8003c02:	2200      	movs	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	e00f      	b.n	8003c28 <_malloc_r+0xb0>
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	1b52      	subs	r2, r2, r5
 8003c0c:	d41f      	bmi.n	8003c4e <_malloc_r+0xd6>
 8003c0e:	2a0b      	cmp	r2, #11
 8003c10:	d917      	bls.n	8003c42 <_malloc_r+0xca>
 8003c12:	1961      	adds	r1, r4, r5
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	6025      	str	r5, [r4, #0]
 8003c18:	bf18      	it	ne
 8003c1a:	6059      	strne	r1, [r3, #4]
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	bf08      	it	eq
 8003c20:	f8c8 1000 	streq.w	r1, [r8]
 8003c24:	5162      	str	r2, [r4, r5]
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f104 060b 	add.w	r6, r4, #11
 8003c2e:	f000 f829 	bl	8003c84 <__malloc_unlock>
 8003c32:	f026 0607 	bic.w	r6, r6, #7
 8003c36:	1d23      	adds	r3, r4, #4
 8003c38:	1af2      	subs	r2, r6, r3
 8003c3a:	d0ae      	beq.n	8003b9a <_malloc_r+0x22>
 8003c3c:	1b9b      	subs	r3, r3, r6
 8003c3e:	50a3      	str	r3, [r4, r2]
 8003c40:	e7ab      	b.n	8003b9a <_malloc_r+0x22>
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	6862      	ldr	r2, [r4, #4]
 8003c46:	d1dd      	bne.n	8003c04 <_malloc_r+0x8c>
 8003c48:	f8c8 2000 	str.w	r2, [r8]
 8003c4c:	e7ec      	b.n	8003c28 <_malloc_r+0xb0>
 8003c4e:	4623      	mov	r3, r4
 8003c50:	6864      	ldr	r4, [r4, #4]
 8003c52:	e7ac      	b.n	8003bae <_malloc_r+0x36>
 8003c54:	4634      	mov	r4, r6
 8003c56:	6876      	ldr	r6, [r6, #4]
 8003c58:	e7b4      	b.n	8003bc4 <_malloc_r+0x4c>
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	e7cc      	b.n	8003bf8 <_malloc_r+0x80>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4638      	mov	r0, r7
 8003c64:	f000 f80e 	bl	8003c84 <__malloc_unlock>
 8003c68:	e797      	b.n	8003b9a <_malloc_r+0x22>
 8003c6a:	6025      	str	r5, [r4, #0]
 8003c6c:	e7dc      	b.n	8003c28 <_malloc_r+0xb0>
 8003c6e:	605b      	str	r3, [r3, #4]
 8003c70:	deff      	udf	#255	; 0xff
 8003c72:	bf00      	nop
 8003c74:	20000338 	.word	0x20000338

08003c78 <__malloc_lock>:
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <__malloc_lock+0x8>)
 8003c7a:	f7ff bee8 	b.w	8003a4e <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	20000334 	.word	0x20000334

08003c84 <__malloc_unlock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__malloc_unlock+0x8>)
 8003c86:	f7ff bee3 	b.w	8003a50 <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	20000334 	.word	0x20000334

08003c90 <__sflush_r>:
 8003c90:	898a      	ldrh	r2, [r1, #12]
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	0710      	lsls	r0, r2, #28
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	d458      	bmi.n	8003d50 <__sflush_r+0xc0>
 8003c9e:	684b      	ldr	r3, [r1, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dc05      	bgt.n	8003cb0 <__sflush_r+0x20>
 8003ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dc02      	bgt.n	8003cb0 <__sflush_r+0x20>
 8003caa:	2000      	movs	r0, #0
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d0f9      	beq.n	8003caa <__sflush_r+0x1a>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cbc:	682f      	ldr	r7, [r5, #0]
 8003cbe:	6a21      	ldr	r1, [r4, #32]
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	d032      	beq.n	8003d2a <__sflush_r+0x9a>
 8003cc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	075a      	lsls	r2, r3, #29
 8003cca:	d505      	bpl.n	8003cd8 <__sflush_r+0x48>
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	1ac0      	subs	r0, r0, r3
 8003cd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cd2:	b10b      	cbz	r3, 8003cd8 <__sflush_r+0x48>
 8003cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cd6:	1ac0      	subs	r0, r0, r3
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cde:	6a21      	ldr	r1, [r4, #32]
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b0      	blx	r6
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	d106      	bne.n	8003cf8 <__sflush_r+0x68>
 8003cea:	6829      	ldr	r1, [r5, #0]
 8003cec:	291d      	cmp	r1, #29
 8003cee:	d82b      	bhi.n	8003d48 <__sflush_r+0xb8>
 8003cf0:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <__sflush_r+0x108>)
 8003cf2:	410a      	asrs	r2, r1
 8003cf4:	07d6      	lsls	r6, r2, #31
 8003cf6:	d427      	bmi.n	8003d48 <__sflush_r+0xb8>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	6062      	str	r2, [r4, #4]
 8003cfc:	04d9      	lsls	r1, r3, #19
 8003cfe:	6922      	ldr	r2, [r4, #16]
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	d504      	bpl.n	8003d0e <__sflush_r+0x7e>
 8003d04:	1c42      	adds	r2, r0, #1
 8003d06:	d101      	bne.n	8003d0c <__sflush_r+0x7c>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b903      	cbnz	r3, 8003d0e <__sflush_r+0x7e>
 8003d0c:	6560      	str	r0, [r4, #84]	; 0x54
 8003d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d10:	602f      	str	r7, [r5, #0]
 8003d12:	2900      	cmp	r1, #0
 8003d14:	d0c9      	beq.n	8003caa <__sflush_r+0x1a>
 8003d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d002      	beq.n	8003d24 <__sflush_r+0x94>
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7ff feb6 	bl	8003a90 <_free_r>
 8003d24:	2000      	movs	r0, #0
 8003d26:	6360      	str	r0, [r4, #52]	; 0x34
 8003d28:	e7c0      	b.n	8003cac <__sflush_r+0x1c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	47b0      	blx	r6
 8003d30:	1c41      	adds	r1, r0, #1
 8003d32:	d1c8      	bne.n	8003cc6 <__sflush_r+0x36>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0c5      	beq.n	8003cc6 <__sflush_r+0x36>
 8003d3a:	2b1d      	cmp	r3, #29
 8003d3c:	d001      	beq.n	8003d42 <__sflush_r+0xb2>
 8003d3e:	2b16      	cmp	r3, #22
 8003d40:	d101      	bne.n	8003d46 <__sflush_r+0xb6>
 8003d42:	602f      	str	r7, [r5, #0]
 8003d44:	e7b1      	b.n	8003caa <__sflush_r+0x1a>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4c:	81a3      	strh	r3, [r4, #12]
 8003d4e:	e7ad      	b.n	8003cac <__sflush_r+0x1c>
 8003d50:	690f      	ldr	r7, [r1, #16]
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d0a9      	beq.n	8003caa <__sflush_r+0x1a>
 8003d56:	0793      	lsls	r3, r2, #30
 8003d58:	680e      	ldr	r6, [r1, #0]
 8003d5a:	bf08      	it	eq
 8003d5c:	694b      	ldreq	r3, [r1, #20]
 8003d5e:	600f      	str	r7, [r1, #0]
 8003d60:	bf18      	it	ne
 8003d62:	2300      	movne	r3, #0
 8003d64:	eba6 0807 	sub.w	r8, r6, r7
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	f1b8 0f00 	cmp.w	r8, #0
 8003d6e:	dd9c      	ble.n	8003caa <__sflush_r+0x1a>
 8003d70:	6a21      	ldr	r1, [r4, #32]
 8003d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d74:	4643      	mov	r3, r8
 8003d76:	463a      	mov	r2, r7
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b0      	blx	r6
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dc06      	bgt.n	8003d8e <__sflush_r+0xfe>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e78e      	b.n	8003cac <__sflush_r+0x1c>
 8003d8e:	4407      	add	r7, r0
 8003d90:	eba8 0800 	sub.w	r8, r8, r0
 8003d94:	e7e9      	b.n	8003d6a <__sflush_r+0xda>
 8003d96:	bf00      	nop
 8003d98:	dfbffffe 	.word	0xdfbffffe

08003d9c <_fflush_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	690b      	ldr	r3, [r1, #16]
 8003da0:	4605      	mov	r5, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	b913      	cbnz	r3, 8003dac <_fflush_r+0x10>
 8003da6:	2500      	movs	r5, #0
 8003da8:	4628      	mov	r0, r5
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	b118      	cbz	r0, 8003db6 <_fflush_r+0x1a>
 8003dae:	6a03      	ldr	r3, [r0, #32]
 8003db0:	b90b      	cbnz	r3, 8003db6 <_fflush_r+0x1a>
 8003db2:	f7ff fd59 	bl	8003868 <__sinit>
 8003db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f3      	beq.n	8003da6 <_fflush_r+0xa>
 8003dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dc0:	07d0      	lsls	r0, r2, #31
 8003dc2:	d404      	bmi.n	8003dce <_fflush_r+0x32>
 8003dc4:	0599      	lsls	r1, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_fflush_r+0x32>
 8003dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dca:	f7ff fe40 	bl	8003a4e <__retarget_lock_acquire_recursive>
 8003dce:	4628      	mov	r0, r5
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	f7ff ff5d 	bl	8003c90 <__sflush_r>
 8003dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd8:	07da      	lsls	r2, r3, #31
 8003dda:	4605      	mov	r5, r0
 8003ddc:	d4e4      	bmi.n	8003da8 <_fflush_r+0xc>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	059b      	lsls	r3, r3, #22
 8003de2:	d4e1      	bmi.n	8003da8 <_fflush_r+0xc>
 8003de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de6:	f7ff fe33 	bl	8003a50 <__retarget_lock_release_recursive>
 8003dea:	e7dd      	b.n	8003da8 <_fflush_r+0xc>

08003dec <fiprintf>:
 8003dec:	b40e      	push	{r1, r2, r3}
 8003dee:	b503      	push	{r0, r1, lr}
 8003df0:	4601      	mov	r1, r0
 8003df2:	ab03      	add	r3, sp, #12
 8003df4:	4805      	ldr	r0, [pc, #20]	; (8003e0c <fiprintf+0x20>)
 8003df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	f000 f847 	bl	8003e90 <_vfiprintf_r>
 8003e02:	b002      	add	sp, #8
 8003e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e08:	b003      	add	sp, #12
 8003e0a:	4770      	bx	lr
 8003e0c:	20000064 	.word	0x20000064

08003e10 <_sbrk_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d06      	ldr	r5, [pc, #24]	; (8003e2c <_sbrk_r+0x1c>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	f7fc fc0c 	bl	8000638 <_sbrk>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_sbrk_r+0x1a>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_sbrk_r+0x1a>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20000330 	.word	0x20000330

08003e30 <abort>:
 8003e30:	b508      	push	{r3, lr}
 8003e32:	2006      	movs	r0, #6
 8003e34:	f000 fb94 	bl	8004560 <raise>
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f7fc fb85 	bl	8000548 <_exit>

08003e3e <__sfputc_r>:
 8003e3e:	6893      	ldr	r3, [r2, #8]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	b410      	push	{r4}
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	da08      	bge.n	8003e5c <__sfputc_r+0x1e>
 8003e4a:	6994      	ldr	r4, [r2, #24]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	db01      	blt.n	8003e54 <__sfputc_r+0x16>
 8003e50:	290a      	cmp	r1, #10
 8003e52:	d103      	bne.n	8003e5c <__sfputc_r+0x1e>
 8003e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e58:	f000 bac4 	b.w	80043e4 <__swbuf_r>
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	1c58      	adds	r0, r3, #1
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	7019      	strb	r1, [r3, #0]
 8003e64:	4608      	mov	r0, r1
 8003e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <__sfputs_r>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	4606      	mov	r6, r0
 8003e70:	460f      	mov	r7, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	18d5      	adds	r5, r2, r3
 8003e76:	42ac      	cmp	r4, r5
 8003e78:	d101      	bne.n	8003e7e <__sfputs_r+0x12>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e007      	b.n	8003e8e <__sfputs_r+0x22>
 8003e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e82:	463a      	mov	r2, r7
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff ffda 	bl	8003e3e <__sfputc_r>
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	d1f3      	bne.n	8003e76 <__sfputs_r+0xa>
 8003e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e90 <_vfiprintf_r>:
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	460d      	mov	r5, r1
 8003e96:	b09d      	sub	sp, #116	; 0x74
 8003e98:	4614      	mov	r4, r2
 8003e9a:	4698      	mov	r8, r3
 8003e9c:	4606      	mov	r6, r0
 8003e9e:	b118      	cbz	r0, 8003ea8 <_vfiprintf_r+0x18>
 8003ea0:	6a03      	ldr	r3, [r0, #32]
 8003ea2:	b90b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x18>
 8003ea4:	f7ff fce0 	bl	8003868 <__sinit>
 8003ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eaa:	07d9      	lsls	r1, r3, #31
 8003eac:	d405      	bmi.n	8003eba <_vfiprintf_r+0x2a>
 8003eae:	89ab      	ldrh	r3, [r5, #12]
 8003eb0:	059a      	lsls	r2, r3, #22
 8003eb2:	d402      	bmi.n	8003eba <_vfiprintf_r+0x2a>
 8003eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eb6:	f7ff fdca 	bl	8003a4e <__retarget_lock_acquire_recursive>
 8003eba:	89ab      	ldrh	r3, [r5, #12]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	d501      	bpl.n	8003ec4 <_vfiprintf_r+0x34>
 8003ec0:	692b      	ldr	r3, [r5, #16]
 8003ec2:	b99b      	cbnz	r3, 8003eec <_vfiprintf_r+0x5c>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f000 faca 	bl	8004460 <__swsetup_r>
 8003ecc:	b170      	cbz	r0, 8003eec <_vfiprintf_r+0x5c>
 8003ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed0:	07dc      	lsls	r4, r3, #31
 8003ed2:	d504      	bpl.n	8003ede <_vfiprintf_r+0x4e>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	b01d      	add	sp, #116	; 0x74
 8003eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	0598      	lsls	r0, r3, #22
 8003ee2:	d4f7      	bmi.n	8003ed4 <_vfiprintf_r+0x44>
 8003ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ee6:	f7ff fdb3 	bl	8003a50 <__retarget_lock_release_recursive>
 8003eea:	e7f3      	b.n	8003ed4 <_vfiprintf_r+0x44>
 8003eec:	2300      	movs	r3, #0
 8003eee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003efa:	2330      	movs	r3, #48	; 0x30
 8003efc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040b0 <_vfiprintf_r+0x220>
 8003f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f04:	f04f 0901 	mov.w	r9, #1
 8003f08:	4623      	mov	r3, r4
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f10:	b10a      	cbz	r2, 8003f16 <_vfiprintf_r+0x86>
 8003f12:	2a25      	cmp	r2, #37	; 0x25
 8003f14:	d1f9      	bne.n	8003f0a <_vfiprintf_r+0x7a>
 8003f16:	ebba 0b04 	subs.w	fp, sl, r4
 8003f1a:	d00b      	beq.n	8003f34 <_vfiprintf_r+0xa4>
 8003f1c:	465b      	mov	r3, fp
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4629      	mov	r1, r5
 8003f22:	4630      	mov	r0, r6
 8003f24:	f7ff ffa2 	bl	8003e6c <__sfputs_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	f000 80a9 	beq.w	8004080 <_vfiprintf_r+0x1f0>
 8003f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f30:	445a      	add	r2, fp
 8003f32:	9209      	str	r2, [sp, #36]	; 0x24
 8003f34:	f89a 3000 	ldrb.w	r3, [sl]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a1 	beq.w	8004080 <_vfiprintf_r+0x1f0>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f48:	f10a 0a01 	add.w	sl, sl, #1
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	9307      	str	r3, [sp, #28]
 8003f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f54:	931a      	str	r3, [sp, #104]	; 0x68
 8003f56:	4654      	mov	r4, sl
 8003f58:	2205      	movs	r2, #5
 8003f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5e:	4854      	ldr	r0, [pc, #336]	; (80040b0 <_vfiprintf_r+0x220>)
 8003f60:	f7fc f936 	bl	80001d0 <memchr>
 8003f64:	9a04      	ldr	r2, [sp, #16]
 8003f66:	b9d8      	cbnz	r0, 8003fa0 <_vfiprintf_r+0x110>
 8003f68:	06d1      	lsls	r1, r2, #27
 8003f6a:	bf44      	itt	mi
 8003f6c:	2320      	movmi	r3, #32
 8003f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f72:	0713      	lsls	r3, r2, #28
 8003f74:	bf44      	itt	mi
 8003f76:	232b      	movmi	r3, #43	; 0x2b
 8003f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f80:	2b2a      	cmp	r3, #42	; 0x2a
 8003f82:	d015      	beq.n	8003fb0 <_vfiprintf_r+0x120>
 8003f84:	9a07      	ldr	r2, [sp, #28]
 8003f86:	4654      	mov	r4, sl
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f04f 0c0a 	mov.w	ip, #10
 8003f8e:	4621      	mov	r1, r4
 8003f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f94:	3b30      	subs	r3, #48	; 0x30
 8003f96:	2b09      	cmp	r3, #9
 8003f98:	d94d      	bls.n	8004036 <_vfiprintf_r+0x1a6>
 8003f9a:	b1b0      	cbz	r0, 8003fca <_vfiprintf_r+0x13a>
 8003f9c:	9207      	str	r2, [sp, #28]
 8003f9e:	e014      	b.n	8003fca <_vfiprintf_r+0x13a>
 8003fa0:	eba0 0308 	sub.w	r3, r0, r8
 8003fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	46a2      	mov	sl, r4
 8003fae:	e7d2      	b.n	8003f56 <_vfiprintf_r+0xc6>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	1d19      	adds	r1, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	9103      	str	r1, [sp, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bfbb      	ittet	lt
 8003fbc:	425b      	neglt	r3, r3
 8003fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc2:	9307      	strge	r3, [sp, #28]
 8003fc4:	9307      	strlt	r3, [sp, #28]
 8003fc6:	bfb8      	it	lt
 8003fc8:	9204      	strlt	r2, [sp, #16]
 8003fca:	7823      	ldrb	r3, [r4, #0]
 8003fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8003fce:	d10c      	bne.n	8003fea <_vfiprintf_r+0x15a>
 8003fd0:	7863      	ldrb	r3, [r4, #1]
 8003fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd4:	d134      	bne.n	8004040 <_vfiprintf_r+0x1b0>
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9203      	str	r2, [sp, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfb8      	it	lt
 8003fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe6:	3402      	adds	r4, #2
 8003fe8:	9305      	str	r3, [sp, #20]
 8003fea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80040c0 <_vfiprintf_r+0x230>
 8003fee:	7821      	ldrb	r1, [r4, #0]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	f7fc f8ec 	bl	80001d0 <memchr>
 8003ff8:	b138      	cbz	r0, 800400a <_vfiprintf_r+0x17a>
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	eba0 000a 	sub.w	r0, r0, sl
 8004000:	2240      	movs	r2, #64	; 0x40
 8004002:	4082      	lsls	r2, r0
 8004004:	4313      	orrs	r3, r2
 8004006:	3401      	adds	r4, #1
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400e:	4829      	ldr	r0, [pc, #164]	; (80040b4 <_vfiprintf_r+0x224>)
 8004010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004014:	2206      	movs	r2, #6
 8004016:	f7fc f8db 	bl	80001d0 <memchr>
 800401a:	2800      	cmp	r0, #0
 800401c:	d03f      	beq.n	800409e <_vfiprintf_r+0x20e>
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <_vfiprintf_r+0x228>)
 8004020:	bb1b      	cbnz	r3, 800406a <_vfiprintf_r+0x1da>
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	3307      	adds	r3, #7
 8004026:	f023 0307 	bic.w	r3, r3, #7
 800402a:	3308      	adds	r3, #8
 800402c:	9303      	str	r3, [sp, #12]
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	443b      	add	r3, r7
 8004032:	9309      	str	r3, [sp, #36]	; 0x24
 8004034:	e768      	b.n	8003f08 <_vfiprintf_r+0x78>
 8004036:	fb0c 3202 	mla	r2, ip, r2, r3
 800403a:	460c      	mov	r4, r1
 800403c:	2001      	movs	r0, #1
 800403e:	e7a6      	b.n	8003f8e <_vfiprintf_r+0xfe>
 8004040:	2300      	movs	r3, #0
 8004042:	3401      	adds	r4, #1
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	4619      	mov	r1, r3
 8004048:	f04f 0c0a 	mov.w	ip, #10
 800404c:	4620      	mov	r0, r4
 800404e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004052:	3a30      	subs	r2, #48	; 0x30
 8004054:	2a09      	cmp	r2, #9
 8004056:	d903      	bls.n	8004060 <_vfiprintf_r+0x1d0>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0c6      	beq.n	8003fea <_vfiprintf_r+0x15a>
 800405c:	9105      	str	r1, [sp, #20]
 800405e:	e7c4      	b.n	8003fea <_vfiprintf_r+0x15a>
 8004060:	fb0c 2101 	mla	r1, ip, r1, r2
 8004064:	4604      	mov	r4, r0
 8004066:	2301      	movs	r3, #1
 8004068:	e7f0      	b.n	800404c <_vfiprintf_r+0x1bc>
 800406a:	ab03      	add	r3, sp, #12
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	462a      	mov	r2, r5
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <_vfiprintf_r+0x22c>)
 8004072:	a904      	add	r1, sp, #16
 8004074:	4630      	mov	r0, r6
 8004076:	f3af 8000 	nop.w
 800407a:	4607      	mov	r7, r0
 800407c:	1c78      	adds	r0, r7, #1
 800407e:	d1d6      	bne.n	800402e <_vfiprintf_r+0x19e>
 8004080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004082:	07d9      	lsls	r1, r3, #31
 8004084:	d405      	bmi.n	8004092 <_vfiprintf_r+0x202>
 8004086:	89ab      	ldrh	r3, [r5, #12]
 8004088:	059a      	lsls	r2, r3, #22
 800408a:	d402      	bmi.n	8004092 <_vfiprintf_r+0x202>
 800408c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800408e:	f7ff fcdf 	bl	8003a50 <__retarget_lock_release_recursive>
 8004092:	89ab      	ldrh	r3, [r5, #12]
 8004094:	065b      	lsls	r3, r3, #25
 8004096:	f53f af1d 	bmi.w	8003ed4 <_vfiprintf_r+0x44>
 800409a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800409c:	e71c      	b.n	8003ed8 <_vfiprintf_r+0x48>
 800409e:	ab03      	add	r3, sp, #12
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <_vfiprintf_r+0x22c>)
 80040a6:	a904      	add	r1, sp, #16
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 f879 	bl	80041a0 <_printf_i>
 80040ae:	e7e4      	b.n	800407a <_vfiprintf_r+0x1ea>
 80040b0:	080048a3 	.word	0x080048a3
 80040b4:	080048ad 	.word	0x080048ad
 80040b8:	00000000 	.word	0x00000000
 80040bc:	08003e6d 	.word	0x08003e6d
 80040c0:	080048a9 	.word	0x080048a9

080040c4 <_printf_common>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	4616      	mov	r6, r2
 80040ca:	4699      	mov	r9, r3
 80040cc:	688a      	ldr	r2, [r1, #8]
 80040ce:	690b      	ldr	r3, [r1, #16]
 80040d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfb8      	it	lt
 80040d8:	4613      	movlt	r3, r2
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040e0:	4607      	mov	r7, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b10a      	cbz	r2, 80040ea <_printf_common+0x26>
 80040e6:	3301      	adds	r3, #1
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0699      	lsls	r1, r3, #26
 80040ee:	bf42      	ittt	mi
 80040f0:	6833      	ldrmi	r3, [r6, #0]
 80040f2:	3302      	addmi	r3, #2
 80040f4:	6033      	strmi	r3, [r6, #0]
 80040f6:	6825      	ldr	r5, [r4, #0]
 80040f8:	f015 0506 	ands.w	r5, r5, #6
 80040fc:	d106      	bne.n	800410c <_printf_common+0x48>
 80040fe:	f104 0a19 	add.w	sl, r4, #25
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	6832      	ldr	r2, [r6, #0]
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	42ab      	cmp	r3, r5
 800410a:	dc26      	bgt.n	800415a <_printf_common+0x96>
 800410c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004110:	1e13      	subs	r3, r2, #0
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	bf18      	it	ne
 8004116:	2301      	movne	r3, #1
 8004118:	0692      	lsls	r2, r2, #26
 800411a:	d42b      	bmi.n	8004174 <_printf_common+0xb0>
 800411c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004120:	4649      	mov	r1, r9
 8004122:	4638      	mov	r0, r7
 8004124:	47c0      	blx	r8
 8004126:	3001      	adds	r0, #1
 8004128:	d01e      	beq.n	8004168 <_printf_common+0xa4>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	6922      	ldr	r2, [r4, #16]
 800412e:	f003 0306 	and.w	r3, r3, #6
 8004132:	2b04      	cmp	r3, #4
 8004134:	bf02      	ittt	eq
 8004136:	68e5      	ldreq	r5, [r4, #12]
 8004138:	6833      	ldreq	r3, [r6, #0]
 800413a:	1aed      	subeq	r5, r5, r3
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	bf0c      	ite	eq
 8004140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004144:	2500      	movne	r5, #0
 8004146:	4293      	cmp	r3, r2
 8004148:	bfc4      	itt	gt
 800414a:	1a9b      	subgt	r3, r3, r2
 800414c:	18ed      	addgt	r5, r5, r3
 800414e:	2600      	movs	r6, #0
 8004150:	341a      	adds	r4, #26
 8004152:	42b5      	cmp	r5, r6
 8004154:	d11a      	bne.n	800418c <_printf_common+0xc8>
 8004156:	2000      	movs	r0, #0
 8004158:	e008      	b.n	800416c <_printf_common+0xa8>
 800415a:	2301      	movs	r3, #1
 800415c:	4652      	mov	r2, sl
 800415e:	4649      	mov	r1, r9
 8004160:	4638      	mov	r0, r7
 8004162:	47c0      	blx	r8
 8004164:	3001      	adds	r0, #1
 8004166:	d103      	bne.n	8004170 <_printf_common+0xac>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	3501      	adds	r5, #1
 8004172:	e7c6      	b.n	8004102 <_printf_common+0x3e>
 8004174:	18e1      	adds	r1, r4, r3
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	2030      	movs	r0, #48	; 0x30
 800417a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800417e:	4422      	add	r2, r4
 8004180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004188:	3302      	adds	r3, #2
 800418a:	e7c7      	b.n	800411c <_printf_common+0x58>
 800418c:	2301      	movs	r3, #1
 800418e:	4622      	mov	r2, r4
 8004190:	4649      	mov	r1, r9
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d0e6      	beq.n	8004168 <_printf_common+0xa4>
 800419a:	3601      	adds	r6, #1
 800419c:	e7d9      	b.n	8004152 <_printf_common+0x8e>
	...

080041a0 <_printf_i>:
 80041a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	7e0f      	ldrb	r7, [r1, #24]
 80041a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041a8:	2f78      	cmp	r7, #120	; 0x78
 80041aa:	4691      	mov	r9, r2
 80041ac:	4680      	mov	r8, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	469a      	mov	sl, r3
 80041b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041b6:	d807      	bhi.n	80041c8 <_printf_i+0x28>
 80041b8:	2f62      	cmp	r7, #98	; 0x62
 80041ba:	d80a      	bhi.n	80041d2 <_printf_i+0x32>
 80041bc:	2f00      	cmp	r7, #0
 80041be:	f000 80d4 	beq.w	800436a <_printf_i+0x1ca>
 80041c2:	2f58      	cmp	r7, #88	; 0x58
 80041c4:	f000 80c0 	beq.w	8004348 <_printf_i+0x1a8>
 80041c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041d0:	e03a      	b.n	8004248 <_printf_i+0xa8>
 80041d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041d6:	2b15      	cmp	r3, #21
 80041d8:	d8f6      	bhi.n	80041c8 <_printf_i+0x28>
 80041da:	a101      	add	r1, pc, #4	; (adr r1, 80041e0 <_printf_i+0x40>)
 80041dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041e0:	08004239 	.word	0x08004239
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	080041c9 	.word	0x080041c9
 80041ec:	080041c9 	.word	0x080041c9
 80041f0:	080041c9 	.word	0x080041c9
 80041f4:	080041c9 	.word	0x080041c9
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	080041c9 	.word	0x080041c9
 8004200:	080041c9 	.word	0x080041c9
 8004204:	080041c9 	.word	0x080041c9
 8004208:	080041c9 	.word	0x080041c9
 800420c:	08004351 	.word	0x08004351
 8004210:	08004279 	.word	0x08004279
 8004214:	0800430b 	.word	0x0800430b
 8004218:	080041c9 	.word	0x080041c9
 800421c:	080041c9 	.word	0x080041c9
 8004220:	08004373 	.word	0x08004373
 8004224:	080041c9 	.word	0x080041c9
 8004228:	08004279 	.word	0x08004279
 800422c:	080041c9 	.word	0x080041c9
 8004230:	080041c9 	.word	0x080041c9
 8004234:	08004313 	.word	0x08004313
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	602a      	str	r2, [r5, #0]
 8004240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004248:	2301      	movs	r3, #1
 800424a:	e09f      	b.n	800438c <_printf_i+0x1ec>
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	682b      	ldr	r3, [r5, #0]
 8004250:	0607      	lsls	r7, r0, #24
 8004252:	f103 0104 	add.w	r1, r3, #4
 8004256:	6029      	str	r1, [r5, #0]
 8004258:	d501      	bpl.n	800425e <_printf_i+0xbe>
 800425a:	681e      	ldr	r6, [r3, #0]
 800425c:	e003      	b.n	8004266 <_printf_i+0xc6>
 800425e:	0646      	lsls	r6, r0, #25
 8004260:	d5fb      	bpl.n	800425a <_printf_i+0xba>
 8004262:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004266:	2e00      	cmp	r6, #0
 8004268:	da03      	bge.n	8004272 <_printf_i+0xd2>
 800426a:	232d      	movs	r3, #45	; 0x2d
 800426c:	4276      	negs	r6, r6
 800426e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004272:	485a      	ldr	r0, [pc, #360]	; (80043dc <_printf_i+0x23c>)
 8004274:	230a      	movs	r3, #10
 8004276:	e012      	b.n	800429e <_printf_i+0xfe>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	1d19      	adds	r1, r3, #4
 800427e:	6029      	str	r1, [r5, #0]
 8004280:	0605      	lsls	r5, r0, #24
 8004282:	d501      	bpl.n	8004288 <_printf_i+0xe8>
 8004284:	681e      	ldr	r6, [r3, #0]
 8004286:	e002      	b.n	800428e <_printf_i+0xee>
 8004288:	0641      	lsls	r1, r0, #25
 800428a:	d5fb      	bpl.n	8004284 <_printf_i+0xe4>
 800428c:	881e      	ldrh	r6, [r3, #0]
 800428e:	4853      	ldr	r0, [pc, #332]	; (80043dc <_printf_i+0x23c>)
 8004290:	2f6f      	cmp	r7, #111	; 0x6f
 8004292:	bf0c      	ite	eq
 8004294:	2308      	moveq	r3, #8
 8004296:	230a      	movne	r3, #10
 8004298:	2100      	movs	r1, #0
 800429a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800429e:	6865      	ldr	r5, [r4, #4]
 80042a0:	60a5      	str	r5, [r4, #8]
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	bfa2      	ittt	ge
 80042a6:	6821      	ldrge	r1, [r4, #0]
 80042a8:	f021 0104 	bicge.w	r1, r1, #4
 80042ac:	6021      	strge	r1, [r4, #0]
 80042ae:	b90e      	cbnz	r6, 80042b4 <_printf_i+0x114>
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	d04b      	beq.n	800434c <_printf_i+0x1ac>
 80042b4:	4615      	mov	r5, r2
 80042b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80042ba:	fb03 6711 	mls	r7, r3, r1, r6
 80042be:	5dc7      	ldrb	r7, [r0, r7]
 80042c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042c4:	4637      	mov	r7, r6
 80042c6:	42bb      	cmp	r3, r7
 80042c8:	460e      	mov	r6, r1
 80042ca:	d9f4      	bls.n	80042b6 <_printf_i+0x116>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d10b      	bne.n	80042e8 <_printf_i+0x148>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	07de      	lsls	r6, r3, #31
 80042d4:	d508      	bpl.n	80042e8 <_printf_i+0x148>
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6861      	ldr	r1, [r4, #4]
 80042da:	4299      	cmp	r1, r3
 80042dc:	bfde      	ittt	le
 80042de:	2330      	movle	r3, #48	; 0x30
 80042e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e8:	1b52      	subs	r2, r2, r5
 80042ea:	6122      	str	r2, [r4, #16]
 80042ec:	f8cd a000 	str.w	sl, [sp]
 80042f0:	464b      	mov	r3, r9
 80042f2:	aa03      	add	r2, sp, #12
 80042f4:	4621      	mov	r1, r4
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7ff fee4 	bl	80040c4 <_printf_common>
 80042fc:	3001      	adds	r0, #1
 80042fe:	d14a      	bne.n	8004396 <_printf_i+0x1f6>
 8004300:	f04f 30ff 	mov.w	r0, #4294967295
 8004304:	b004      	add	sp, #16
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	4833      	ldr	r0, [pc, #204]	; (80043e0 <_printf_i+0x240>)
 8004314:	2778      	movs	r7, #120	; 0x78
 8004316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	6829      	ldr	r1, [r5, #0]
 800431e:	061f      	lsls	r7, r3, #24
 8004320:	f851 6b04 	ldr.w	r6, [r1], #4
 8004324:	d402      	bmi.n	800432c <_printf_i+0x18c>
 8004326:	065f      	lsls	r7, r3, #25
 8004328:	bf48      	it	mi
 800432a:	b2b6      	uxthmi	r6, r6
 800432c:	07df      	lsls	r7, r3, #31
 800432e:	bf48      	it	mi
 8004330:	f043 0320 	orrmi.w	r3, r3, #32
 8004334:	6029      	str	r1, [r5, #0]
 8004336:	bf48      	it	mi
 8004338:	6023      	strmi	r3, [r4, #0]
 800433a:	b91e      	cbnz	r6, 8004344 <_printf_i+0x1a4>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	f023 0320 	bic.w	r3, r3, #32
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	2310      	movs	r3, #16
 8004346:	e7a7      	b.n	8004298 <_printf_i+0xf8>
 8004348:	4824      	ldr	r0, [pc, #144]	; (80043dc <_printf_i+0x23c>)
 800434a:	e7e4      	b.n	8004316 <_printf_i+0x176>
 800434c:	4615      	mov	r5, r2
 800434e:	e7bd      	b.n	80042cc <_printf_i+0x12c>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	6826      	ldr	r6, [r4, #0]
 8004354:	6961      	ldr	r1, [r4, #20]
 8004356:	1d18      	adds	r0, r3, #4
 8004358:	6028      	str	r0, [r5, #0]
 800435a:	0635      	lsls	r5, r6, #24
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	d501      	bpl.n	8004364 <_printf_i+0x1c4>
 8004360:	6019      	str	r1, [r3, #0]
 8004362:	e002      	b.n	800436a <_printf_i+0x1ca>
 8004364:	0670      	lsls	r0, r6, #25
 8004366:	d5fb      	bpl.n	8004360 <_printf_i+0x1c0>
 8004368:	8019      	strh	r1, [r3, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	4615      	mov	r5, r2
 8004370:	e7bc      	b.n	80042ec <_printf_i+0x14c>
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	1d1a      	adds	r2, r3, #4
 8004376:	602a      	str	r2, [r5, #0]
 8004378:	681d      	ldr	r5, [r3, #0]
 800437a:	6862      	ldr	r2, [r4, #4]
 800437c:	2100      	movs	r1, #0
 800437e:	4628      	mov	r0, r5
 8004380:	f7fb ff26 	bl	80001d0 <memchr>
 8004384:	b108      	cbz	r0, 800438a <_printf_i+0x1ea>
 8004386:	1b40      	subs	r0, r0, r5
 8004388:	6060      	str	r0, [r4, #4]
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	2300      	movs	r3, #0
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	e7aa      	b.n	80042ec <_printf_i+0x14c>
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	462a      	mov	r2, r5
 800439a:	4649      	mov	r1, r9
 800439c:	4640      	mov	r0, r8
 800439e:	47d0      	blx	sl
 80043a0:	3001      	adds	r0, #1
 80043a2:	d0ad      	beq.n	8004300 <_printf_i+0x160>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	079b      	lsls	r3, r3, #30
 80043a8:	d413      	bmi.n	80043d2 <_printf_i+0x232>
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	4298      	cmp	r0, r3
 80043b0:	bfb8      	it	lt
 80043b2:	4618      	movlt	r0, r3
 80043b4:	e7a6      	b.n	8004304 <_printf_i+0x164>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4632      	mov	r2, r6
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	47d0      	blx	sl
 80043c0:	3001      	adds	r0, #1
 80043c2:	d09d      	beq.n	8004300 <_printf_i+0x160>
 80043c4:	3501      	adds	r5, #1
 80043c6:	68e3      	ldr	r3, [r4, #12]
 80043c8:	9903      	ldr	r1, [sp, #12]
 80043ca:	1a5b      	subs	r3, r3, r1
 80043cc:	42ab      	cmp	r3, r5
 80043ce:	dcf2      	bgt.n	80043b6 <_printf_i+0x216>
 80043d0:	e7eb      	b.n	80043aa <_printf_i+0x20a>
 80043d2:	2500      	movs	r5, #0
 80043d4:	f104 0619 	add.w	r6, r4, #25
 80043d8:	e7f5      	b.n	80043c6 <_printf_i+0x226>
 80043da:	bf00      	nop
 80043dc:	080048b4 	.word	0x080048b4
 80043e0:	080048c5 	.word	0x080048c5

080043e4 <__swbuf_r>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	460e      	mov	r6, r1
 80043e8:	4614      	mov	r4, r2
 80043ea:	4605      	mov	r5, r0
 80043ec:	b118      	cbz	r0, 80043f6 <__swbuf_r+0x12>
 80043ee:	6a03      	ldr	r3, [r0, #32]
 80043f0:	b90b      	cbnz	r3, 80043f6 <__swbuf_r+0x12>
 80043f2:	f7ff fa39 	bl	8003868 <__sinit>
 80043f6:	69a3      	ldr	r3, [r4, #24]
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	071a      	lsls	r2, r3, #28
 80043fe:	d525      	bpl.n	800444c <__swbuf_r+0x68>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	b31b      	cbz	r3, 800444c <__swbuf_r+0x68>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	6922      	ldr	r2, [r4, #16]
 8004408:	1a98      	subs	r0, r3, r2
 800440a:	6963      	ldr	r3, [r4, #20]
 800440c:	b2f6      	uxtb	r6, r6
 800440e:	4283      	cmp	r3, r0
 8004410:	4637      	mov	r7, r6
 8004412:	dc04      	bgt.n	800441e <__swbuf_r+0x3a>
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f7ff fcc0 	bl	8003d9c <_fflush_r>
 800441c:	b9e0      	cbnz	r0, 8004458 <__swbuf_r+0x74>
 800441e:	68a3      	ldr	r3, [r4, #8]
 8004420:	3b01      	subs	r3, #1
 8004422:	60a3      	str	r3, [r4, #8]
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	6022      	str	r2, [r4, #0]
 800442a:	701e      	strb	r6, [r3, #0]
 800442c:	6962      	ldr	r2, [r4, #20]
 800442e:	1c43      	adds	r3, r0, #1
 8004430:	429a      	cmp	r2, r3
 8004432:	d004      	beq.n	800443e <__swbuf_r+0x5a>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	07db      	lsls	r3, r3, #31
 8004438:	d506      	bpl.n	8004448 <__swbuf_r+0x64>
 800443a:	2e0a      	cmp	r6, #10
 800443c:	d104      	bne.n	8004448 <__swbuf_r+0x64>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f7ff fcab 	bl	8003d9c <_fflush_r>
 8004446:	b938      	cbnz	r0, 8004458 <__swbuf_r+0x74>
 8004448:	4638      	mov	r0, r7
 800444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f806 	bl	8004460 <__swsetup_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	d0d5      	beq.n	8004404 <__swbuf_r+0x20>
 8004458:	f04f 37ff 	mov.w	r7, #4294967295
 800445c:	e7f4      	b.n	8004448 <__swbuf_r+0x64>
	...

08004460 <__swsetup_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <__swsetup_r+0xac>)
 8004464:	4605      	mov	r5, r0
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	460c      	mov	r4, r1
 800446a:	b118      	cbz	r0, 8004474 <__swsetup_r+0x14>
 800446c:	6a03      	ldr	r3, [r0, #32]
 800446e:	b90b      	cbnz	r3, 8004474 <__swsetup_r+0x14>
 8004470:	f7ff f9fa 	bl	8003868 <__sinit>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800447a:	0718      	lsls	r0, r3, #28
 800447c:	d422      	bmi.n	80044c4 <__swsetup_r+0x64>
 800447e:	06d9      	lsls	r1, r3, #27
 8004480:	d407      	bmi.n	8004492 <__swsetup_r+0x32>
 8004482:	2309      	movs	r3, #9
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e034      	b.n	80044fc <__swsetup_r+0x9c>
 8004492:	0758      	lsls	r0, r3, #29
 8004494:	d512      	bpl.n	80044bc <__swsetup_r+0x5c>
 8004496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004498:	b141      	cbz	r1, 80044ac <__swsetup_r+0x4c>
 800449a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800449e:	4299      	cmp	r1, r3
 80044a0:	d002      	beq.n	80044a8 <__swsetup_r+0x48>
 80044a2:	4628      	mov	r0, r5
 80044a4:	f7ff faf4 	bl	8003a90 <_free_r>
 80044a8:	2300      	movs	r3, #0
 80044aa:	6363      	str	r3, [r4, #52]	; 0x34
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044b2:	81a3      	strh	r3, [r4, #12]
 80044b4:	2300      	movs	r3, #0
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f043 0308 	orr.w	r3, r3, #8
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	b94b      	cbnz	r3, 80044dc <__swsetup_r+0x7c>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d2:	d003      	beq.n	80044dc <__swsetup_r+0x7c>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f884 	bl	80045e4 <__smakebuf_r>
 80044dc:	89a0      	ldrh	r0, [r4, #12]
 80044de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e2:	f010 0301 	ands.w	r3, r0, #1
 80044e6:	d00a      	beq.n	80044fe <__swsetup_r+0x9e>
 80044e8:	2300      	movs	r3, #0
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	6963      	ldr	r3, [r4, #20]
 80044ee:	425b      	negs	r3, r3
 80044f0:	61a3      	str	r3, [r4, #24]
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	b943      	cbnz	r3, 8004508 <__swsetup_r+0xa8>
 80044f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044fa:	d1c4      	bne.n	8004486 <__swsetup_r+0x26>
 80044fc:	bd38      	pop	{r3, r4, r5, pc}
 80044fe:	0781      	lsls	r1, r0, #30
 8004500:	bf58      	it	pl
 8004502:	6963      	ldrpl	r3, [r4, #20]
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	e7f4      	b.n	80044f2 <__swsetup_r+0x92>
 8004508:	2000      	movs	r0, #0
 800450a:	e7f7      	b.n	80044fc <__swsetup_r+0x9c>
 800450c:	20000064 	.word	0x20000064

08004510 <_raise_r>:
 8004510:	291f      	cmp	r1, #31
 8004512:	b538      	push	{r3, r4, r5, lr}
 8004514:	4604      	mov	r4, r0
 8004516:	460d      	mov	r5, r1
 8004518:	d904      	bls.n	8004524 <_raise_r+0x14>
 800451a:	2316      	movs	r3, #22
 800451c:	6003      	str	r3, [r0, #0]
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004526:	b112      	cbz	r2, 800452e <_raise_r+0x1e>
 8004528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800452c:	b94b      	cbnz	r3, 8004542 <_raise_r+0x32>
 800452e:	4620      	mov	r0, r4
 8004530:	f000 f830 	bl	8004594 <_getpid_r>
 8004534:	462a      	mov	r2, r5
 8004536:	4601      	mov	r1, r0
 8004538:	4620      	mov	r0, r4
 800453a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800453e:	f000 b817 	b.w	8004570 <_kill_r>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00a      	beq.n	800455c <_raise_r+0x4c>
 8004546:	1c59      	adds	r1, r3, #1
 8004548:	d103      	bne.n	8004552 <_raise_r+0x42>
 800454a:	2316      	movs	r3, #22
 800454c:	6003      	str	r3, [r0, #0]
 800454e:	2001      	movs	r0, #1
 8004550:	e7e7      	b.n	8004522 <_raise_r+0x12>
 8004552:	2400      	movs	r4, #0
 8004554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004558:	4628      	mov	r0, r5
 800455a:	4798      	blx	r3
 800455c:	2000      	movs	r0, #0
 800455e:	e7e0      	b.n	8004522 <_raise_r+0x12>

08004560 <raise>:
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <raise+0xc>)
 8004562:	4601      	mov	r1, r0
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7ff bfd3 	b.w	8004510 <_raise_r>
 800456a:	bf00      	nop
 800456c:	20000064 	.word	0x20000064

08004570 <_kill_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d07      	ldr	r5, [pc, #28]	; (8004590 <_kill_r+0x20>)
 8004574:	2300      	movs	r3, #0
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	f7fb ffd3 	bl	8000528 <_kill>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	d102      	bne.n	800458c <_kill_r+0x1c>
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	b103      	cbz	r3, 800458c <_kill_r+0x1c>
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	bd38      	pop	{r3, r4, r5, pc}
 800458e:	bf00      	nop
 8004590:	20000330 	.word	0x20000330

08004594 <_getpid_r>:
 8004594:	f7fb bfc0 	b.w	8000518 <_getpid>

08004598 <__swhatbuf_r>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	460c      	mov	r4, r1
 800459c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a0:	2900      	cmp	r1, #0
 80045a2:	b096      	sub	sp, #88	; 0x58
 80045a4:	4615      	mov	r5, r2
 80045a6:	461e      	mov	r6, r3
 80045a8:	da0d      	bge.n	80045c6 <__swhatbuf_r+0x2e>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	bf0c      	ite	eq
 80045b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045ba:	2340      	movne	r3, #64	; 0x40
 80045bc:	2000      	movs	r0, #0
 80045be:	6031      	str	r1, [r6, #0]
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	b016      	add	sp, #88	; 0x58
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
 80045c6:	466a      	mov	r2, sp
 80045c8:	f000 f848 	bl	800465c <_fstat_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	dbec      	blt.n	80045aa <__swhatbuf_r+0x12>
 80045d0:	9901      	ldr	r1, [sp, #4]
 80045d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045da:	4259      	negs	r1, r3
 80045dc:	4159      	adcs	r1, r3
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	e7eb      	b.n	80045bc <__swhatbuf_r+0x24>

080045e4 <__smakebuf_r>:
 80045e4:	898b      	ldrh	r3, [r1, #12]
 80045e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045e8:	079d      	lsls	r5, r3, #30
 80045ea:	4606      	mov	r6, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	d507      	bpl.n	8004600 <__smakebuf_r+0x1c>
 80045f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2301      	movs	r3, #1
 80045fa:	6163      	str	r3, [r4, #20]
 80045fc:	b002      	add	sp, #8
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	ab01      	add	r3, sp, #4
 8004602:	466a      	mov	r2, sp
 8004604:	f7ff ffc8 	bl	8004598 <__swhatbuf_r>
 8004608:	9900      	ldr	r1, [sp, #0]
 800460a:	4605      	mov	r5, r0
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff fab3 	bl	8003b78 <_malloc_r>
 8004612:	b948      	cbnz	r0, 8004628 <__smakebuf_r+0x44>
 8004614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004618:	059a      	lsls	r2, r3, #22
 800461a:	d4ef      	bmi.n	80045fc <__smakebuf_r+0x18>
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	e7e3      	b.n	80045f0 <__smakebuf_r+0xc>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	6020      	str	r0, [r4, #0]
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	9b00      	ldr	r3, [sp, #0]
 8004634:	6163      	str	r3, [r4, #20]
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	6120      	str	r0, [r4, #16]
 800463a:	b15b      	cbz	r3, 8004654 <__smakebuf_r+0x70>
 800463c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f81d 	bl	8004680 <_isatty_r>
 8004646:	b128      	cbz	r0, 8004654 <__smakebuf_r+0x70>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	431d      	orrs	r5, r3
 8004658:	81a5      	strh	r5, [r4, #12]
 800465a:	e7cf      	b.n	80045fc <__smakebuf_r+0x18>

0800465c <_fstat_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d07      	ldr	r5, [pc, #28]	; (800467c <_fstat_r+0x20>)
 8004660:	2300      	movs	r3, #0
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	f7fb ffbc 	bl	80005e6 <_fstat>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	d102      	bne.n	8004678 <_fstat_r+0x1c>
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	b103      	cbz	r3, 8004678 <_fstat_r+0x1c>
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	bd38      	pop	{r3, r4, r5, pc}
 800467a:	bf00      	nop
 800467c:	20000330 	.word	0x20000330

08004680 <_isatty_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	; (800469c <_isatty_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fb ffbb 	bl	8000606 <_isatty>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_isatty_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_isatty_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20000330 	.word	0x20000330

080046a0 <_init>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr

080046ac <_fini>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr
